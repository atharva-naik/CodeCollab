{
    "1.1. Series": {
        "codes": [
            "s = pd.Series({\"a\" : 10, \"b\" : 20, \"c\" : 30})",
            "s = pd.Series(x**2 for x in range(5, 10))"
        ],
        "path": "1. Series and Dataframes/1.1. Series"
    },
    "1.2. Dataframes": {
        "codes": [
            "pd.DataFrame([[1, 2], [3, 4], [5, 6]])",
            "pd.DataFrame([{\"a\" : 1}, {\"a\" : 2, \"b\" : 3}, {\"c\" : 4}])",
            "pd.DataFrame({\"a\" : [1, 3, 5, 7], \"b\" : range(4), \"c\" : np.ones(4)})",
            "df = pd.DataFrame({\"a\" : [1, 3, 5, 7], \"b\" : range(4), \"c\" : np.ones(4)}, index = [\"x\", \"y\", \"z\", \"h\"])",
            "pd.read_csv('example.csv')",
            "pd.read_csv('example.csv', index_col=False)",
            "pd.read_csv('example.tsv', delimiter='\t')",
            "pd.read_csv('example.tsv', dtype= {'a': np.float64, 'b': np.int32, 'c': 'Int64'})"
        ],
        "path": "1. Series and Dataframes/1.2. Dataframes"
    },
    "1.3. Data Access": {
        "codes": [
            "df.iloc[2,1]",
            "df.iloc[0, [0,2]]",
            "df.iloc[[0], [0, 2]]",
            "df.iloc[1]",
            "df.iloc[:,1]",
            "df.iloc[1:,:-1]",
            "df.loc[\"x\", \"c\"]",
            "df.loc[\"x\", [\"a\", \"c\"]]",
            "df.loc[[\"x\"], [\"a\", \"c\"]]",
            "df.loc[\"y\"]",
            "df.loc[\"y\":, :\"c\"]",
            "df.loc[[True, False, True, False], [False, True, False]]",
            "df[\"a\"]",
            "df[[\"b, \"c\"]])",
            "df[\"x\":\"h\"]",
            "df[[True, False, False, True]]",
            "s[\"b\"]",
            "s[[\"a\", \"c\"]]",
            "s[[True, True, False]]",
            "s.iloc[[1, 2]]"
        ],
        "path": "1. Series and Dataframes/1.3. Data Access"
    },
    "1.4. Dealing with SettingWithCopyWarning": {
        "codes": [
            "column = df[\"a\"]\n    column[0] = 100",
            "df.loc[0, \"a\"] = 100",
            "column = df[\"a\"].copy()\n    column[0] = 100"
        ],
        "path": "1. Series and Dataframes/1.4. Dealing with SettingWithCopyWarning"
    },
    "convert NumPy matrix to Pandas dataframe": {
        "codes": [
            "df = pd.DataFrame(np.arange(5000).reshape(1000, 5))",
            "s = pd.Series(np.random.randint(low = 0, high = 10, size = 1000))",
            "import string\n# series of random alphabet letters\nnp.random.seed(0)\ns = pd.Series(np.random.choice(list(string.ascii_letters), size = 1000))",
            "df = pd.DataFrame(np.random.randint(0, 10, size = 5000).reshape(1000, 5))"
        ],
        "path": "1. Series and Dataframes/1.5. Pandas and NumPy/convert NumPy matrix to Pandas dataframe"
    },
    "convert Pandas dataframe to Numpy matrix": {
        "codes": [
            "df.values"
        ],
        "path": "1. Series and Dataframes/1.5. Pandas and NumPy/convert Pandas dataframe to Numpy matrix"
    },
    "elementwise operation between multiple series": {
        "codes": [
            "s + s/2 - s**2"
        ],
        "path": "2.1. Series iteration/elementwise operation between multiple series"
    },
    "frequency count for each unique value": {
        "codes": [
            "s.value_counts()"
        ],
        "path": "2.1. Series iteration/frequency count for each unique value"
    },
    "data overview": {
        "codes": [
            "s.describe()"
        ],
        "path": "2.1. Series iteration/data overview"
    },
    "standard numerical operations": {
        "codes": [
            "s.sum()",
            "s.std()",
            "s.mean()"
        ],
        "path": "2.1. Series iteration/standard numerical operations"
    },
    "extract unique values": {
        "codes": [
            "s.unique()",
            "s.nunique()"
        ],
        "path": "2.1. Series iteration/extract unique values"
    },
    "convert to lower case": {
        "codes": [
            "s.str.lower()"
        ],
        "path": "2.1. Series iteration/convert to lower case"
    },
    "get string length": {
        "codes": [
            "s.str.len()"
        ],
        "path": "2.1. Series iteration/get string length"
    },
    "lowercase strings and replace": {
        "codes": [
            "s.str.lower().str.replace('s', '*')",
            "s.apply(lambda x: x.lower().replace('s', '*'))"
        ],
        "path": "2.1. Series iteration/lowercase strings and replace"
    },
    "dataframe iteration": {
        "codes": [
            "for col in df.columns:",
            "for index, row in df.iterrows():"
        ],
        "path": "2.2 DataFrame iteration/dataframe iteration"
    },
    "Sum of every column in the dataframe": {
        "codes": [
            "df.sum(axis = 0)"
        ],
        "path": "2.2 DataFrame iteration/Sum of every column in the dataframe"
    },
    "Sum of every row in the dataframe": {
        "codes": [
            "df.sum(axis = 1)"
        ],
        "path": "2.2 DataFrame iteration/Sum of every row in the dataframe"
    },
    "data filtering": {
        "codes": [
            "df.loc[:, (df%2 == 1).sum(axis = 0) > len(df)/2]",
            "df[df.sum(axis = 1) % 3 == 0]"
        ],
        "path": "2.2 DataFrame iteration/data filtering"
    }
}