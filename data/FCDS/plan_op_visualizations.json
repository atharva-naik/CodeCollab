{
    "23228": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    return {genre: joined_df['rating'].mul(joined_df[genre]).sum() / joined_df[genre].sum() for genre in genres}": {
                "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": {},
                "joined_df['rating'].mul(joined_df[genre])": {}
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "data joining": {},
                "elementwise multiplication": {}
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    return {genre: joined_df['rating'].mul(joined_df[genre]).sum() / joined_df[genre].sum() for genre in genres}": "function to compute grouped mean",
            "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": "data joining",
            "joined_df['rating'].mul(joined_df[genre])": "elementwise multiplication"
        }
    },
    "2053": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    rating_dic = {}\n    for genre in genres:\n        cur_genre = movies.loc[movies[genre] == 1]\n        id_ls = cur_genre.index.tolist()\n        cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n        rating_dic[genre] = cur_genre_rating['rating'].mean()\n    return rating_dic": {
                "rating_dic = {}": {},
                "for genre in genres:\n    cur_genre = movies.loc[movies[genre] == 1]\n    id_ls = cur_genre.index.tolist()\n    cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n    rating_dic[genre] = cur_genre_rating['rating'].mean()": {
                    "cur_genre = movies.loc[movies[genre] == 1]": {},
                    "cur_genre.index.tolist()": {},
                    "ratings['item_id'].isin(id_ls)": {},
                    "cur_genre_rating['rating'].mean()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "convert index to list": {},
                    "data filtering condition": {},
                    "aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    rating_dic = {}\n    for genre in genres:\n        cur_genre = movies.loc[movies[genre] == 1]\n        id_ls = cur_genre.index.tolist()\n        cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n        rating_dic[genre] = cur_genre_rating['rating'].mean()\n    return rating_dic": "function to compute grouped mean",
            "for genre in genres:\n    cur_genre = movies.loc[movies[genre] == 1]\n    id_ls = cur_genre.index.tolist()\n    cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n    rating_dic[genre] = cur_genre_rating['rating'].mean()": "compute grouped mean",
            "ratings['item_id'].isin(id_ls)": "data filtering condition",
            "cur_genre_rating['rating'].mean()": "aggregation",
            "rating_dic = {}": "create dictionary",
            "cur_genre.index.tolist()": "convert index to list",
            "cur_genre = movies.loc[movies[genre] == 1]": "data filtering"
        }
    },
    "460": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    result = {}\n    for genre in genres:\n        rslt_df = movies[movies[genre] == 1]\n        rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n        result[genre] = rate\n    return result": {
                "result = {}": {},
                "for genre in genres:\n    rslt_df = movies[movies[genre] == 1]\n    rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n    result[genre] = rate": {
                    "rslt_df = movies[movies[genre] == 1]": {},
                    "rslt_df.set_index('movie_id')": {},
                    "result[genre] = rate": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "set column as index": {},
                    "populate dictionary": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    result = {}\n    for genre in genres:\n        rslt_df = movies[movies[genre] == 1]\n        rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n        result[genre] = rate\n    return result": "function to compute grouped mean",
            "for genre in genres:\n    rslt_df = movies[movies[genre] == 1]\n    rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n    result[genre] = rate": "compute grouped mean",
            "rslt_df.set_index('movie_id')": "set column as index",
            "rslt_df = movies[movies[genre] == 1]": "data filtering",
            "result[genre] = rate": "populate dictionary",
            "result = {}": "create dictionary"
        }
    },
    "16512": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    mp = {}\n    for genre in genres:\n        genre_df = joined_df.loc[joined_df[genre] == 1]\n        mp[genre] = genre_df['rating'].mean()\n    return mp": {
                "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": {},
                "mp = {}": {},
                "for genre in genres:\n    genre_df = joined_df.loc[joined_df[genre] == 1]\n    mp[genre] = genre_df['rating'].mean()": {
                    "genre_df = joined_df.loc[joined_df[genre] == 1]": {},
                    "genre_df['rating'].mean()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "data joining": {},
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    mp = {}\n    for genre in genres:\n        genre_df = joined_df.loc[joined_df[genre] == 1]\n        mp[genre] = genre_df['rating'].mean()\n    return mp": "function to compute grouped mean",
            "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": "data joining",
            "for genre in genres:\n    genre_df = joined_df.loc[joined_df[genre] == 1]\n    mp[genre] = genre_df['rating'].mean()": "compute grouped mean",
            "genre_df['rating'].mean()": "aggregation",
            "mp = {}": "create dictionary",
            "genre_df = joined_df.loc[joined_df[genre] == 1]": "data filtering"
        }
    },
    "15954": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    Dict = {}\n    for key in genres:\n        movie_ids = movies[movies[key] == 1].index\n        Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()\n    return Dict\n    pass": {
                "Dict = {}": {},
                "for key in genres:\n    movie_ids = movies[movies[key] == 1].index\n    Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()": {
                    "movie_ids = movies[movies[key] == 1].index": {},
                    "ratings['item_id'].isin(movie_ids)": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "data filtering condition": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    Dict = {}\n    for key in genres:\n        movie_ids = movies[movies[key] == 1].index\n        Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()\n    return Dict\n    pass": "function to compute grouped mean",
            "for key in genres:\n    movie_ids = movies[movies[key] == 1].index\n    Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()": "compute grouped mean",
            "ratings['item_id'].isin(movie_ids)": "data filtering condition",
            "movie_ids = movies[movies[key] == 1].index": "data filtering",
            "Dict = {}": "create dictionary"
        }
    },
    "15557": {
        "chunk_tree": {
            "def find_rating_scores(group, ratings, genre):\n    avg_rating = 0\n    if group[genre].iloc[0] == 1:\n        avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])\n    return avg_rating": {
                "avg_rating = 0": {},
                "if group[genre].iloc[0] == 1:\n    avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])": {
                    "ratings.loc[group[genre].index].sum()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute mean of a group": {
                "create numeric variable": {},
                "compute mean of a group": {
                    "data filtering; aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def find_rating_scores(group, ratings, genre):\n    avg_rating = 0\n    if group[genre].iloc[0] == 1:\n        avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])\n    return avg_rating": "function to compute mean of a group",
            "if group[genre].iloc[0] == 1:\n    avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])": "compute mean of a group",
            "ratings.loc[group[genre].index].sum()": "data filtering; aggregation",
            "avg_rating = 0": "create numeric variable"
        }
    },
    "2566": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    new_ratings = ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')\n    new_ratings.head()\n    d = {}\n    for i in genres:\n        d[i] = new_ratings[new_ratings[i] == 1].rating.mean()\n    return d": {
                "ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')": {},
                "new_ratings.head()": {},
                "d = {}": {},
                "for i in genres:\n    d[i] = new_ratings[new_ratings[i] == 1].rating.mean()": {
                    "new_ratings[new_ratings[i] == 1].rating.mean()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "data joining": {},
                "get first n rows": {},
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering; aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    new_ratings = ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')\n    new_ratings.head()\n    d = {}\n    for i in genres:\n        d[i] = new_ratings[new_ratings[i] == 1].rating.mean()\n    return d": "function to compute grouped mean",
            "ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')": "data joining",
            "for i in genres:\n    d[i] = new_ratings[new_ratings[i] == 1].rating.mean()": "compute grouped mean",
            "new_ratings[new_ratings[i] == 1].rating.mean()": "data filtering; aggregation",
            "new_ratings.head()": "get first n rows",
            "d = {}": "create dictionary"
        }
    },
    "1882": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    d = {}\n    for i in genres:\n        m = movies[movies[i] == 1].index.values\n        d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()\n    return d": {
                "d = {}": {},
                "for i in genres:\n    m = movies[movies[i] == 1].index.values\n    d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()": {
                    "m = movies[movies[i] == 1].index.values": {},
                    "ratings['item_id'].isin(m)": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "data filtering condition": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    d = {}\n    for i in genres:\n        m = movies[movies[i] == 1].index.values\n        d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()\n    return d": "function to compute grouped mean",
            "for i in genres:\n    m = movies[movies[i] == 1].index.values\n    d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()": "compute grouped mean",
            "ratings['item_id'].isin(m)": "data filtering condition",
            "m = movies[movies[i] == 1].index.values": "data filtering",
            "d = {}": "create dictionary"
        }
    },
    "23914": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    movie_rating_by_genre_dict = dict()\n    for genre in genres:\n        movie_by_genre = movies[movies[genre] == 1]\n        avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n        movie_rating_by_genre_dict[genre] = avg\n    return movie_rating_by_genre_dict": {
                "movie_rating_by_genre_dict = dict()": {},
                "for genre in genres:\n    movie_by_genre = movies[movies[genre] == 1]\n    avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n    movie_rating_by_genre_dict[genre] = avg": {
                    "movie_by_genre = movies[movies[genre] == 1]": {},
                    "ratings['item_id'].isin(movie_by_genre.index)": {},
                    "movie_rating_by_genre_dict[genre] = avg": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "data filtering condition": {},
                    "populate dictionary": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    movie_rating_by_genre_dict = dict()\n    for genre in genres:\n        movie_by_genre = movies[movies[genre] == 1]\n        avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n        movie_rating_by_genre_dict[genre] = avg\n    return movie_rating_by_genre_dict": "function to compute grouped mean",
            "for genre in genres:\n    movie_by_genre = movies[movies[genre] == 1]\n    avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n    movie_rating_by_genre_dict[genre] = avg": "compute grouped mean",
            "ratings['item_id'].isin(movie_by_genre.index)": "data filtering condition",
            "movie_rating_by_genre_dict[genre] = avg": "populate dictionary",
            "movie_rating_by_genre_dict = dict()": "create dictionary",
            "movie_by_genre = movies[movies[genre] == 1]": "data filtering"
        }
    },
    "21491": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    ratings_group = ratings.groupby('item_id').agg(rating_cnt=('rating', 'count'), rating_sum=('rating', 'sum'))\n    genres_rating_sum = movies[genres].multiply(ratings_group['rating_sum'], axis='index')\n    genres_rating_cnt = movies[genres].multiply(ratings_group['rating_cnt'], axis='index')\n    ans = (genres_rating_sum.sum() / genres_rating_cnt.sum()).to_dict()\n    return ans": {
                "ratings.groupby('item_id')": {},
                "movies[genres].multiply(ratings_group['rating_sum'], axis='index')": {},
                "movies[genres].multiply(ratings_group['rating_cnt'], axis='index')": {},
                "genres_rating_cnt.sum()": {}
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "data grouping": {},
                "elementwise multiplication": {},
                "aggregation": {}
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    ratings_group = ratings.groupby('item_id').agg(rating_cnt=('rating', 'count'), rating_sum=('rating', 'sum'))\n    genres_rating_sum = movies[genres].multiply(ratings_group['rating_sum'], axis='index')\n    genres_rating_cnt = movies[genres].multiply(ratings_group['rating_cnt'], axis='index')\n    ans = (genres_rating_sum.sum() / genres_rating_cnt.sum()).to_dict()\n    return ans": "function to compute grouped mean",
            "ratings.groupby('item_id')": "data grouping",
            "movies[genres].multiply(ratings_group['rating_sum'], axis='index')": "elementwise multiplication",
            "movies[genres].multiply(ratings_group['rating_cnt'], axis='index')": "elementwise multiplication",
            "genres_rating_cnt.sum()": "aggregation"
        }
    },
    "1604": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    movie_count_by_genre = {genre: {} for genre in genres}\n    for (_, movie) in movies.iterrows():\n        try:\n            year = int(movie['release_date'][-4:])\n        except (ValueError, TypeError):\n            continue\n        for genre in genres:\n            if movie[genre]:\n                if year in movie_count_by_genre[genre]:\n                    movie_count_by_genre[genre][year] += 1\n                else:\n                    movie_count_by_genre[genre][year] = 1\n    return movie_count_by_genre": {
                "movie_count_by_genre = {genre: {} for genre in genres}": {},
                "for (_, movie) in movies.iterrows():\n    try:\n        year = int(movie['release_date'][-4:])\n    except (ValueError, TypeError):\n        continue\n    for genre in genres:\n        if movie[genre]:\n            if year in movie_count_by_genre[genre]:\n                movie_count_by_genre[genre][year] += 1\n            else:\n                movie_count_by_genre[genre][year] = 1": {
                    "movies.iterrows()": {},
                    "int(movie['release_date'][-4:])": {},
                    "for genre in genres:\n    if movie[genre]:\n        if year in movie_count_by_genre[genre]:\n            movie_count_by_genre[genre][year] += 1\n        else:\n            movie_count_by_genre[genre][year] = 1": {
                        "if movie[genre]:\n    if year in movie_count_by_genre[genre]:\n        movie_count_by_genre[genre][year] += 1\n    else:\n        movie_count_by_genre[genre][year] = 1": {
                            "if year in movie_count_by_genre[genre]:\n    movie_count_by_genre[genre][year] += 1\nelse:\n    movie_count_by_genre[genre][year] = 1": {
                                "movie_count_by_genre[genre][year] = 1": {}
                            }
                        }
                    }
                }
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "create nested dictionary histogram": {},
                "compute grouped histogram": {
                    "iterate over dataframe": {},
                    "convert string to integer": {},
                    "data filtering; aggregation": {
                        "data filtering; populate nested dictionary histogram ": {
                            "populate nested dictionary histogram": {
                                "populate nested dictionary histogram": {}
                            }
                        }
                    }
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    movie_count_by_genre = {genre: {} for genre in genres}\n    for (_, movie) in movies.iterrows():\n        try:\n            year = int(movie['release_date'][-4:])\n        except (ValueError, TypeError):\n            continue\n        for genre in genres:\n            if movie[genre]:\n                if year in movie_count_by_genre[genre]:\n                    movie_count_by_genre[genre][year] += 1\n                else:\n                    movie_count_by_genre[genre][year] = 1\n    return movie_count_by_genre": "function to compute grouped histogram",
            "for (_, movie) in movies.iterrows():\n    try:\n        year = int(movie['release_date'][-4:])\n    except (ValueError, TypeError):\n        continue\n    for genre in genres:\n        if movie[genre]:\n            if year in movie_count_by_genre[genre]:\n                movie_count_by_genre[genre][year] += 1\n            else:\n                movie_count_by_genre[genre][year] = 1": "compute grouped histogram",
            "int(movie['release_date'][-4:])": "convert string to integer",
            "movies.iterrows()": "iterate over dataframe",
            "for genre in genres:\n    if movie[genre]:\n        if year in movie_count_by_genre[genre]:\n            movie_count_by_genre[genre][year] += 1\n        else:\n            movie_count_by_genre[genre][year] = 1": "data filtering; aggregation",
            "if movie[genre]:\n    if year in movie_count_by_genre[genre]:\n        movie_count_by_genre[genre][year] += 1\n    else:\n        movie_count_by_genre[genre][year] = 1": "data filtering; populate nested dictionary histogram ",
            "if year in movie_count_by_genre[genre]:\n    movie_count_by_genre[genre][year] += 1\nelse:\n    movie_count_by_genre[genre][year] = 1": "populate nested dictionary histogram",
            "movie_count_by_genre[genre][year] = 1": "populate nested dictionary histogram",
            "movie_count_by_genre = {genre: {} for genre in genres}": "create nested dictionary histogram"
        }
    },
    "22329": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    df = movies.copy()\n    df = df[df['release_date'].notna()]\n    df['release_year'] = df['release_date'].str[-4:].astype(int)\n    df = df.reset_index().drop_duplicates(['movie_id', 'release_year'])\n    df = df[['release_year'] + genres].melt(id_vars=['release_year'], value_vars=genres, var_name='genre', value_name='value')\n    df = df[df['value'] == 1]\n    df = df.groupby(['genre', 'release_year']).agg(count=('value', 'count'))\n    result = {}\n    for genre in genres:\n        result[genre] = df.loc[genre, :].to_dict()['count']\n    return result": {
                "movies.copy()": {},
                "df['release_date'].notna()": {},
                "df['release_date'].str[-4:].astype(int)": {},
                "df.reset_index()": {},
                "df[['release_year'] + genres].melt(id_vars=['release_year'], value_vars=genres, var_name='genre', value_name='value')": {},
                "df = df[df['value'] == 1]": {},
                "df.groupby(['genre', 'release_year'])": {},
                "result = {}": {},
                "for genre in genres:\n    result[genre] = df.loc[genre, :].to_dict()['count']": {
                    "df.loc[genre, :].to_dict()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "copy dataframe": {},
                "data filtering condition": {},
                "column conversion": {},
                "reset index": {},
                "data melting": {},
                "data filtering": {},
                "data grouping": {},
                "create dictionary": {},
                "populate dictionary": {
                    "column selection; convert series to dictionary": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    df = movies.copy()\n    df = df[df['release_date'].notna()]\n    df['release_year'] = df['release_date'].str[-4:].astype(int)\n    df = df.reset_index().drop_duplicates(['movie_id', 'release_year'])\n    df = df[['release_year'] + genres].melt(id_vars=['release_year'], value_vars=genres, var_name='genre', value_name='value')\n    df = df[df['value'] == 1]\n    df = df.groupby(['genre', 'release_year']).agg(count=('value', 'count'))\n    result = {}\n    for genre in genres:\n        result[genre] = df.loc[genre, :].to_dict()['count']\n    return result": "function to compute grouped histogram",
            "for genre in genres:\n    result[genre] = df.loc[genre, :].to_dict()['count']": "populate dictionary",
            "df.loc[genre, :].to_dict()": "column selection; convert series to dictionary",
            "result = {}": "create dictionary",
            "movies.copy()": "copy dataframe",
            "df[['release_year'] + genres].melt(id_vars=['release_year'], value_vars=genres, var_name='genre', value_name='value')": "data melting",
            "df['release_date'].str[-4:].astype(int)": "column conversion",
            "df['release_date'].notna()": "data filtering condition",
            "df.reset_index()": "reset index",
            "df.groupby(['genre', 'release_year'])": "data grouping",
            "df = df[df['value'] == 1]": "data filtering"
        }
    },
    "587": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    movies['release_year'] = movies['release_date'].str[-4:]\n    res = {}\n    for genre in genres:\n        res[genre] = {}\n        movie_genres = movies.loc[movies[genre] == 1]\n        ans = movie_genres['release_year'].value_counts(dropna=True)\n        for (year, count) in ans.iteritems():\n            year = int(year)\n            res[genre][year] = count\n    return res": {
                "movies['release_year'] = movies['release_date'].str[-4:]": {},
                "res = {}": {},
                "for genre in genres:\n    res[genre] = {}\n    movie_genres = movies.loc[movies[genre] == 1]\n    ans = movie_genres['release_year'].value_counts(dropna=True)\n    for (year, count) in ans.iteritems():\n        year = int(year)\n        res[genre][year] = count": {
                    "res[genre] = {}": {},
                    "movie_genres = movies.loc[movies[genre] == 1]": {},
                    "movie_genres['release_year'].value_counts(dropna=True)": {},
                    "for (year, count) in ans.iteritems():\n    year = int(year)\n    res[genre][year] = count": {
                        "ans.iteritems()": {},
                        "int(year)": {},
                        "res[genre][year] = count": {}
                    }
                }
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "column conversion": {},
                "create dictionary": {},
                "compute grouped histogram": {
                    "create dictionary": {},
                    "data filtering": {},
                    "data grouping, aggregation; drop missing values": {},
                    "populate nested dictionary histogram": {
                        "iterate over dataframe": {},
                        "convert string to integer": {},
                        "populate nested dictionary histogram": {}
                    }
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    movies['release_year'] = movies['release_date'].str[-4:]\n    res = {}\n    for genre in genres:\n        res[genre] = {}\n        movie_genres = movies.loc[movies[genre] == 1]\n        ans = movie_genres['release_year'].value_counts(dropna=True)\n        for (year, count) in ans.iteritems():\n            year = int(year)\n            res[genre][year] = count\n    return res": "function to compute grouped histogram",
            "for genre in genres:\n    res[genre] = {}\n    movie_genres = movies.loc[movies[genre] == 1]\n    ans = movie_genres['release_year'].value_counts(dropna=True)\n    for (year, count) in ans.iteritems():\n        year = int(year)\n        res[genre][year] = count": "compute grouped histogram",
            "for (year, count) in ans.iteritems():\n    year = int(year)\n    res[genre][year] = count": "populate nested dictionary histogram",
            "int(year)": "convert string to integer",
            "res[genre][year] = count": "populate nested dictionary histogram",
            "res[genre] = {}": "create dictionary",
            "res = {}": "create dictionary",
            "movies['release_year'] = movies['release_date'].str[-4:]": "column conversion",
            "movie_genres['release_year'].value_counts(dropna=True)": "data grouping, aggregation; drop missing values",
            "movie_genres = movies.loc[movies[genre] == 1]": "data filtering",
            "ans.iteritems()": "iterate over dataframe"
        }
    },
    "551": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    movie_count_by_genre = {genre: {} for genre in genres}\n    for (_, movie) in movies.iterrows():\n        try:\n            year = int(movie['release_date'][-4:])\n        except (ValueError, TypeError):\n            continue\n        for genre in genres:\n            if movie[genre]:\n                if year in movie_count_by_genre[genre]:\n                    movie_count_by_genre[genre][year] += 1\n                else:\n                    movie_count_by_genre[genre][year] = 1\n    return movie_count_by_genre": {
                "movie_count_by_genre = {genre: {} for genre in genres}": {},
                "for (_, movie) in movies.iterrows():\n    try:\n        year = int(movie['release_date'][-4:])\n    except (ValueError, TypeError):\n        continue\n    for genre in genres:\n        if movie[genre]:\n            if year in movie_count_by_genre[genre]:\n                movie_count_by_genre[genre][year] += 1\n            else:\n                movie_count_by_genre[genre][year] = 1": {
                    "movies.iterrows()": {},
                    "int(movie['release_date'][-4:])": {},
                    "for genre in genres:\n    if movie[genre]:\n        if year in movie_count_by_genre[genre]:\n            movie_count_by_genre[genre][year] += 1\n        else:\n            movie_count_by_genre[genre][year] = 1": {
                        "if movie[genre]:\n    if year in movie_count_by_genre[genre]:\n        movie_count_by_genre[genre][year] += 1\n    else:\n        movie_count_by_genre[genre][year] = 1": {
                            "if year in movie_count_by_genre[genre]:\n    movie_count_by_genre[genre][year] += 1\nelse:\n    movie_count_by_genre[genre][year] = 1": {
                                "movie_count_by_genre[genre][year] = 1": {}
                            }
                        }
                    }
                }
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "create nested dictionary histogram": {},
                "compute grouped histogram": {
                    "iterate over dataframe": {},
                    "convert string to integer": {},
                    "data filtering; aggregation": {
                        "data filtering; populate nested dictionary histogram ": {
                            "data filtering; populate nested dictionary histogram ": {
                                "populate nested dictionary histogram": {}
                            }
                        }
                    }
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    movie_count_by_genre = {genre: {} for genre in genres}\n    for (_, movie) in movies.iterrows():\n        try:\n            year = int(movie['release_date'][-4:])\n        except (ValueError, TypeError):\n            continue\n        for genre in genres:\n            if movie[genre]:\n                if year in movie_count_by_genre[genre]:\n                    movie_count_by_genre[genre][year] += 1\n                else:\n                    movie_count_by_genre[genre][year] = 1\n    return movie_count_by_genre": "function to compute grouped histogram",
            "for (_, movie) in movies.iterrows():\n    try:\n        year = int(movie['release_date'][-4:])\n    except (ValueError, TypeError):\n        continue\n    for genre in genres:\n        if movie[genre]:\n            if year in movie_count_by_genre[genre]:\n                movie_count_by_genre[genre][year] += 1\n            else:\n                movie_count_by_genre[genre][year] = 1": "compute grouped histogram",
            "int(movie['release_date'][-4:])": "convert string to integer",
            "movies.iterrows()": "iterate over dataframe",
            "for genre in genres:\n    if movie[genre]:\n        if year in movie_count_by_genre[genre]:\n            movie_count_by_genre[genre][year] += 1\n        else:\n            movie_count_by_genre[genre][year] = 1": "data filtering; aggregation",
            "if movie[genre]:\n    if year in movie_count_by_genre[genre]:\n        movie_count_by_genre[genre][year] += 1\n    else:\n        movie_count_by_genre[genre][year] = 1": "data filtering; populate nested dictionary histogram ",
            "if year in movie_count_by_genre[genre]:\n    movie_count_by_genre[genre][year] += 1\nelse:\n    movie_count_by_genre[genre][year] = 1": "data filtering; populate nested dictionary histogram ",
            "movie_count_by_genre[genre][year] = 1": "populate nested dictionary histogram",
            "movie_count_by_genre = {genre: {} for genre in genres}": "create nested dictionary histogram"
        }
    },
    "1721": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    out = {}\n    new_movies = movies\n    new_movies['Year'] = new_movies['release_date'].str[-4:].dropna().astype(int)\n    for g in genres:\n        k = new_movies.loc[new_movies[g] == 1]\n        out[g] = k.groupby('Year').count()[g].to_dict()\n    return out\n    pass": {
                "out = {}": {},
                "new_movies = movies": {},
                "new_movies['release_date'].str[-4:].dropna()": {},
                "for g in genres:\n    k = new_movies.loc[new_movies[g] == 1]\n    out[g] = k.groupby('Year').count()[g].to_dict()": {
                    "k = new_movies.loc[new_movies[g] == 1]": {},
                    "k.groupby('Year')": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "create dictionary": {},
                "copy dataframe": {},
                "column conversion; drop missing values": {},
                "compute grouped histogram": {
                    "data filtering": {},
                    "data grouping": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    out = {}\n    new_movies = movies\n    new_movies['Year'] = new_movies['release_date'].str[-4:].dropna().astype(int)\n    for g in genres:\n        k = new_movies.loc[new_movies[g] == 1]\n        out[g] = k.groupby('Year').count()[g].to_dict()\n    return out\n    pass": "function to compute grouped histogram",
            "for g in genres:\n    k = new_movies.loc[new_movies[g] == 1]\n    out[g] = k.groupby('Year').count()[g].to_dict()": "compute grouped histogram",
            "k.groupby('Year')": "data grouping",
            "out = {}": "create dictionary",
            "new_movies['release_date'].str[-4:].dropna()": "column conversion; drop missing values",
            "new_movies = movies": "copy dataframe",
            "k = new_movies.loc[new_movies[g] == 1]": "data filtering"
        }
    },
    "15468": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    movie_count_by_genre_year = {}\n    movies = movies[movies['release_date'].notna()]\n    for genre in genres:\n        grouped_date_genre = movies.groupby('release_date')[genre].sum()\n        movie_count_by_genre_year[genre] = defaultdict(int)\n        for (full_year, movie_count) in grouped_date_genre.items():\n            movie_count_by_genre_year[genre][int(full_year[-4:])] += movie_count\n    return movie_count_by_genre_year": {
                "movie_count_by_genre_year = {}": {},
                "movies['release_date'].notna()": {},
                "for genre in genres:\n    grouped_date_genre = movies.groupby('release_date')[genre].sum()\n    movie_count_by_genre_year[genre] = defaultdict(int)\n    for (full_year, movie_count) in grouped_date_genre.items():\n        movie_count_by_genre_year[genre][int(full_year[-4:])] += movie_count": {
                    "movies.groupby('release_date')": {},
                    "defaultdict(int)": {},
                    "for (full_year, movie_count) in grouped_date_genre.items():\n    movie_count_by_genre_year[genre][int(full_year[-4:])] += movie_count": {
                        "grouped_date_genre.items()": {},
                        "int(full_year[-4:])": {}
                    }
                }
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "create dictionary": {},
                "data filtering condition": {},
                "compute grouped histogram": {
                    "data grouping": {},
                    "create dictionary": {},
                    "populate nested dictionary histogram": {
                        "iterate over dataframe groupby": {},
                        "convert string to integer": {}
                    }
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    movie_count_by_genre_year = {}\n    movies = movies[movies['release_date'].notna()]\n    for genre in genres:\n        grouped_date_genre = movies.groupby('release_date')[genre].sum()\n        movie_count_by_genre_year[genre] = defaultdict(int)\n        for (full_year, movie_count) in grouped_date_genre.items():\n            movie_count_by_genre_year[genre][int(full_year[-4:])] += movie_count\n    return movie_count_by_genre_year": "function to compute grouped histogram",
            "movies['release_date'].notna()": "data filtering condition",
            "for genre in genres:\n    grouped_date_genre = movies.groupby('release_date')[genre].sum()\n    movie_count_by_genre_year[genre] = defaultdict(int)\n    for (full_year, movie_count) in grouped_date_genre.items():\n        movie_count_by_genre_year[genre][int(full_year[-4:])] += movie_count": "compute grouped histogram",
            "movies.groupby('release_date')": "data grouping",
            "defaultdict(int)": "create dictionary",
            "movie_count_by_genre_year = {}": "create dictionary",
            "for (full_year, movie_count) in grouped_date_genre.items():\n    movie_count_by_genre_year[genre][int(full_year[-4:])] += movie_count": "populate nested dictionary histogram",
            "int(full_year[-4:])": "convert string to integer",
            "grouped_date_genre.items()": "iterate over dataframe groupby"
        }
    },
    "15729": {
        "chunk_tree": {
            "movies.head(3)": {}
        },
        "plan_tree": {
            "get first n rows": {}
        },
        "chunk_to_plan_op": {
            "movies.head(3)": "get first n rows"
        }
    },
    "20753": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    movies_long = movies.melt(id_vars=['release_date'], value_vars=genres, var_name='genre', value_name='is_genre')\n    movies_long = movies_long[movies_long.is_genre == 1]\n    movies_long['year'] = movies_long['release_date'].apply(lambda x: int(x[-4:]))\n    return {k: f.groupby('year').agg(cnt=('is_genre', 'count')).to_dict()['cnt'] for (k, f) in movies_long.groupby('genre')}": {
                "movies.melt(id_vars=['release_date'], value_vars=genres, var_name='genre', value_name='is_genre')": {},
                "movies_long = movies_long[movies_long.is_genre == 1]": {},
                "int(x[-4:])": {},
                "f.groupby('year')": {}
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "data melting": {},
                "data filtering": {},
                "convert string to integer": {},
                "data grouping": {}
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    movies_long = movies.melt(id_vars=['release_date'], value_vars=genres, var_name='genre', value_name='is_genre')\n    movies_long = movies_long[movies_long.is_genre == 1]\n    movies_long['year'] = movies_long['release_date'].apply(lambda x: int(x[-4:]))\n    return {k: f.groupby('year').agg(cnt=('is_genre', 'count')).to_dict()['cnt'] for (k, f) in movies_long.groupby('genre')}": "function to compute grouped histogram",
            "int(x[-4:])": "convert string to integer",
            "f.groupby('year')": "data grouping",
            "movies_long = movies_long[movies_long.is_genre == 1]": "data filtering",
            "movies.melt(id_vars=['release_date'], value_vars=genres, var_name='genre', value_name='is_genre')": "data melting"
        }
    },
    "22536": {
        "chunk_tree": {
            "def movie_count_by_genre(movies, genres):\n    movies = movies.dropna(subset=['release_date'])\n    movies['release_date'] = movies['release_date'].astype(str)\n    df_new = movies['release_date'].str.slice(-4)\n    movies['year'] = df_new\n    movies['year'] = movies['year'].astype(int)\n    result = {}\n    for genre in genres:\n        genre_df = movies.loc[movies[genre] == 1]\n        count_df = genre_df.groupby('year').count()\n        filt = count_df['movie_title'] > 0\n        count_df = count_df[filt]\n        year_mp = count_df['movie_title'].to_dict()\n        result[genre] = year_mp\n    return result": {
                "movies.dropna(subset=['release_date'])": {},
                "movies['release_date'].astype(str)": {},
                "movies['release_date'].str.slice(-4)": {},
                "movies['year'] = df_new": {},
                "movies['year'].astype(int)": {},
                "result = {}": {},
                "for genre in genres:\n    genre_df = movies.loc[movies[genre] == 1]\n    count_df = genre_df.groupby('year').count()\n    filt = count_df['movie_title'] > 0\n    count_df = count_df[filt]\n    year_mp = count_df['movie_title'].to_dict()\n    result[genre] = year_mp": {
                    "genre_df = movies.loc[movies[genre] == 1]": {},
                    "genre_df.groupby('year')": {},
                    "filt = count_df['movie_title'] > 0": {},
                    "count_df = count_df[filt]": {},
                    "count_df['movie_title'].to_dict()": {},
                    "result[genre] = year_mp": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped histogram": {
                "drop missing values": {},
                "column conversion": {},
                "create dictionary": {},
                "compute grouped histogram": {
                    "data filtering": {},
                    "data grouping": {},
                    "data filtering condition": {},
                    "convert series to dictionary": {},
                    "populate dictionary": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_count_by_genre(movies, genres):\n    movies = movies.dropna(subset=['release_date'])\n    movies['release_date'] = movies['release_date'].astype(str)\n    df_new = movies['release_date'].str.slice(-4)\n    movies['year'] = df_new\n    movies['year'] = movies['year'].astype(int)\n    result = {}\n    for genre in genres:\n        genre_df = movies.loc[movies[genre] == 1]\n        count_df = genre_df.groupby('year').count()\n        filt = count_df['movie_title'] > 0\n        count_df = count_df[filt]\n        year_mp = count_df['movie_title'].to_dict()\n        result[genre] = year_mp\n    return result": "function to compute grouped histogram",
            "for genre in genres:\n    genre_df = movies.loc[movies[genre] == 1]\n    count_df = genre_df.groupby('year').count()\n    filt = count_df['movie_title'] > 0\n    count_df = count_df[filt]\n    year_mp = count_df['movie_title'].to_dict()\n    result[genre] = year_mp": "compute grouped histogram",
            "count_df['movie_title'].to_dict()": "convert series to dictionary",
            "result[genre] = year_mp": "populate dictionary",
            "result = {}": "create dictionary",
            "movies['year'].astype(int)": "column conversion",
            "movies['year'] = df_new": "column conversion",
            "movies['release_date'].str.slice(-4)": "column conversion",
            "movies['release_date'].astype(str)": "column conversion",
            "movies.dropna(subset=['release_date'])": "drop missing values",
            "genre_df.groupby('year')": "data grouping",
            "genre_df = movies.loc[movies[genre] == 1]": "data filtering",
            "filt = count_df['movie_title'] > 0": "data filtering condition",
            "count_df = count_df[filt]": "data filtering"
        }
    }
}