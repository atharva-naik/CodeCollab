[
    "torch->PyTorch Recipes->Loading data in PyTorch",
    "torch->PyTorch Recipes->Loading data in PyTorch->Introduction",
    "torch->PyTorch Recipes->Loading data in PyTorch->Setup",
    "torch->PyTorch Recipes->Loading data in PyTorch->Steps",
    "torch->PyTorch Recipes->Loading data in PyTorch->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Loading data in PyTorch->2. Access the data in the dataset",
    "torch->PyTorch Recipes->Loading data in PyTorch->3. Loading the data",
    "torch->PyTorch Recipes->Loading data in PyTorch->4. Iterate over the data",
    "torch->PyTorch Recipes->Loading data in PyTorch->5. [Optional] Visualize the data",
    "torch->PyTorch Recipes->Loading data in PyTorch->Learn More",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Introduction",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Setup",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Steps",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Steps->2. Define and intialize the neural network",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Steps->3. Specify how data will pass through your model",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Steps->4. [Optional] Pass data through your model to test",
    "torch->PyTorch Recipes->Defining a Neural Network in PyTorch->Learn More",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Introduction",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Setup",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Steps",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Steps->2. Define and intialize the neural network",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Steps->3. Initialize the optimizer",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Steps->4. Access the model and optimizer state_dict",
    "torch->PyTorch Recipes->What is a state_dict in PyTorch->Learn More",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Setup",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 1: The Dataset",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 1: The Dataset->1.1 Write a simple helper function to show an image",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 1: The Dataset->1.2 Create a dataset class",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 1: The Dataset->1.3 Iterate through data samples",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 2: Data Tranformations",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 2: Data Tranformations->2.1 Create callable classes",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 2: Data Tranformations->2.2 Compose transforms and apply to a sample",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 2: Data Tranformations->2.3 Iterate through the dataset",
    "torch->PyTorch Recipes->Developing Custom PyTorch Dataloaders->Part 3: The Dataloader",
    "torch->PyTorch Recipes->Model Interpretability using Captum",
    "torch->PyTorch Recipes->Model Interpretability using Captum->Before you begin",
    "torch->PyTorch Recipes->Model Interpretability using Captum->Computing Attribution",
    "torch->PyTorch Recipes->Model Interpretability using Captum->Visualizing the Results",
    "torch->PyTorch Recipes->Model Interpretability using Captum->Final Notes",
    "torch->PyTorch Recipes->Dynamic Quantization",
    "torch->PyTorch Recipes->Dynamic Quantization->Introduction",
    "torch->PyTorch Recipes->Dynamic Quantization->What is dynamic quantization?",
    "torch->PyTorch Recipes->Dynamic Quantization->Steps",
    "torch->PyTorch Recipes->Dynamic Quantization->Steps->1: Set Up",
    "torch->PyTorch Recipes->Dynamic Quantization->Steps->2: Do the Quantization",
    "torch->PyTorch Recipes->Dynamic Quantization->Steps->3. Look at Model Size",
    "torch->PyTorch Recipes->Dynamic Quantization->Steps->4. Look at Latency",
    "torch->PyTorch Recipes->Dynamic Quantization->Steps->5: Look at Accuracy",
    "torch->PyTorch Recipes->Dynamic Quantization->Learn More",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Introduction",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Setup",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Steps",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Steps->2. Define and intialize the neural network",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Steps->3. Save on GPU, Load on CPU",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Steps->4. Save on GPU, Load on GPU",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Steps->5. Save on CPU, Load on GPU",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Steps->6. Saving torch.nn.DataParallel Models",
    "torch->PyTorch Recipes->Saving and loading models across devices in PyTorch->Learn More",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Introduction",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Setup",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Steps",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Steps->2. Define and initialize the neural network",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Steps->3. Initialize the optimizer",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Steps->4. Save the general checkpoint",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Steps->5. Load the general checkpoint",
    "torch->PyTorch Recipes->Saving and loading a general checkpoint in PyTorch->Learn More",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Introduction",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Setup",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Steps",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Steps->2. Define and intialize the neural network",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Steps->3. Initialize the optimizer",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Steps->4. Save and load the model via state_dict",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Steps->5. Save and load entire model",
    "torch->PyTorch Recipes->Saving and loading models for inference in PyTorch->Learn More",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Introduction",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Setup",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Steps",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Steps->2. Define and initialize the neural network",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Steps->3. Initialize the optimizer",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Steps->4. Save multiple models",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Steps->4. Load multiple models",
    "torch->PyTorch Recipes->Saving and loading multiple models in one file using PyTorch->Learn More",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Introduction",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Setup",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Steps",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Steps->2. Define and intialize the neural network A and B",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Steps->3. Save model A",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Steps->4. Load into model B",
    "torch->PyTorch Recipes->Warmstarting model using parameters from a different model in PyTorch->Learn More",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Introduction",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Setup",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Steps",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Steps->1. Import necessary libraries for loading our data",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Steps->2. Load and normalize the dataset",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Steps->3. Build the neural network",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Steps->4. Define a Loss function and optimizer",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Steps->5. Zero the gradients while training the network",
    "torch->PyTorch Recipes->Zeroing out gradients in PyTorch->Learn More",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Introduction",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Model preparation",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Model preparation->Setup",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Model preparation->1. Fuse operators using torch.quantization.fuse_modules",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Model preparation->2. Quantize your model",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Model preparation->3. Use torch.utils.mobile_optimizer",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Model preparation->4. Prefer Using Channels Last Tensor memory format",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Model preparation->5. Android - Reusing tensors for forward",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Benchmarking",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Benchmarking->Android - Benchmarking Setup",
    "torch->PyTorch Recipes->Pytorch Mobile Performance Recipes->Benchmarking->iOS - Benchmarking Setup",
    "torch->PyTorch Recipes->Automatic Mixed Precision",
    "torch->PyTorch Recipes->Automatic Mixed Precision->A simple network",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Default Precision",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Adding autocast",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Adding GradScaler",
    "torch->PyTorch Recipes->Automatic Mixed Precision->All together: \u201cAutomatic Mixed Precision\u201d",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Inspecting/modifying gradients (e.g., clipping)",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Saving/Resuming",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Inference/Evaluation",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Advanced topics",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Troubleshooting->Speedup with Amp is minor",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Troubleshooting->Loss is inf/NaN",
    "torch->PyTorch Recipes->Automatic Mixed Precision->Troubleshooting->Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)",
    "torch->PyTorch Recipes->Changing default device",
    "torch->PyTorch Recipes->How to use TensorBoard with PyTorch",
    "torch->PyTorch Recipes->How to use TensorBoard with PyTorch->Installation",
    "torch->PyTorch Recipes->How to use TensorBoard with PyTorch->Using TensorBoard in PyTorch",
    "torch->PyTorch Recipes->How to use TensorBoard with PyTorch->Log scalars",
    "torch->PyTorch Recipes->How to use TensorBoard with PyTorch->Run TensorBoard",
    "torch->PyTorch Recipes->How to use TensorBoard with PyTorch->Share TensorBoard dashboards",
    "torch->PyTorch Recipes->How to use TensorBoard with PyTorch->Learn More",
    "torch->PyTorch Recipes->Performance Tuning Guide",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Enable async data loading and augmentation",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Disable gradient calculation for validation or inference",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Disable bias for convolutions directly followed by a batch norm",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Fuse pointwise operations",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Enable channels_last memory format for computer vision models",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Checkpoint intermediate buffers",
    "torch->PyTorch Recipes->Performance Tuning Guide->General optimizations->Disable debugging APIs",
    "torch->PyTorch Recipes->Performance Tuning Guide->CPU specific optimizations->Utilize Non-Uniform Memory Access (NUMA) Controls",
    "torch->PyTorch Recipes->Performance Tuning Guide->CPU specific optimizations->Utilize OpenMP",
    "torch->PyTorch Recipes->Performance Tuning Guide->CPU specific optimizations->Intel OpenMP Runtime Library (libiomp)",
    "torch->PyTorch Recipes->Performance Tuning Guide->CPU specific optimizations->Switch Memory allocator",
    "torch->PyTorch Recipes->Performance Tuning Guide->CPU specific optimizations->Use oneDNN Graph with TorchScript for inference",
    "torch->PyTorch Recipes->Performance Tuning Guide->CPU specific optimizations->Train a model on CPU with PyTorch DistributedDataParallel(DDP) functionality",
    "torch->PyTorch Recipes->Performance Tuning Guide->GPU specific optimizations->Enable cuDNN auto-tuner",
    "torch->PyTorch Recipes->Performance Tuning Guide->GPU specific optimizations->Avoid unnecessary CPU-GPU synchronization",
    "torch->PyTorch Recipes->Performance Tuning Guide->GPU specific optimizations->Create tensors directly on the target device",
    "torch->PyTorch Recipes->Performance Tuning Guide->GPU specific optimizations->Use mixed precision and AMP",
    "torch->PyTorch Recipes->Performance Tuning Guide->GPU specific optimizations->Pre-allocate memory in case of variable input length",
    "torch->PyTorch Recipes->Performance Tuning Guide->Distributed optimizations->Use efficient data-parallel backend",
    "torch->PyTorch Recipes->Performance Tuning Guide->Distributed optimizations->Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation",
    "torch->PyTorch Recipes->Performance Tuning Guide->Distributed optimizations->Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)",
    "torch->PyTorch Recipes->Performance Tuning Guide->Distributed optimizations->Load-balance workload in a distributed setting",
    "torch->PyTorch Recipes->Timer quick start",
    "torch->PyTorch Recipes->Timer quick start->1. Defining a Timer",
    "torch->PyTorch Recipes->Timer quick start->2. Wall time: Timer.blocked_autorange(\u2026)",
    "torch->PyTorch Recipes->Timer quick start->3. C++ snippets",
    "torch->PyTorch Recipes->Timer quick start->4. Instruction counts: Timer.collect_callgrind(\u2026)",
    "torch->PyTorch Recipes->Timer quick start->5. Instruction counts: Delving deeper",
    "torch->PyTorch Recipes->Timer quick start->6. A/B testing with Callgrind",
    "torch->PyTorch Recipes->Timer quick start->7. Wrapping up",
    "torch->PyTorch Recipes->Timer quick start->8. Footnotes",
    "torch->PyTorch Recipes->PyTorch Profiler",
    "torch->PyTorch Recipes->PyTorch Profiler->Introduction",
    "torch->PyTorch Recipes->PyTorch Profiler->Setup",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->1. Import all necessary libraries",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->2. Instantiate a simple Resnet model",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->3. Using profiler to analyze execution time",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->4. Using profiler to analyze memory consumption",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->5. Using tracing functionality",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->6. Examining stack traces",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->7. Visualizing data as a flamegraph",
    "torch->PyTorch Recipes->PyTorch Profiler->Steps->8. Using profiler to analyze long-running jobs",
    "torch->PyTorch Recipes->PyTorch Profiler->Learn More",
    "torch->PyTorch Recipes->PyTorch Benchmark",
    "torch->PyTorch Recipes->PyTorch Benchmark->Introduction",
    "torch->PyTorch Recipes->PyTorch Benchmark->Setup",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->1. Defining functions to benchmark",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->2. Benchmarking with timeit.Timer",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->3. Benchmarking with torch.utils.benchmark.Timer",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->4. Benchmarking with Blocked Autorange",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->5. Comparing benchmark results",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->6. Saving/Loading benchmark results",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->7. Generating inputs with Fuzzed Parameters",
    "torch->PyTorch Recipes->PyTorch Benchmark->Steps->8. Collecting instruction counts with Callgrind",
    "torch->PyTorch Recipes->PyTorch Benchmark->Learn More",
    "torch->Introduction to PyTorch->Learn the Basics",
    "torch->Introduction to PyTorch->Learn the Basics->Running the Tutorial Code",
    "torch->Introduction to PyTorch->Learn the Basics->How to Use this Guide",
    "torch->Introduction to PyTorch->Quickstart",
    "torch->Introduction to PyTorch->Quickstart->Working with data",
    "torch->Introduction to PyTorch->Quickstart->Creating Models",
    "torch->Introduction to PyTorch->Quickstart->Optimizing the Model Parameters",
    "torch->Introduction to PyTorch->Quickstart->Saving Models",
    "torch->Introduction to PyTorch->Quickstart->Loading Models",
    "torch->Introduction to PyTorch->Tensors",
    "torch->Introduction to PyTorch->Tensors->Initializing a Tensor",
    "torch->Introduction to PyTorch->Tensors->Attributes of a Tensor",
    "torch->Introduction to PyTorch->Tensors->Operations on Tensors",
    "torch->Introduction to PyTorch->Tensors->Bridge with NumPy",
    "torch->Introduction to PyTorch->Tensors->Bridge with NumPy->Tensor to NumPy array",
    "torch->Introduction to PyTorch->Tensors->Bridge with NumPy->NumPy array to Tensor",
    "torch->Introduction to PyTorch->Datasets & DataLoaders",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Loading a Dataset",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Iterating and Visualizing the Dataset",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Creating a Custom Dataset for your files",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Creating a Custom Dataset for your files->__init__",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Creating a Custom Dataset for your files->__len__",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Creating a Custom Dataset for your files->__getitem__",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Preparing your data for training with DataLoaders",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Iterate through the DataLoader",
    "torch->Introduction to PyTorch->Datasets & DataLoaders->Further Reading",
    "torch->Introduction to PyTorch->Transforms",
    "torch->Introduction to PyTorch->Transforms->ToTensor()",
    "torch->Introduction to PyTorch->Transforms->Lambda Transforms",
    "torch->Introduction to PyTorch->Transforms->Lambda Transforms->Further Reading",
    "torch->Introduction to PyTorch->Build the Neural Network",
    "torch->Introduction to PyTorch->Build the Neural Network->Get Device for Training",
    "torch->Introduction to PyTorch->Build the Neural Network->Define the Class",
    "torch->Introduction to PyTorch->Build the Neural Network->Model Layers",
    "torch->Introduction to PyTorch->Build the Neural Network->Model Layers->nn.Flatten",
    "torch->Introduction to PyTorch->Build the Neural Network->Model Layers->nn.Linear",
    "torch->Introduction to PyTorch->Build the Neural Network->Model Layers->nn.ReLU",
    "torch->Introduction to PyTorch->Build the Neural Network->Model Layers->nn.Sequential",
    "torch->Introduction to PyTorch->Build the Neural Network->Model Layers->nn.Softmax",
    "torch->Introduction to PyTorch->Build the Neural Network->Model Parameters",
    "torch->Introduction to PyTorch->Build the Neural Network->Further Reading",
    "torch->Introduction to PyTorch->Automatic Differentiation with torch.autograd",
    "torch->Introduction to PyTorch->Automatic Differentiation with torch.autograd->Tensors, Functions and Computational graph",
    "torch->Introduction to PyTorch->Automatic Differentiation with torch.autograd->Computing Gradients",
    "torch->Introduction to PyTorch->Automatic Differentiation with torch.autograd->Disabling Gradient Tracking",
    "torch->Introduction to PyTorch->Automatic Differentiation with torch.autograd->More on Computational Graphs",
    "torch->Introduction to PyTorch->Automatic Differentiation with torch.autograd->Optional Reading: Tensor Gradients and Jacobian Products",
    "torch->Introduction to PyTorch->Automatic Differentiation with torch.autograd->Optional Reading: Tensor Gradients and Jacobian Products->Further Reading",
    "torch->Introduction to PyTorch->Optimizing Model Parameters",
    "torch->Introduction to PyTorch->Optimizing Model Parameters->Prerequisite Code",
    "torch->Introduction to PyTorch->Optimizing Model Parameters->Hyperparameters",
    "torch->Introduction to PyTorch->Optimizing Model Parameters->Optimization Loop",
    "torch->Introduction to PyTorch->Optimizing Model Parameters->Optimization Loop->Loss Function",
    "torch->Introduction to PyTorch->Optimizing Model Parameters->Optimization Loop->Optimizer",
    "torch->Introduction to PyTorch->Optimizing Model Parameters->Full Implementation",
    "torch->Introduction to PyTorch->Optimizing Model Parameters->Further Reading",
    "torch->Introduction to PyTorch->Save and Load the Model",
    "torch->Introduction to PyTorch->Save and Load the Model->Saving and Loading Model Weights",
    "torch->Introduction to PyTorch->Save and Load the Model->Saving and Loading Models with Shapes",
    "torch->Introduction to PyTorch->Save and Load the Model->Related Tutorials",
    "torch->Learning PyTorch->Deep Learning with PyTorch: A 60 Minute Blitz",
    "torch->Learning PyTorch->Deep Learning with PyTorch: A 60 Minute Blitz->What is PyTorch?",
    "torch->Learning PyTorch->Deep Learning with PyTorch: A 60 Minute Blitz->Goal of this tutorial:",
    "torch->Learning PyTorch->Learning PyTorch with Examples",
    "torch->Learning PyTorch->Learning PyTorch with Examples->->",
    "torch->Learning PyTorch->Learning PyTorch with Examples->",
    "torch->Learning PyTorch->What is torch.nn really?",
    "torch->Learning PyTorch->What is torch.nn really?->MNIST data setup",
    "torch->Learning PyTorch->What is torch.nn really?->Neural net from scratch (no torch.nn)",
    "torch->Learning PyTorch->What is torch.nn really?->Using torch.nn.functional",
    "torch->Learning PyTorch->What is torch.nn really?->Refactor using nn.Module",
    "torch->Learning PyTorch->What is torch.nn really?->Refactor using nn.Linear",
    "torch->Learning PyTorch->What is torch.nn really?->Refactor using optim",
    "torch->Learning PyTorch->What is torch.nn really?->Refactor using Dataset",
    "torch->Learning PyTorch->What is torch.nn really?->Refactor using DataLoader",
    "torch->Learning PyTorch->What is torch.nn really?->Add validation",
    "torch->Learning PyTorch->What is torch.nn really?->Create fit() and get_data()",
    "torch->Learning PyTorch->What is torch.nn really?->Switch to CNN",
    "torch->Learning PyTorch->What is torch.nn really?->nn.Sequential",
    "torch->Learning PyTorch->What is torch.nn really?->Wrapping DataLoader",
    "torch->Learning PyTorch->What is torch.nn really?->Using your GPU",
    "torch->Learning PyTorch->What is torch.nn really?->Closing thoughts",
    "torch->Learning PyTorch->Visualizing Models, Data, and Training with TensorBoard",
    "torch->Learning PyTorch->Visualizing Models, Data, and Training with TensorBoard->1. TensorBoard setup",
    "torch->Learning PyTorch->Visualizing Models, Data, and Training with TensorBoard->2. Writing to TensorBoard",
    "torch->Learning PyTorch->Visualizing Models, Data, and Training with TensorBoard->3. Inspect the model using TensorBoard",
    "torch->Learning PyTorch->Visualizing Models, Data, and Training with TensorBoard->4. Adding a \u201cProjector\u201d to TensorBoard",
    "torch->Learning PyTorch->Visualizing Models, Data, and Training with TensorBoard->5. Tracking model training with TensorBoard",
    "torch->Learning PyTorch->Visualizing Models, Data, and Training with TensorBoard->6. Assessing trained models with TensorBoard",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Defining the Dataset",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Defining the Dataset->Writing a custom dataset for PennFudan",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Defining your model",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Defining your model->1 - Finetuning from a pretrained model",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Defining your model->2 - Modifying the model to add a different backbone",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Defining your model->An Instance segmentation model for PennFudan Dataset",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Putting everything together",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Testing forward() method (Optional)",
    "torch->Image and Video->TorchVision Object Detection Finetuning Tutorial->Wrapping up",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->Load Data",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->Load Data->Visualize a few images",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->Training the model",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->Training the model->Visualizing the model predictions",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->Finetuning the convnet",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->Finetuning the convnet->Train and evaluate",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->ConvNet as fixed feature extractor",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->ConvNet as fixed feature extractor->Train and evaluate",
    "torch->Image and Video->Transfer Learning for Computer Vision Tutorial->Further Learning",
    "torch->Image and Video->Adversarial Example Generation",
    "torch->Image and Video->Adversarial Example Generation->Threat Model",
    "torch->Image and Video->Adversarial Example Generation->Fast Gradient Sign Attack",
    "torch->Image and Video->Adversarial Example Generation->Implementation",
    "torch->Image and Video->Adversarial Example Generation->Implementation->Inputs",
    "torch->Image and Video->Adversarial Example Generation->Implementation->Model Under Attack",
    "torch->Image and Video->Adversarial Example Generation->Implementation->FGSM Attack",
    "torch->Image and Video->Adversarial Example Generation->Implementation->Testing Function",
    "torch->Image and Video->Adversarial Example Generation->Implementation->Run Attack",
    "torch->Image and Video->Adversarial Example Generation->Results->Accuracy vs Epsilon",
    "torch->Image and Video->Adversarial Example Generation->Results->Sample Adversarial Examples",
    "torch->Image and Video->Adversarial Example Generation->Where to go next?",
    "torch->Image and Video->Spatial Transformer Networks Tutorial",
    "torch->Image and Video->Spatial Transformer Networks Tutorial->Loading the data",
    "torch->Image and Video->Spatial Transformer Networks Tutorial->Depicting spatial transformer networks",
    "torch->Image and Video->Spatial Transformer Networks Tutorial->Training the model",
    "torch->Image and Video->Spatial Transformer Networks Tutorial->Visualizing the STN results",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->What is DeiT",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->Classifying Images with DeiT",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->Scripting DeiT",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->Quantizing DeiT",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->Optimizing DeiT",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->Using Lite Interpreter",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->Comparing Inference Speed",
    "torch->Image and Video->Optimizing Vision Transformer Model for Deployment->Comparing Inference Speed->Learn More",
    "torch->Audio->Audio I/O",
    "torch->Audio->Audio Resampling",
    "torch->Audio->Audio Data Augmentation",
    "torch->Audio->Audio Feature Extractions",
    "torch->Audio->Audio Feature Augmentation",
    "torch->Audio->Audio Datasets",
    "torch->Audio->Speech Recognition with Wav2Vec2",
    "torch->Audio->Text-to-speech with Tacotron2",
    "torch->Audio->Forced Alignment with Wav2Vec2",
    "torch->Text->Language Modeling with nn.Transformer and TorchText",
    "torch->Text->Language Modeling with nn.Transformer and TorchText->Define the model",
    "torch->Text->Language Modeling with nn.Transformer and TorchText->Load and batch data",
    "torch->Text->Language Modeling with nn.Transformer and TorchText->Load and batch data->Functions to generate input and target sequence",
    "torch->Text->Language Modeling with nn.Transformer and TorchText->Initiate an instance",
    "torch->Text->Language Modeling with nn.Transformer and TorchText->Run the model",
    "torch->Text->Language Modeling with nn.Transformer and TorchText->Evaluate the best model on the test dataset",
    "torch->Text->Fast Transformer Inference with Better Transformer",
    "torch->Text->Fast Transformer Inference with Better Transformer->Better Transformer Features in This Tutorial",
    "torch->Text->Fast Transformer Inference with Better Transformer->Additional Information",
    "torch->Text->Fast Transformer Inference with Better Transformer->Summary",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Preparing the Data",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Preparing the Data->Turning Names into Tensors",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Creating the Network",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Training->Preparing for Training",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Training->Training the Network",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Training->Plotting the Results",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Evaluating the Results",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Evaluating the Results->Running on User Input",
    "torch->Text->NLP From Scratch: Classifying Names with a Character-Level RNN->Exercises",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN->Preparing the Data",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN->Creating the Network",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN->Training->Preparing for Training",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN->Training->Training the Network",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN->Training->Plotting the Losses",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN->Sampling the Network",
    "torch->Text->NLP From Scratch: Generating Names with a Character-Level RNN->Exercises",
    "torch->Text->Text classification with the torchtext library",
    "torch->Text->Text classification with the torchtext library->Access to the raw dataset iterators",
    "torch->Text->Text classification with the torchtext library->Prepare data processing pipelines",
    "torch->Text->Text classification with the torchtext library->Generate data batch and iterator",
    "torch->Text->Text classification with the torchtext library->Define the model",
    "torch->Text->Text classification with the torchtext library->Initiate an instance",
    "torch->Text->Text classification with the torchtext library->Define functions to train the model and evaluate results.",
    "torch->Text->Text classification with the torchtext library->Split the dataset and run the model",
    "torch->Text->Text classification with the torchtext library->Evaluate the model with test dataset",
    "torch->Text->Text classification with the torchtext library->Test on a random news",
    "torch->Text->Language Translation with nn.Transformer and torchtext",
    "torch->Text->Language Translation with nn.Transformer and torchtext->Data Sourcing and Processing",
    "torch->Text->Language Translation with nn.Transformer and torchtext->Seq2Seq Network using Transformer",
    "torch->Text->Language Translation with nn.Transformer and torchtext->Collation",
    "torch->Text->Language Translation with nn.Transformer and torchtext->References",
    "torch->Reinforcement Learning->Reinforcement Learning (DQN) Tutorial",
    "torch->Reinforcement Learning->Reinforcement Learning (DQN) Tutorial->Replay Memory",
    "torch->Reinforcement Learning->Reinforcement Learning (DQN) Tutorial->DQN algorithm",
    "torch->Reinforcement Learning->Reinforcement Learning (DQN) Tutorial->DQN algorithm->Q-network",
    "torch->Reinforcement Learning->Reinforcement Learning (DQN) Tutorial->Training->Hyperparameters and utilities",
    "torch->Reinforcement Learning->Reinforcement Learning (DQN) Tutorial->Training->Training loop",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Define Hyperparameters",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Define Hyperparameters->Data collection parameters",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Define Hyperparameters->PPO parameters",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Define an environment",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Define an environment->Transforms",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Define an environment->Normalization",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Policy",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Value network",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Data collector",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Replay buffer",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Loss function",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Training loop",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Results",
    "torch->Reinforcement Learning->Reinforcement Learning (PPO) with TorchRL Tutorial->Conclusion and next steps",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->RL Definitions",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Environment->Initialize Environment",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Environment->Preprocess Environment",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Act",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Cache and Recall",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Learn",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Learn->Neural Network",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Learn->TD Estimate & TD Target",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Learn->Updating the model",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Learn->Save checkpoint",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Learn->Putting it all together",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Agent->Logging",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Let\u2019s play!",
    "torch->Reinforcement Learning->Train a Mario-playing RL Agent->Conclusion",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->API Definition",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->Dependencies",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->Simple Web Server",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->Inference",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->Inference->Preparing the image",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->Inference->Prediction",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->Integrating the model in our API Server",
    "torch->Deploying PyTorch Models in Production->Deploying PyTorch in Python via a REST API with Flask->Next steps",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript->Basics of PyTorch Model Authoring",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript->Basics of TorchScript",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript->Basics of TorchScript->Tracing Modules",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript->Using Scripting to Convert Modules",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript->Using Scripting to Convert Modules->Mixing Scripting and Tracing",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript->Saving and Loading models",
    "torch->Deploying PyTorch Models in Production->Introduction to TorchScript->Saving and Loading models->Further Reading",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 1: Converting Your PyTorch Model to Torch Script",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 1: Converting Your PyTorch Model to Torch Script->Converting to Torch Script via Tracing",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 1: Converting Your PyTorch Model to Torch Script->Converting to Torch Script via Annotation",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 2: Serializing Your Script Module to a File",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 3: Loading Your Script Module in C++",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 3: Loading Your Script Module in C++->A Minimal C++ Application",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 3: Loading Your Script Module in C++->Depending on LibTorch and Building the Application",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 4: Executing the Script Module in C++",
    "torch->Deploying PyTorch Models in Production->Loading a TorchScript Model in C++->Step 5: Getting Help and Exploring the API",
    "torch->Deploying PyTorch Models in Production->(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime",
    "torch->Deploying PyTorch Models in Production->(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime->Running the model on an image using ONNX Runtime",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Prerequisites",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Raspberry Pi 4 Setup",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Installing PyTorch and OpenCV",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Video Capture",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Image Preprocessing",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Model Choices",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->MobileNetV2: Quantization and JIT",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Putting It Together",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Troubleshooting: Performance",
    "torch->Deploying PyTorch Models in Production->Real Time Inference on Raspberry Pi 4 (30 fps!)->Next Steps",
    "torch->Code Transforms with FX->(beta) Building a Convolution/Batch Norm fuser in FX",
    "torch->Code Transforms with FX->(beta) Building a Convolution/Batch Norm fuser in FX->Fusing Convolution with Batch Norm",
    "torch->Code Transforms with FX->(beta) Building a Convolution/Batch Norm fuser in FX->FX Fusion Pass",
    "torch->Code Transforms with FX->(beta) Building a Convolution/Batch Norm fuser in FX->Testing out our Fusion Pass",
    "torch->Code Transforms with FX->(beta) Building a Convolution/Batch Norm fuser in FX->Benchmarking our Fusion on ResNet18",
    "torch->Code Transforms with FX->(beta) Building a Simple CPU Performance Profiler with FX",
    "torch->Code Transforms with FX->(beta) Building a Simple CPU Performance Profiler with FX->Capturing the Model with Symbolic Tracing",
    "torch->Code Transforms with FX->(beta) Building a Simple CPU Performance Profiler with FX->Creating a Profiling Interpreter",
    "torch->Code Transforms with FX->(beta) Building a Simple CPU Performance Profiler with FX->Investigating the Performance of ResNet18",
    "torch->Code Transforms with FX->(beta) Building a Simple CPU Performance Profiler with FX->Conclusion",
    "torch->Frontend APIs->(beta) Channels Last Memory Format in PyTorch",
    "torch->Frontend APIs->(beta) Channels Last Memory Format in PyTorch->What is Channels Last",
    "torch->Frontend APIs->(beta) Channels Last Memory Format in PyTorch->Memory Format API",
    "torch->Frontend APIs->(beta) Channels Last Memory Format in PyTorch->Performance Gains",
    "torch->Frontend APIs->(beta) Channels Last Memory Format in PyTorch->Converting existing models",
    "torch->Frontend APIs->(beta) Channels Last Memory Format in PyTorch->Work to do",
    "torch->Frontend APIs->Forward-mode Automatic Differentiation (Beta)",
    "torch->Frontend APIs->Forward-mode Automatic Differentiation (Beta)->Basic Usage",
    "torch->Frontend APIs->Forward-mode Automatic Differentiation (Beta)->Usage with Modules",
    "torch->Frontend APIs->Forward-mode Automatic Differentiation (Beta)->Using the functional Module API (beta)",
    "torch->Frontend APIs->Forward-mode Automatic Differentiation (Beta)->Custom autograd Function",
    "torch->Frontend APIs->Forward-mode Automatic Differentiation (Beta)->Functional API (beta)",
    "torch->Frontend APIs->Forward-mode Automatic Differentiation (Beta)->Using the functional API with Modules",
    "torch->Frontend APIs->Jacobians, Hessians, hvp, vhp, and more: composing function transforms",
    "torch->Frontend APIs->Jacobians, Hessians, hvp, vhp, and more: composing function transforms->Computing the Jacobian",
    "torch->Frontend APIs->Jacobians, Hessians, hvp, vhp, and more: composing function transforms->reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)",
    "torch->Frontend APIs->Jacobians, Hessians, hvp, vhp, and more: composing function transforms->Hessian computation with functorch.hessian",
    "torch->Frontend APIs->Jacobians, Hessians, hvp, vhp, and more: composing function transforms->Batch Jacobian and Batch Hessian",
    "torch->Frontend APIs->Jacobians, Hessians, hvp, vhp, and more: composing function transforms->Computing Hessian-vector products",
    "torch->Frontend APIs->Model ensembling",
    "torch->Frontend APIs->Model ensembling->What is model ensembling?",
    "torch->Frontend APIs->Model ensembling->Using vmap to vectorize the ensemble",
    "torch->Frontend APIs->Model ensembling->Performance",
    "torch->Frontend APIs->Per-sample-gradients->What is it?",
    "torch->Frontend APIs->Per-sample-gradients->Per-sample-grads, the efficient way, using function transforms",
    "torch->Frontend APIs->Per-sample-gradients->Performance comparison",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Motivation",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Writing a Basic Application",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Module API Basics",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Module API Basics->Defining a Module and Registering Parameters",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Module API Basics->Registering Submodules and Traversing the Module Hierarchy",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Module API Basics->Running the Network in Forward Mode",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Module API Basics->Module Ownership",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Defining the DCGAN Modules",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Defining the DCGAN Modules->What was a GAN aGAN?",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Defining the DCGAN Modules->The Generator Module",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Defining the Neural Network Models->Defining the DCGAN Modules->The Discriminator Module",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Loading Data",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Writing the Training Loop",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Moving to the GPU",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Checkpointing and Recovering the Training State",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Inspecting Generated Images",
    "torch->Frontend APIs->Using the PyTorch C++ Frontend->Conclusion",
    "torch->Frontend APIs->Dynamic Parallelism in TorchScript",
    "torch->Frontend APIs->Dynamic Parallelism in TorchScript->Basic Syntax",
    "torch->Frontend APIs->Dynamic Parallelism in TorchScript->Applied Example: Ensemble of Bidirectional LSTMs",
    "torch->Frontend APIs->Dynamic Parallelism in TorchScript->Parallelizing Forward and Backward Layers",
    "torch->Frontend APIs->Dynamic Parallelism in TorchScript->Aside: Visualizing Parallelism",
    "torch->Frontend APIs->Dynamic Parallelism in TorchScript->Parallelizing Models in the Ensemble",
    "torch->Frontend APIs->Dynamic Parallelism in TorchScript->Conclusion",
    "torch->Frontend APIs->Autograd in C++ Frontend",
    "torch->Frontend APIs->Autograd in C++ Frontend->Basic autograd operations",
    "torch->Frontend APIs->Autograd in C++ Frontend->Computing higher-order gradients in C++",
    "torch->Frontend APIs->Autograd in C++ Frontend->Using custom autograd function in C++",
    "torch->Frontend APIs->Autograd in C++ Frontend->Translating autograd code from Python to C++",
    "torch->Frontend APIs->Autograd in C++ Frontend->Conclusion",
    "torch->Extending PyTorch->Double Backward with Custom Functions",
    "torch->Extending PyTorch->Double Backward with Custom Functions->Saving the Inputs",
    "torch->Extending PyTorch->Double Backward with Custom Functions->Saving the Outputs",
    "torch->Extending PyTorch->Double Backward with Custom Functions->Saving Intermediate Results",
    "torch->Extending PyTorch->Double Backward with Custom Functions->Saving Intermediate Results: What not to do",
    "torch->Extending PyTorch->Double Backward with Custom Functions->When Backward is not Tracked",
    "torch->Extending PyTorch->Fusing Convolution and Batch Norm using Custom Function",
    "torch->Extending PyTorch->Fusing Convolution and Batch Norm using Custom Function->Backward Formula Implementation for Convolution",
    "torch->Extending PyTorch->Fusing Convolution and Batch Norm using Custom Function->Backward Formula Implementation for Batch Norm",
    "torch->Extending PyTorch->Fusing Convolution and Batch Norm using Custom Function->Fusing Convolution and BatchNorm",
    "torch->Extending PyTorch->Fusing Convolution and Batch Norm using Custom Function->Testing out our new Layer",
    "torch->Extending PyTorch->Fusing Convolution and Batch Norm using Custom Function->A Comparison of Memory Usage",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Motivation and Example",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Building with setuptools",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Writing the C++ Op",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Writing the C++ Op->Forward Pass",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Writing the C++ Op->Backward Pass",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Binding to Python",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Using Your Extension",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Using Your Extension->Performance Comparison",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->Using Your Extension->Performance on GPU Devices",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a C++ Extension->JIT Compiling Extensions",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a Mixed C++/CUDA extension",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a Mixed C++/CUDA extension->Using accessors",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a Mixed C++/CUDA extension->Integrating a C++/CUDA Operation with PyTorch",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Writing a Mixed C++/CUDA extension->Integrating a C++/CUDA Operation with PyTorch->Performance Comparison",
    "torch->Extending PyTorch->Custom C++ and CUDA Extensions->Conclusion",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Implementing the Custom Operator in C++",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Registering the Custom Operator with TorchScript",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Building the Custom Operator",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Building the Custom Operator->Environment setup",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Building the Custom Operator->Building with CMake",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Using the TorchScript Custom Operator in Python",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Using the TorchScript Custom Operator in Python->Using the Custom Operator with Tracing",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Using the TorchScript Custom Operator in Python->Using the Custom Operator with Script",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Using the TorchScript Custom Operator in C++",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Conclusion",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Appendix A: More Ways of Building Custom Operators",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Appendix A: More Ways of Building Custom Operators->Building with JIT compilation",
    "torch->Extending PyTorch->Extending TorchScript with Custom C++ Operators->Appendix A: More Ways of Building Custom Operators->Building with Setuptools",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->Defining schema and backend implementations",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->For operators that do not need autograd",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->For operators that do not need autograd->In-place or view ops",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->Adding autograd support",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->Going beyond autograd",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->Going beyond autograd->Autocast",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->Going beyond autograd->Batched",
    "torch->Extending PyTorch->Registering a Dispatched Operator in C++->Going beyond autograd->Tracer",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->What\u2019s a new backend?",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Get a dispatch key for your backend",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Get the full list of PyTorch operators",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Register kernels for the new backend",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Autograd support for the new backend",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Build an extension",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Custom operator support",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->JIT support",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Testing your backend against native PyTorch backends",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Backward Compatibility",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Known issues & additional notes",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Future Work",
    "torch->Extending PyTorch->Extending dispatcher for a new backend in C++->Stay in touch",
    "torch->Model Optimization->Profiling your PyTorch Module",
    "torch->Model Optimization->Profiling your PyTorch Module->Performance debugging using Profiler",
    "torch->Model Optimization->Profiling your PyTorch Module->Profile the forward pass",
    "torch->Model Optimization->Profiling your PyTorch Module->Print profiler results",
    "torch->Model Optimization->Profiling your PyTorch Module->Improve memory performance",
    "torch->Model Optimization->Profiling your PyTorch Module->Improve time performance",
    "torch->Model Optimization->Profiling your PyTorch Module->Further Reading",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Introduction",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Setup",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Steps",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Steps->1. Prepare the data and model",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Steps->2. Use profiler to record execution events",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Steps->3. Run the profiler",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Steps->4. Use TensorBoard to view results and analyze model performance",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Steps->5. Improve performance with the help of profiler",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Steps->6. Analyze performance with other advanced features",
    "torch->Model Optimization->PyTorch Profiler With TensorBoard->Learn More",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->Setup / Imports",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->Data loaders",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->Configurable neural network",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->The train function",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->The train function->Adding (multi) GPU support with DataParallel",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->The train function->Communicating with Ray Tune",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->The train function->Full training function",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->Test set accuracy",
    "torch->Model Optimization->Hyperparameter tuning with Ray Tune->Configuring the search space",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->What is DeiT",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->Classifying Images with DeiT",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->Scripting DeiT",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->Quantizing DeiT",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->Optimizing DeiT",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->Using Lite Interpreter",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->Comparing Inference Speed",
    "torch->Model Optimization->Optimizing Vision Transformer Model for Deployment->Comparing Inference Speed->Learn More",
    "torch->Model Optimization->Parametrizations Tutorial",
    "torch->Model Optimization->Parametrizations Tutorial->Implementing parametrizations by hand",
    "torch->Model Optimization->Parametrizations Tutorial->Introduction to parametrizations",
    "torch->Model Optimization->Parametrizations Tutorial->Inspecting a parametrized module",
    "torch->Model Optimization->Parametrizations Tutorial->Parametrizations are first-class citizens",
    "torch->Model Optimization->Parametrizations Tutorial->Caching the value of a parametrization",
    "torch->Model Optimization->Parametrizations Tutorial->Concatenating parametrizations",
    "torch->Model Optimization->Parametrizations Tutorial->Intializing parametrizations",
    "torch->Model Optimization->Parametrizations Tutorial->Removing parametrizations",
    "torch->Model Optimization->Pruning Tutorial",
    "torch->Model Optimization->Pruning Tutorial->Requirements",
    "torch->Model Optimization->Pruning Tutorial->Create a model",
    "torch->Model Optimization->Pruning Tutorial->Inspect a Module",
    "torch->Model Optimization->Pruning Tutorial->Pruning a Module",
    "torch->Model Optimization->Pruning Tutorial->Iterative Pruning",
    "torch->Model Optimization->Pruning Tutorial->Serializing a pruned model",
    "torch->Model Optimization->Pruning Tutorial->Remove pruning re-parametrization",
    "torch->Model Optimization->Pruning Tutorial->Pruning multiple parameters in a model",
    "torch->Model Optimization->Pruning Tutorial->Global pruning",
    "torch->Model Optimization->Pruning Tutorial->Extending torch.nn.utils.prune with custom pruning functions",
    "torch->Model Optimization->(beta) Dynamic Quantization on an LSTM Word Language Model",
    "torch->Model Optimization->(beta) Dynamic Quantization on an LSTM Word Language Model->Introduction",
    "torch->Model Optimization->(beta) Dynamic Quantization on an LSTM Word Language Model->1. Define the model",
    "torch->Model Optimization->(beta) Dynamic Quantization on an LSTM Word Language Model->2. Load in the text data",
    "torch->Model Optimization->(beta) Dynamic Quantization on an LSTM Word Language Model->3. Load the pre-trained model",
    "torch->Model Optimization->(beta) Dynamic Quantization on an LSTM Word Language Model->4. Test dynamic quantization",
    "torch->Model Optimization->(beta) Dynamic Quantization on an LSTM Word Language Model->Conclusion",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->Introduction",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->1. Setup->1.1 Install PyTorch and HuggingFace Transformers",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->1. Setup->1.2 Import the necessary modules",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->1. Setup->1.3 Learn about helper functions",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->1. Setup->1.4 Download the dataset",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->2. Fine-tune the BERT model",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->2. Fine-tune the BERT model->2.1 Set global configurations",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->2. Fine-tune the BERT model->2.2 Load the fine-tuned BERT model",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->2. Fine-tune the BERT model->2.3 Define the tokenize and evaluation function",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->3. Apply the dynamic quantization",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->3. Apply the dynamic quantization->3.1 Check the model size",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->3. Apply the dynamic quantization->3.2 Evaluate the inference accuracy and time",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->3. Apply the dynamic quantization->3.3 Serialize the quantized model",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->Conclusion",
    "torch->Model Optimization->(beta) Dynamic Quantization on BERT->References",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 0. Prerequisites",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 0. Prerequisites->Installing the Nightly Build",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 0. Prerequisites->Load Data",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 0. Prerequisites->Visualize a few images",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 0. Prerequisites->Support Function for Model Training",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 0. Prerequisites->Support Function for Visualizing the Model Predictions",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 1. Training a Custom Classifier based on a Quantized Feature Extractor",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 1. Training a Custom Classifier based on a Quantized Feature Extractor->Train and evaluate",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 2. Finetuning the Quantizable Model",
    "torch->Model Optimization->(beta) Quantized Transfer Learning for Computer Vision Tutorial->Part 2. Finetuning the Quantizable Model->Finetuning the model",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->1. Model architecture",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->2. Helper functions",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->3. Define dataset and data loaders",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->3. Define dataset and data loaders->ImageNet Data",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->4. Post-training static quantization",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->5. Quantization-aware training",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->5. Quantization-aware training->Speedup from quantization",
    "torch->Model Optimization->(beta) Static Quantization with Eager Mode in PyTorch->Conclusion",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->Avoid logical cores for deep learning",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->Local memory access is always faster than remote memory access",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->Efficient CPU usage with core pinning for multi-worker inference",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->1. Default TorchServe setting (no core pinning)",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->2. torch.set_num_threads = number of physical cores / number of workers (no core pinning)",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->3. launcher core pinning",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->Conclusion",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles->Acknowledgement",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->Prerequisites",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->Prerequisites->Top-down Microarchitecture Analysis Method (TMA)",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->Prerequisites->Top-down Microarchitecture Analysis Method (TMA)->Tune for the Back End Bound",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->Prerequisites->Intel\u00ae VTune\u2122 Profiler\u2019s Instrumentation and Tracing Technology (ITT)",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Leveraging Advanced Launcher Configuration: Memory Allocator",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Leveraging Advanced Launcher Configuration: Memory Allocator->TCMalloc, JeMalloc, PTMalloc",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Leveraging Advanced Launcher Configuration: Memory Allocator->TCMalloc, JeMalloc, PTMalloc->Exercise",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Leveraging Advanced Launcher Configuration: Memory Allocator->TCMalloc, JeMalloc, PTMalloc->Exercise with TorchServe",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Intel\u00ae Extension for PyTorch*",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Intel\u00ae Extension for PyTorch*->Operator Optimization",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Intel\u00ae Extension for PyTorch*->Operator Optimization->Exercise",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Intel\u00ae Extension for PyTorch*->Graph Optimization",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Intel\u00ae Extension for PyTorch*->Graph Optimization->Exercise",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Intel\u00ae Extension for PyTorch*->Channels Last Memory Format",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Intel\u00ae Extension for PyTorch*->Channels Last Memory Format->Exercise",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Performance Boost with Intel\u00ae Extension for PyTorch*",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->TorchServe with Intel\u00ae Extension for PyTorch*->Exercise with TorchServe",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->Conclusion",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->Related Readings",
    "torch->Model Optimization->Grokking PyTorch Intel CPU performance from first principles (Part 2)->Acknowledgement",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->Introduction",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->Importing Packages and Selecting a Device",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->The Transformer Block",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->Setup and Performance Metrics",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->TorchScript & nvFuser",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->nvFuser & Dynamic Shapes",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->Defining novel operations with nvFuser and FuncTorch",
    "torch->Model Optimization->Getting Started - Accelerate Your Scripts with nvFuser->Transformer Block With a Novel Normalization",
    "torch->Model Optimization->Multi-Objective NAS with Ax",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Defining the TorchX App",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Setting up the Runner",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Setting up the SearchSpace",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Setting up Metrics",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Setting up the OptimizationConfig",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Creating the Ax Experiment",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Choosing the GenerationStrategy",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Configuring the Scheduler",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Running the optimization",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Evaluating the results",
    "torch->Model Optimization->Multi-Objective NAS with Ax->Acknowledgements",
    "torch->Model Optimization->torch.compile Tutorial",
    "torch->Model Optimization->torch.compile Tutorial->Basic Usage",
    "torch->Model Optimization->torch.compile Tutorial->Demonstrating Speedups",
    "torch->Model Optimization->torch.compile Tutorial->Comparison to TorchScript and FX Tracing",
    "torch->Model Optimization->torch.compile Tutorial->TorchDynamo and FX Graphs",
    "torch->Model Optimization->torch.compile Tutorial->Conclusion",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)->Summary",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)->Overview",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)->Fused implementations",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)->Explicit Dispatcher Control",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)->Hardware dependence",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)->Causal Self Attention",
    "torch->Model Optimization->(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)->Causal Self Attention->NestedTensor and Dense tensor support",
    "torch->Model Optimization->Using SDPA with torch.compile",
    "torch->Model Optimization->Conclusion",
    "torch->Parallel and Distributed Training->Distributed and Parallel Training Tutorials",
    "torch->Parallel and Distributed Training->Distributed and Parallel Training Tutorials->Learn DDP",
    "torch->Parallel and Distributed Training->Distributed and Parallel Training Tutorials->Learn FSDP",
    "torch->Parallel and Distributed Training->Distributed and Parallel Training Tutorials->Learn RPC",
    "torch->Parallel and Distributed Training->Distributed and Parallel Training Tutorials->Custom Extensions",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview->Introduction",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview->Data Parallel Training",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview->Data Parallel Training->torch.nn.DataParallel",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview->Data Parallel Training->torch.nn.parallel.DistributedDataParallel",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview->Data Parallel Training->torch.distributed.elastic",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview->RPC-Based Distributed Training",
    "torch->Parallel and Distributed Training->PyTorch Distributed Overview->PyTorch Distributed Developers",
    "torch->Parallel and Distributed Training->Single-Machine Model Parallel Best Practices",
    "torch->Parallel and Distributed Training->Single-Machine Model Parallel Best Practices->Basic Usage",
    "torch->Parallel and Distributed Training->Single-Machine Model Parallel Best Practices->Apply Model Parallel to Existing Modules",
    "torch->Parallel and Distributed Training->Single-Machine Model Parallel Best Practices->Speed Up by Pipelining Inputs",
    "torch->Parallel and Distributed Training->Getting Started with Distributed Data Parallel",
    "torch->Parallel and Distributed Training->Getting Started with Distributed Data Parallel->Comparison between DataParallel and DistributedDataParallel",
    "torch->Parallel and Distributed Training->Getting Started with Distributed Data Parallel->Basic Use Case",
    "torch->Parallel and Distributed Training->Getting Started with Distributed Data Parallel->Skewed Processing Speeds",
    "torch->Parallel and Distributed Training->Getting Started with Distributed Data Parallel->Save and Load Checkpoints",
    "torch->Parallel and Distributed Training->Getting Started with Distributed Data Parallel->Combining DDP with Model Parallelism",
    "torch->Parallel and Distributed Training->Getting Started with Distributed Data Parallel->Initialize DDP with torch.distributed.run/torchrun",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Setup",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Point-to-Point Communication",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Collective Communication",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Distributed Training",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Distributed Training->Our Own Ring-Allreduce",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Advanced Topics",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Advanced Topics->Communication Backends",
    "torch->Parallel and Distributed Training->Writing Distributed Applications with PyTorch->Advanced Topics->Initialization Methods",
    "torch->Parallel and Distributed Training->Getting Started with Fully Sharded Data Parallel(FSDP)",
    "torch->Parallel and Distributed Training->Getting Started with Fully Sharded Data Parallel(FSDP)->How FSDP works",
    "torch->Parallel and Distributed Training->Getting Started with Fully Sharded Data Parallel(FSDP)->How to use FSDP",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->FSDP Features in This Tutorial",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Recap on How FSDP Works",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Fine-tuning HF T5",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Transformer Wrapping Policy",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Mixed Precision",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Intializing FSDP Model on Device",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Sharding Strategy",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Backward Prefetch",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Model Checkpoint Saving, by streaming to the Rank0 CPU",
    "torch->Parallel and Distributed Training->Advanced Model Training with Fully Sharded Data Parallel (FSDP)->Summary",
    "torch->Parallel and Distributed Training->Customize Process Group Backends Using Cpp Extensions",
    "torch->Parallel and Distributed Training->Customize Process Group Backends Using Cpp Extensions->Basics",
    "torch->Parallel and Distributed Training->Customize Process Group Backends Using Cpp Extensions->Step 1: Implement a Subclass of ProcessGroup",
    "torch->Parallel and Distributed Training->Customize Process Group Backends Using Cpp Extensions->Step 2: Expose The Extension Python APIs",
    "torch->Parallel and Distributed Training->Customize Process Group Backends Using Cpp Extensions->Step 3: Build The Custom Extension",
    "torch->Parallel and Distributed Training->Customize Process Group Backends Using Cpp Extensions->Step 4: Use The Extension in Application",
    "torch->Parallel and Distributed Training->Getting Started with Distributed RPC Framework",
    "torch->Parallel and Distributed Training->Getting Started with Distributed RPC Framework->Distributed Reinforcement Learning using RPC and RRef",
    "torch->Parallel and Distributed Training->Getting Started with Distributed RPC Framework->Distributed RNN using Distributed Autograd and Distributed Optimizer",
    "torch->Parallel and Distributed Training->Implementing a Parameter Server Using Distributed RPC Framework",
    "torch->Parallel and Distributed Training->Distributed Pipeline Parallelism Using RPC",
    "torch->Parallel and Distributed Training->Distributed Pipeline Parallelism Using RPC->Basics",
    "torch->Parallel and Distributed Training->Distributed Pipeline Parallelism Using RPC->Step 1: Partition ResNet50 Model",
    "torch->Parallel and Distributed Training->Distributed Pipeline Parallelism Using RPC->Step 2: Stitch ResNet50 Model Shards Into One Module",
    "torch->Parallel and Distributed Training->Distributed Pipeline Parallelism Using RPC->Step 3: Define The Training Loop",
    "torch->Parallel and Distributed Training->Distributed Pipeline Parallelism Using RPC->Step 4: Launch RPC Processes",
    "torch->Parallel and Distributed Training->Implementing Batch RPC Processing Using Asynchronous Executions",
    "torch->Parallel and Distributed Training->Implementing Batch RPC Processing Using Asynchronous Executions->Basics",
    "torch->Parallel and Distributed Training->Implementing Batch RPC Processing Using Asynchronous Executions->Batch-Updating Parameter Server",
    "torch->Parallel and Distributed Training->Implementing Batch RPC Processing Using Asynchronous Executions->Batch-Processing CartPole Solver",
    "torch->Parallel and Distributed Training->Implementing Batch RPC Processing Using Asynchronous Executions->Learn More",
    "torch->Parallel and Distributed Training->Combining Distributed DataParallel with Distributed RPC Framework",
    "torch->Parallel and Distributed Training->Training Transformer models using Pipeline Parallelism",
    "torch->Parallel and Distributed Training->Training Transformer models using Pipeline Parallelism->Define the model",
    "torch->Parallel and Distributed Training->Training Transformer models using Pipeline Parallelism->Load and batch data",
    "torch->Parallel and Distributed Training->Training Transformer models using Pipeline Parallelism->Load and batch data->Functions to generate input and target sequence",
    "torch->Parallel and Distributed Training->Training Transformer models using Pipeline Parallelism->Model scale and Pipe initialization",
    "torch->Parallel and Distributed Training->Training Transformer models using Pipeline Parallelism->Run the model",
    "torch->Parallel and Distributed Training->Training Transformer models using Pipeline Parallelism->Evaluate the model with the test dataset",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Define the model",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Start multiple processes for training",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Load and batch data",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Load and batch data->Functions to generate input and target sequence",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Model scale and Pipe initialization",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Run the model",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Evaluate the model with the test dataset",
    "torch->Parallel and Distributed Training->Training Transformer models using Distributed Data Parallel and Pipeline Parallelism->Output",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->Requirements",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->What is Join?",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->Using Join with DistributedDataParallel",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->Using Join with DistributedDataParallel and ZeroRedundancyOptimizer",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->Passing Keyword Arguments",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->How Does Join Work?",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->How Does Join Work?->Joinable",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->How Does Join Work?->JoinHook",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->How Does Join Work?->Join",
    "torch->Parallel and Distributed Training->Distributed Training with Uneven Inputs Using the Join Context Manager->Making a Toy Class Work with Join",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Introduction",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Learning Objectives",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Pre-requisites",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Steps->1. Convert the DeepLabV3 model for iOS deployment",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Steps->2. Get example input and output of the model in Python",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Steps->3. Build a new iOS app or reuse an example app and load the model",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Steps->4. Process the model input and output for model inference",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Steps->5. Complete the UI, refactor, build and run the app",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Recap",
    "torch->Mobile->Image Segmentation DeepLabV3 on iOS->Learn More",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Introduction",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Learning Objectives",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Pre-requisites",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Steps->1. Convert the DeepLabV3 model for Android deployment",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Steps->2. Get example input and output of the model in Python",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Steps->3. Build a new Android app or reuse an example app and load the model",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Steps->4. Process the model input and output for model inference",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Steps->5. Complete the UI, refactor, build and run the app",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Recap",
    "torch->Mobile->Image Segmentation DeepLabV3 on Android->Learn More",
    "torch->Recommendation Systems->Introduction to TorchRec",
    "torch->Recommendation Systems->Introduction to TorchRec->Installation",
    "torch->Recommendation Systems->Introduction to TorchRec->Overview",
    "torch->Recommendation Systems->Introduction to TorchRec->Overview->Distributed Setup",
    "torch->Recommendation Systems->Introduction to TorchRec->Overview->From EmbeddingBag to EmbeddingBagCollection",
    "torch->Recommendation Systems->Introduction to TorchRec->Overview->DistributedModelParallel",
    "torch->Recommendation Systems->Introduction to TorchRec->Overview->Query vanilla nn.EmbeddingBag with input and offsets",
    "torch->Recommendation Systems->Introduction to TorchRec->Overview->Representing minibatches with KeyedJaggedTensor",
    "torch->Recommendation Systems->Introduction to TorchRec->Overview->Putting it all together, querying our distributed model with a KJT minibatch",
    "torch->Recommendation Systems->Introduction to TorchRec->More resources",
    "torch->Recommendation Systems->Exploring TorchRec sharding",
    "torch->Recommendation Systems->Exploring TorchRec sharding->Installation",
    "torch->Recommendation Systems->Exploring TorchRec sharding->Distributed Setup",
    "torch->Recommendation Systems->Exploring TorchRec sharding->Constructing our embedding model",
    "torch->Recommendation Systems->Exploring TorchRec sharding->DistributedModelParallel in multiprocessing",
    "torch->Recommendation Systems->Exploring TorchRec sharding->DistributedModelParallel in multiprocessing->Multiprocessing Execution",
    "torch->Recommendation Systems->Exploring TorchRec sharding->DistributedModelParallel in multiprocessing->Table Wise Sharding",
    "torch->Recommendation Systems->Exploring TorchRec sharding->DistributedModelParallel in multiprocessing->Explore other sharding modes",
    "torch->Multimodality->TorchMultimodal Tutorial: Finetuning FLAVA",
    "torch->Multimodality->TorchMultimodal Tutorial: Finetuning FLAVA->Installation",
    "torch->Multimodality->TorchMultimodal Tutorial: Finetuning FLAVA->Steps",
    "torch->Multimodality->TorchMultimodal Tutorial: Finetuning FLAVA->Conclusion",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Prerequisites",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Learner profile",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Learning Objectives",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Content",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Content->Shape, axis and array properties",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Content->Operations on an axis",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Approximation",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Approximation->Applying to all colors",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Approximation->Products with n-dimensional arrays",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Approximation->Final words",
    "numpy->NumPy Features->Linear algebra on n-dimensional arrays->Further reading",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->What you\u2019ll learn",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->What you\u2019ll do",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->What you\u2019ll need",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Create your arrays",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Save your arrays with NumPy\u2019s",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Remove the saved arrays and load them back with NumPy\u2019s",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Reassign the NpzFile arrays to x and y",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Success",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Another option: saving to human-readable csv",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Rearrange the data into a single 2D array",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Save the data to csv file using",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Our arrays as a csv file",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Success, but remember your types",
    "numpy->NumPy Features->Saving and sharing your NumPy arrays->Wrapping up",
    "numpy->NumPy Features->Masked Arrays->What you\u2019ll do",
    "numpy->NumPy Features->Masked Arrays->What you\u2019ll learn",
    "numpy->NumPy Features->Masked Arrays->What you\u2019ll need",
    "numpy->NumPy Features->Masked Arrays->What are masked arrays?",
    "numpy->NumPy Features->Masked Arrays->When can they be useful?",
    "numpy->NumPy Features->Masked Arrays->Using masked arrays to see COVID-19 data",
    "numpy->NumPy Features->Masked Arrays->Exploring the data",
    "numpy->NumPy Features->Masked Arrays->Missing data",
    "numpy->NumPy Features->Masked Arrays->Fitting Data",
    "numpy->NumPy Features->Masked Arrays->In practice",
    "numpy->NumPy Features->Masked Arrays->Further reading",
    "numpy->NumPy Features->Masked Arrays->Further reading->Reference",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->What you\u2019ll do",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Skills you\u2019ll learn",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->What you\u2019ll need",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Building Moore\u2019s law as an exponential function",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Loading historical manufacturing data to your workspace",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Calculating the historical growth curve for transistors",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Sharing your results as zipped arrays and a csv",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Sharing your results as zipped arrays and a csv->Zipping the arrays into a file",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Sharing your results as zipped arrays and a csv->Creating your own comma separated value file",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->Wrapping up",
    "numpy->NumPy Applications->Determining Moore\u2019s Law with real data in NumPy->References",
    "numpy->NumPy Applications->Deep learning on MNIST",
    "numpy->NumPy Applications->Deep learning on MNIST->Prerequisites",
    "numpy->NumPy Applications->Deep learning on MNIST->Table of contents",
    "numpy->NumPy Applications->Deep learning on MNIST->1. Load the MNIST dataset",
    "numpy->NumPy Applications->Deep learning on MNIST->2. Preprocess the data",
    "numpy->NumPy Applications->Deep learning on MNIST->2. Preprocess the data->Convert the image data to the floating-point format",
    "numpy->NumPy Applications->Deep learning on MNIST->2. Preprocess the data->Convert the labels to floating point through categorical/one-hot encoding",
    "numpy->NumPy Applications->Deep learning on MNIST->3. Build and train a small neural network from scratch",
    "numpy->NumPy Applications->Deep learning on MNIST->3. Build and train a small neural network from scratch->Neural network building blocks with NumPy",
    "numpy->NumPy Applications->Deep learning on MNIST->3. Build and train a small neural network from scratch->Model architecture and training summary",
    "numpy->NumPy Applications->Deep learning on MNIST->3. Build and train a small neural network from scratch->Compose the model and begin training and testing it",
    "numpy->NumPy Applications->Deep learning on MNIST->Next steps",
    "numpy->NumPy Applications->X-ray image processing",
    "numpy->NumPy Applications->X-ray image processing->Prerequisites",
    "numpy->NumPy Applications->X-ray image processing->Table of contents",
    "numpy->NumPy Applications->X-ray image processing->Examine an X-ray with imageio",
    "numpy->NumPy Applications->X-ray image processing->Combine images into a multidimensional array to demonstrate progression",
    "numpy->NumPy Applications->X-ray image processing->Edge detection using the Laplacian-Gaussian, Gaussian gradient, Sobel, and Canny filters",
    "numpy->NumPy Applications->X-ray image processing->Edge detection using the Laplacian-Gaussian, Gaussian gradient, Sobel, and Canny filters->The Laplace filter with Gaussian second derivatives",
    "numpy->NumPy Applications->X-ray image processing->Edge detection using the Laplacian-Gaussian, Gaussian gradient, Sobel, and Canny filters->The Gaussian gradient magnitude method",
    "numpy->NumPy Applications->X-ray image processing->Edge detection using the Laplacian-Gaussian, Gaussian gradient, Sobel, and Canny filters->The Sobel-Feldman operator (the Sobel filter)",
    "numpy->NumPy Applications->X-ray image processing->Edge detection using the Laplacian-Gaussian, Gaussian gradient, Sobel, and Canny filters->The Canny filter",
    "numpy->NumPy Applications->X-ray image processing->Apply masks to X-rays with np.where()",
    "numpy->NumPy Applications->X-ray image processing->Compare the results",
    "numpy->NumPy Applications->X-ray image processing->Next steps",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->What you\u2019ll do:",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->What you\u2019ll learn:",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->What you\u2019ll need:",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->Solving equilibrium with Newton\u2019s second law",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->Solving Equilibrium as a sum of moments",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->Finding values with physical properties",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->Finding values with physical properties->Another Example",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->Wrapping up",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->Wrapping up->Additional Applications",
    "numpy->NumPy Applications->Determining Static Equilibrium in NumPy->Wrapping up->References",
    "numpy->NumPy Applications->Plotting Fractals",
    "numpy->NumPy Applications->Plotting Fractals->What you\u2019ll do",
    "numpy->NumPy Applications->Plotting Fractals->What you\u2019ll learn",
    "numpy->NumPy Applications->Plotting Fractals->What you\u2019ll need",
    "numpy->NumPy Applications->Plotting Fractals->Warmup",
    "numpy->NumPy Applications->Plotting Fractals->Julia set",
    "numpy->NumPy Applications->Plotting Fractals->Mandelbrot set",
    "numpy->NumPy Applications->Plotting Fractals->Generalizing the Julia set",
    "numpy->NumPy Applications->Plotting Fractals->Generalizing the Julia set->Newton Fractals",
    "numpy->NumPy Applications->Plotting Fractals->Creating your own fractals",
    "numpy->NumPy Applications->Plotting Fractals->In conclusion",
    "numpy->NumPy Applications->Plotting Fractals->On your own",
    "numpy->NumPy Applications->Plotting Fractals->Further reading",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->What you\u2019ll do",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->What you\u2019ll learn",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->What you\u2019ll need",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->The problem of air pollution",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Building the dataset",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Calculating the Air Quality Index",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Calculating the Air Quality Index->Moving averages",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Calculating the Air Quality Index->Sub-indices",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Calculating the Air Quality Index->Air quality indices",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Paired Student\u2019s t-test on the AQIs",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Paired Student\u2019s t-test on the AQIs->Sampling",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Paired Student\u2019s t-test on the AQIs->Defining the hypothesis",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Paired Student\u2019s t-test on the AQIs->Calculating the test statistics",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->What do the t and p values mean?",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->In practice\u2026",
    "numpy->NumPy Applications->Analyzing the impact of the lockdown on air quality in Delhi, India->Further reading",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Prerequisites",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Table of contents",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Table of contents->A note on RL and deep RL",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Table of contents->Deep RL glossary",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Set up Pong",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Preprocess frames (the observation)",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Create the policy (the neural network) and the forward pass",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Set up the update step (backpropagation)",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Define the discounted rewards (expected return) function",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Train the agent for a number of episodes",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Next steps",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Appendix->Notes on RL and deep RL",
    "numpy->Articles->Deep reinforcement learning with Pong from pixels->Appendix->How to set up video playback in your Jupyter notebook",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->Prerequisites",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->Table of contents",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->1. Data Collection",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->1. Data Collection->Collecting the IMDb reviews dataset",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->1. Data Collection->Collecting and loading the speech transcripts",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->2. Preprocess the datasets",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->Introduction to a Long Short Term Memory Network",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->Overview of the Model Architecture",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->Forward Propagation",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->But how do you obtain sentiment from the LSTM\u2019s output?",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->Backpropagation",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->Updating the Parameters",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->Training the Network",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->3. Build the Deep Learning Model\u00b6->Sentiment Analysis on the Speech Data",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->Looking at our Neural Network from an ethical perspective",
    "numpy->Articles->Sentiment Analysis on notable speeches of the last decade->Next Steps",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.2",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.2->Pandas output with set_output API",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.2->Interaction constraints in Histogram-based Gradient Boosting Trees",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.2->New and enhanced displays",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.2->Faster parser in",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.2->Experimental Array API support in",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.2->Improved efficiency of many estimators",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.1",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.1->Quantile loss in",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.1->get_feature_names_out Available in all Transformers",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.1->Grouping infrequent categories in OneHotEncoder",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.1->Performance improvements",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.1->MiniBatchNMF: an online version of NMF",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.1->BisectingKMeans: divide and cluster",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->Keyword and positional arguments",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->Spline Transformers",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->Quantile Regressor",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->Feature Names Support",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->A more flexible plotting API",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->Online One-Class SVM",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->Histogram-based Gradient Boosting Models are now stable",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 1.0->New documentation improvements",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->Successive Halving estimators for tuning hyper-parameters",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->Native support for categorical features in HistGradientBoosting estimators",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->Improved performances of HistGradientBoosting estimators",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->New self-training meta-estimator",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->New SequentialFeatureSelector transformer",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->New PolynomialCountSketch kernel approximation function",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->Individual Conditional Expectation plots",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->New Poisson splitting criterion for DecisionTreeRegressor",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.24->New documentation improvements",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.23",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.23->Generalized Linear Models, and Poisson loss for gradient boosting",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.23->Rich visual representation of estimators",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.23->Scalability and stability improvements to KMeans",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.23->Improvements to the histogram-based Gradient Boosting estimators",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.23->Sample-weight support for Lasso and ElasticNet",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->New plotting API",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->Stacking Classifier and Regressor",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->Permutation-based feature importance",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->Native support for missing values for gradient boosting",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->Precomputed sparse nearest neighbors graph",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->KNN Based Imputation",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->Tree pruning",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->Retrieve dataframes from OpenML",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->Checking scikit-learn compatibility of an estimator",
    "sklearn->Examples->Release Highlights->Release Highlights for scikit-learn 0.22->ROC AUC now supports multiclass classification",
    "sklearn->Examples->Biclustering->A demo of the Spectral Biclustering algorithm",
    "sklearn->Examples->Biclustering->A demo of the Spectral Co-Clustering algorithm",
    "sklearn->Examples->Biclustering->Biclustering documents with the Spectral Co-clustering algorithm",
    "sklearn->Examples->Calibration->Comparison of Calibration of Classifiers",
    "sklearn->Examples->Calibration->Comparison of Calibration of Classifiers->Dataset",
    "sklearn->Examples->Calibration->Comparison of Calibration of Classifiers->Calibration curves",
    "sklearn->Examples->Calibration->Comparison of Calibration of Classifiers->References",
    "sklearn->Examples->Calibration->Probability Calibration curves",
    "sklearn->Examples->Calibration->Probability Calibration curves->Dataset",
    "sklearn->Examples->Calibration->Probability Calibration curves->Calibration curves->Gaussian Naive Bayes",
    "sklearn->Examples->Calibration->Probability Calibration curves->Calibration curves->Linear support vector classifier",
    "sklearn->Examples->Calibration->Probability Calibration curves->Summary",
    "sklearn->Examples->Calibration->Probability Calibration curves->References",
    "sklearn->Examples->Calibration->Probability Calibration for 3-class classification",
    "sklearn->Examples->Calibration->Probability Calibration for 3-class classification->Data",
    "sklearn->Examples->Calibration->Probability Calibration for 3-class classification->Fitting and calibration",
    "sklearn->Examples->Calibration->Probability Calibration for 3-class classification->Compare probabilities",
    "sklearn->Examples->Calibration->Probability calibration of classifiers",
    "sklearn->Examples->Calibration->Probability calibration of classifiers->Generate synthetic dataset",
    "sklearn->Examples->Calibration->Probability calibration of classifiers->Gaussian Naive-Bayes",
    "sklearn->Examples->Calibration->Probability calibration of classifiers->Plot data and the predicted probabilities",
    "sklearn->Examples->Classification->Classifier comparison",
    "sklearn->Examples->Classification->Linear and Quadratic Discriminant Analysis with covariance ellipsoid",
    "sklearn->Examples->Classification->Linear and Quadratic Discriminant Analysis with covariance ellipsoid->Colormap",
    "sklearn->Examples->Classification->Linear and Quadratic Discriminant Analysis with covariance ellipsoid->Datasets generation functions",
    "sklearn->Examples->Classification->Linear and Quadratic Discriminant Analysis with covariance ellipsoid->Plot functions",
    "sklearn->Examples->Classification->Linear and Quadratic Discriminant Analysis with covariance ellipsoid->Plot",
    "sklearn->Examples->Classification->Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification",
    "sklearn->Examples->Classification->Plot classification probability",
    "sklearn->Examples->Classification->Recognizing hand-written digits",
    "sklearn->Examples->Classification->Recognizing hand-written digits->Digits dataset",
    "sklearn->Examples->Classification->Recognizing hand-written digits->Classification",
    "sklearn->Examples->Clustering->A demo of K-Means clustering on the handwritten digits data",
    "sklearn->Examples->Clustering->A demo of K-Means clustering on the handwritten digits data->Load the dataset",
    "sklearn->Examples->Clustering->A demo of K-Means clustering on the handwritten digits data->Define our evaluation benchmark",
    "sklearn->Examples->Clustering->A demo of K-Means clustering on the handwritten digits data->Run the benchmark",
    "sklearn->Examples->Clustering->A demo of K-Means clustering on the handwritten digits data->Visualize the results on PCA-reduced data",
    "sklearn->Examples->Clustering->A demo of structured Ward hierarchical clustering on an image of coins",
    "sklearn->Examples->Clustering->A demo of structured Ward hierarchical clustering on an image of coins->Generate data",
    "sklearn->Examples->Clustering->A demo of structured Ward hierarchical clustering on an image of coins->Define structure of the data",
    "sklearn->Examples->Clustering->A demo of structured Ward hierarchical clustering on an image of coins->Compute clustering",
    "sklearn->Examples->Clustering->A demo of structured Ward hierarchical clustering on an image of coins->Plot the results on an image",
    "sklearn->Examples->Clustering->A demo of the mean-shift clustering algorithm",
    "sklearn->Examples->Clustering->A demo of the mean-shift clustering algorithm->Generate sample data",
    "sklearn->Examples->Clustering->A demo of the mean-shift clustering algorithm->Compute clustering with MeanShift",
    "sklearn->Examples->Clustering->A demo of the mean-shift clustering algorithm->Plot result",
    "sklearn->Examples->Clustering->Adjustment for chance in clustering performance evaluation",
    "sklearn->Examples->Clustering->Adjustment for chance in clustering performance evaluation->Defining the list of metrics to evaluate",
    "sklearn->Examples->Clustering->Adjustment for chance in clustering performance evaluation->First experiment: fixed ground truth labels and growing number of clusters",
    "sklearn->Examples->Clustering->Adjustment for chance in clustering performance evaluation->Second experiment: varying number of classes and clusters",
    "sklearn->Examples->Clustering->Agglomerative clustering with and without structure",
    "sklearn->Examples->Clustering->Agglomerative clustering with different metrics",
    "sklearn->Examples->Clustering->An example of K-Means++ initialization",
    "sklearn->Examples->Clustering->Bisecting K-Means and Regular K-Means Performance Comparison",
    "sklearn->Examples->Clustering->Color Quantization using K-Means",
    "sklearn->Examples->Clustering->Compare BIRCH and MiniBatchKMeans",
    "sklearn->Examples->Clustering->Comparing different clustering algorithms on toy datasets",
    "sklearn->Examples->Clustering->Comparing different hierarchical linkage methods on toy datasets",
    "sklearn->Examples->Clustering->Comparison of the K-Means and MiniBatchKMeans clustering algorithms",
    "sklearn->Examples->Clustering->Comparison of the K-Means and MiniBatchKMeans clustering algorithms->Generate the data",
    "sklearn->Examples->Clustering->Comparison of the K-Means and MiniBatchKMeans clustering algorithms->Compute clustering with KMeans",
    "sklearn->Examples->Clustering->Comparison of the K-Means and MiniBatchKMeans clustering algorithms->Compute clustering with MiniBatchKMeans",
    "sklearn->Examples->Clustering->Comparison of the K-Means and MiniBatchKMeans clustering algorithms->Establishing parity between clusters",
    "sklearn->Examples->Clustering->Comparison of the K-Means and MiniBatchKMeans clustering algorithms->Plotting the results",
    "sklearn->Examples->Clustering->Demo of DBSCAN clustering algorithm",
    "sklearn->Examples->Clustering->Demo of DBSCAN clustering algorithm->Data generation",
    "sklearn->Examples->Clustering->Demo of DBSCAN clustering algorithm->Compute DBSCAN",
    "sklearn->Examples->Clustering->Demo of DBSCAN clustering algorithm->Plot results",
    "sklearn->Examples->Clustering->Demo of OPTICS clustering algorithm",
    "sklearn->Examples->Clustering->Demo of affinity propagation clustering algorithm",
    "sklearn->Examples->Clustering->Demo of affinity propagation clustering algorithm->Generate sample data",
    "sklearn->Examples->Clustering->Demo of affinity propagation clustering algorithm->Compute Affinity Propagation",
    "sklearn->Examples->Clustering->Demo of affinity propagation clustering algorithm->Plot result",
    "sklearn->Examples->Clustering->Demonstration of k-means assumptions",
    "sklearn->Examples->Clustering->Demonstration of k-means assumptions->Data generation",
    "sklearn->Examples->Clustering->Demonstration of k-means assumptions->Fit models and plot results",
    "sklearn->Examples->Clustering->Demonstration of k-means assumptions->Possible solutions",
    "sklearn->Examples->Clustering->Demonstration of k-means assumptions->Final remarks",
    "sklearn->Examples->Clustering->Empirical evaluation of the impact of k-means initialization",
    "sklearn->Examples->Clustering->Feature agglomeration",
    "sklearn->Examples->Clustering->Feature agglomeration vs. univariate selection",
    "sklearn->Examples->Clustering->Hierarchical clustering: structured vs unstructured ward",
    "sklearn->Examples->Clustering->Hierarchical clustering: structured vs unstructured ward->Generate data",
    "sklearn->Examples->Clustering->Hierarchical clustering: structured vs unstructured ward->Compute clustering",
    "sklearn->Examples->Clustering->Hierarchical clustering: structured vs unstructured ward->Plot result",
    "sklearn->Examples->Clustering->Hierarchical clustering: structured vs unstructured ward->We are defining k-Nearest Neighbors with 10 neighbors",
    "sklearn->Examples->Clustering->Inductive Clustering",
    "sklearn->Examples->Clustering->K-means Clustering",
    "sklearn->Examples->Clustering->Online learning of a dictionary of parts of faces",
    "sklearn->Examples->Clustering->Online learning of a dictionary of parts of faces->Load the data",
    "sklearn->Examples->Clustering->Online learning of a dictionary of parts of faces->Learn the dictionary of images",
    "sklearn->Examples->Clustering->Online learning of a dictionary of parts of faces->Plot the results",
    "sklearn->Examples->Clustering->Plot Hierarchical Clustering Dendrogram",
    "sklearn->Examples->Clustering->Segmenting the picture of greek coins in regions",
    "sklearn->Examples->Clustering->Selecting the number of clusters with silhouette analysis on KMeans clustering",
    "sklearn->Examples->Clustering->Spectral clustering for image segmentation",
    "sklearn->Examples->Clustering->Spectral clustering for image segmentation->Generate the data",
    "sklearn->Examples->Clustering->Spectral clustering for image segmentation->Plotting four circles",
    "sklearn->Examples->Clustering->Spectral clustering for image segmentation->Plotting two circles",
    "sklearn->Examples->Clustering->Various Agglomerative Clustering on a 2D embedding of digits",
    "sklearn->Examples->Clustering->Vector Quantization Example",
    "sklearn->Examples->Clustering->Vector Quantization Example->Original image",
    "sklearn->Examples->Clustering->Vector Quantization Example->Compression via vector quantization",
    "sklearn->Examples->Clustering->Vector Quantization Example->Compression via vector quantization->Encoding strategy",
    "sklearn->Examples->Clustering->Vector Quantization Example->Compression via vector quantization->Memory footprint",
    "sklearn->Examples->Covariance estimation->Ledoit-Wolf vs OAS estimation",
    "sklearn->Examples->Covariance estimation->Robust covariance estimation and Mahalanobis distances relevance",
    "sklearn->Examples->Covariance estimation->Robust covariance estimation and Mahalanobis distances relevance->Generate data",
    "sklearn->Examples->Covariance estimation->Robust covariance estimation and Mahalanobis distances relevance->Comparison of results",
    "sklearn->Examples->Covariance estimation->Robust vs Empirical covariance estimate",
    "sklearn->Examples->Covariance estimation->Robust vs Empirical covariance estimate->Minimum Covariance Determinant Estimator",
    "sklearn->Examples->Covariance estimation->Robust vs Empirical covariance estimate->Evaluation",
    "sklearn->Examples->Covariance estimation->Robust vs Empirical covariance estimate->References",
    "sklearn->Examples->Covariance estimation->Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood",
    "sklearn->Examples->Covariance estimation->Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood->Generate sample data",
    "sklearn->Examples->Covariance estimation->Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood->Compute the likelihood on test data",
    "sklearn->Examples->Covariance estimation->Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood->Compare different approaches to setting the regularization parameter",
    "sklearn->Examples->Covariance estimation->Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood->Plot results",
    "sklearn->Examples->Covariance estimation->Sparse inverse covariance estimation",
    "sklearn->Examples->Covariance estimation->Sparse inverse covariance estimation->Generate the data",
    "sklearn->Examples->Covariance estimation->Sparse inverse covariance estimation->Estimate the covariance",
    "sklearn->Examples->Covariance estimation->Sparse inverse covariance estimation->Plot the results",
    "sklearn->Examples->Cross decomposition->Compare cross decomposition methods",
    "sklearn->Examples->Cross decomposition->Compare cross decomposition methods->Dataset based latent variables model",
    "sklearn->Examples->Cross decomposition->Compare cross decomposition methods->Canonical (symmetric) PLS->Transform data",
    "sklearn->Examples->Cross decomposition->Compare cross decomposition methods->Canonical (symmetric) PLS->Scatter plot of scores",
    "sklearn->Examples->Cross decomposition->Compare cross decomposition methods->PLS regression, with multivariate response, a.k.a. PLS2",
    "sklearn->Examples->Cross decomposition->Compare cross decomposition methods->PLS regression, with univariate response, a.k.a. PLS1",
    "sklearn->Examples->Cross decomposition->Compare cross decomposition methods->CCA (PLS mode B with symmetric deflation)",
    "sklearn->Examples->Cross decomposition->Principal Component Regression vs Partial Least Squares Regression",
    "sklearn->Examples->Cross decomposition->Principal Component Regression vs Partial Least Squares Regression->The data",
    "sklearn->Examples->Cross decomposition->Principal Component Regression vs Partial Least Squares Regression->Projection on one component and predictive power",
    "sklearn->Examples->Dataset examples->Plot randomly generated classification dataset",
    "sklearn->Examples->Dataset examples->Plot randomly generated multilabel dataset",
    "sklearn->Examples->Dataset examples->The Digit Dataset",
    "sklearn->Examples->Dataset examples->The Iris Dataset",
    "sklearn->Examples->Decision Trees->Decision Tree Regression",
    "sklearn->Examples->Decision Trees->Multi-output Decision Tree Regression",
    "sklearn->Examples->Decision Trees->Plot the decision surface of decision trees trained on the iris dataset",
    "sklearn->Examples->Decision Trees->Post pruning decision trees with cost complexity pruning",
    "sklearn->Examples->Decision Trees->Post pruning decision trees with cost complexity pruning->Total impurity of leaves vs effective alphas of pruned tree",
    "sklearn->Examples->Decision Trees->Post pruning decision trees with cost complexity pruning->Accuracy vs alpha for training and testing sets",
    "sklearn->Examples->Decision Trees->Understanding the decision tree structure",
    "sklearn->Examples->Decision Trees->Understanding the decision tree structure->Train tree classifier",
    "sklearn->Examples->Decision Trees->Understanding the decision tree structure->Tree structure",
    "sklearn->Examples->Decision Trees->Understanding the decision tree structure->Decision path",
    "sklearn->Examples->Decomposition->Beta-divergence loss functions",
    "sklearn->Examples->Decomposition->Blind source separation using FastICA",
    "sklearn->Examples->Decomposition->Blind source separation using FastICA->Generate sample data",
    "sklearn->Examples->Decomposition->Blind source separation using FastICA->Fit ICA and PCA models",
    "sklearn->Examples->Decomposition->Blind source separation using FastICA->Plot results",
    "sklearn->Examples->Decomposition->Comparison of LDA and PCA 2D projection of Iris dataset",
    "sklearn->Examples->Decomposition->Faces dataset decompositions",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Dataset preparation",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition->Eigenfaces - PCA using randomized SVD",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition->Non-negative components - NMF",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition->Independent components - FastICA",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition->Sparse components - MiniBatchSparsePCA",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition->Dictionary learning",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition->Cluster centers - MiniBatchKMeans",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition->Factor Analysis components - FA",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition: Dictionary learning",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition: Dictionary learning->Dictionary learning - positive dictionary",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition: Dictionary learning->Dictionary learning - positive code",
    "sklearn->Examples->Decomposition->Faces dataset decompositions->Decomposition: Dictionary learning->Dictionary learning - positive dictionary & code",
    "sklearn->Examples->Decomposition->Factor Analysis (with rotation) to visualize patterns",
    "sklearn->Examples->Decomposition->FastICA on 2D point clouds",
    "sklearn->Examples->Decomposition->FastICA on 2D point clouds->Generate sample data",
    "sklearn->Examples->Decomposition->FastICA on 2D point clouds->Plot results",
    "sklearn->Examples->Decomposition->Image denoising using dictionary learning",
    "sklearn->Examples->Decomposition->Image denoising using dictionary learning->Generate distorted image",
    "sklearn->Examples->Decomposition->Image denoising using dictionary learning->Display the distorted image",
    "sklearn->Examples->Decomposition->Image denoising using dictionary learning->Extract reference patches",
    "sklearn->Examples->Decomposition->Image denoising using dictionary learning->Learn the dictionary from reference patches",
    "sklearn->Examples->Decomposition->Image denoising using dictionary learning->Extract noisy patches and reconstruct them using the dictionary",
    "sklearn->Examples->Decomposition->Incremental PCA",
    "sklearn->Examples->Decomposition->Kernel PCA",
    "sklearn->Examples->Decomposition->Kernel PCA->Projecting data: PCA vs. KernelPCA",
    "sklearn->Examples->Decomposition->Kernel PCA->Projecting into the original feature space",
    "sklearn->Examples->Decomposition->Model selection with Probabilistic PCA and Factor Analysis (FA)",
    "sklearn->Examples->Decomposition->Model selection with Probabilistic PCA and Factor Analysis (FA)->Create the data",
    "sklearn->Examples->Decomposition->Model selection with Probabilistic PCA and Factor Analysis (FA)->Fit the models",
    "sklearn->Examples->Decomposition->PCA example with Iris Data-set",
    "sklearn->Examples->Decomposition->Principal components analysis (PCA)",
    "sklearn->Examples->Decomposition->Principal components analysis (PCA)->Create the data",
    "sklearn->Examples->Decomposition->Principal components analysis (PCA)->Plot the figures",
    "sklearn->Examples->Decomposition->Sparse coding with a precomputed dictionary",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting->Load Ames Housing dataset",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting->Gradient boosting estimator with dropped categorical features",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting->Gradient boosting estimator with one-hot encoding",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting->Gradient boosting estimator with ordinal encoding",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting->Gradient boosting estimator with native categorical support",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting->Model comparison",
    "sklearn->Examples->Ensemble methods->Categorical Feature Support in Gradient Boosting->Limiting the number of splits",
    "sklearn->Examples->Ensemble methods->Combine predictors using stacking",
    "sklearn->Examples->Ensemble methods->Combine predictors using stacking->Download the dataset",
    "sklearn->Examples->Ensemble methods->Combine predictors using stacking->Make pipeline to preprocess the data",
    "sklearn->Examples->Ensemble methods->Combine predictors using stacking->Stack of predictors on a single data set",
    "sklearn->Examples->Ensemble methods->Combine predictors using stacking->Measure and plot the results",
    "sklearn->Examples->Ensemble methods->Comparing random forests and the multi-output meta estimator",
    "sklearn->Examples->Ensemble methods->Decision Tree Regression with AdaBoost",
    "sklearn->Examples->Ensemble methods->Decision Tree Regression with AdaBoost->Preparing the data",
    "sklearn->Examples->Ensemble methods->Decision Tree Regression with AdaBoost->Training and prediction with DecisionTree and AdaBoost Regressors",
    "sklearn->Examples->Ensemble methods->Decision Tree Regression with AdaBoost->Plotting the results",
    "sklearn->Examples->Ensemble methods->Discrete versus Real AdaBoost",
    "sklearn->Examples->Ensemble methods->Discrete versus Real AdaBoost->Preparing the data and baseline models",
    "sklearn->Examples->Ensemble methods->Discrete versus Real AdaBoost->Adaboost with discrete SAMME and real SAMME.R",
    "sklearn->Examples->Ensemble methods->Discrete versus Real AdaBoost->Plotting the results",
    "sklearn->Examples->Ensemble methods->Discrete versus Real AdaBoost->Concluding remarks",
    "sklearn->Examples->Ensemble methods->Early stopping of Gradient Boosting",
    "sklearn->Examples->Ensemble methods->Early stopping of Gradient Boosting->Compare scores with and without early stopping",
    "sklearn->Examples->Ensemble methods->Early stopping of Gradient Boosting->Compare fit times with and without early stopping",
    "sklearn->Examples->Ensemble methods->Feature importances with a forest of trees",
    "sklearn->Examples->Ensemble methods->Feature importances with a forest of trees->Data generation and model fitting",
    "sklearn->Examples->Ensemble methods->Feature importances with a forest of trees->Feature importance based on mean decrease in impurity",
    "sklearn->Examples->Ensemble methods->Feature importances with a forest of trees->Feature importance based on feature permutation",
    "sklearn->Examples->Ensemble methods->Feature transformations with ensembles of trees",
    "sklearn->Examples->Ensemble methods->Gradient Boosting Out-of-Bag estimates",
    "sklearn->Examples->Ensemble methods->Gradient Boosting regression",
    "sklearn->Examples->Ensemble methods->Gradient Boosting regression->Load the data",
    "sklearn->Examples->Ensemble methods->Gradient Boosting regression->Data preprocessing",
    "sklearn->Examples->Ensemble methods->Gradient Boosting regression->Fit regression model",
    "sklearn->Examples->Ensemble methods->Gradient Boosting regression->Plot training deviance",
    "sklearn->Examples->Ensemble methods->Gradient Boosting regression->Plot feature importance",
    "sklearn->Examples->Ensemble methods->Gradient Boosting regularization",
    "sklearn->Examples->Ensemble methods->Hashing feature transformation using Totally Random Trees",
    "sklearn->Examples->Ensemble methods->IsolationForest example",
    "sklearn->Examples->Ensemble methods->IsolationForest example->Data generation",
    "sklearn->Examples->Ensemble methods->IsolationForest example->Training of the model",
    "sklearn->Examples->Ensemble methods->IsolationForest example->Plot discrete decision boundary",
    "sklearn->Examples->Ensemble methods->IsolationForest example->Plot path length decision boundary",
    "sklearn->Examples->Ensemble methods->Monotonic Constraints",
    "sklearn->Examples->Ensemble methods->Monotonic Constraints->Using feature names to specify monotonic constraints",
    "sklearn->Examples->Ensemble methods->Multi-class AdaBoosted Decision Trees",
    "sklearn->Examples->Ensemble methods->OOB Errors for Random Forests",
    "sklearn->Examples->Ensemble methods->Pixel importances with a parallel forest of trees",
    "sklearn->Examples->Ensemble methods->Pixel importances with a parallel forest of trees->Loading the data and model fitting",
    "sklearn->Examples->Ensemble methods->Pixel importances with a parallel forest of trees->Feature importance based on mean decrease in impurity (MDI)",
    "sklearn->Examples->Ensemble methods->Plot class probabilities calculated by the VotingClassifier",
    "sklearn->Examples->Ensemble methods->Plot individual and voting regression predictions",
    "sklearn->Examples->Ensemble methods->Plot individual and voting regression predictions->Training classifiers",
    "sklearn->Examples->Ensemble methods->Plot individual and voting regression predictions->Making predictions",
    "sklearn->Examples->Ensemble methods->Plot individual and voting regression predictions->Plot the results",
    "sklearn->Examples->Ensemble methods->Plot the decision boundaries of a VotingClassifier",
    "sklearn->Examples->Ensemble methods->Plot the decision surfaces of ensembles of trees on the iris dataset",
    "sklearn->Examples->Ensemble methods->Prediction Intervals for Gradient Boosting Regression",
    "sklearn->Examples->Ensemble methods->Prediction Intervals for Gradient Boosting Regression->Fitting non-linear quantile and least squares regressors",
    "sklearn->Examples->Ensemble methods->Prediction Intervals for Gradient Boosting Regression->Analysis of the error metrics",
    "sklearn->Examples->Ensemble methods->Prediction Intervals for Gradient Boosting Regression->Calibration of the confidence interval",
    "sklearn->Examples->Ensemble methods->Prediction Intervals for Gradient Boosting Regression->Tuning the hyper-parameters of the quantile regressors",
    "sklearn->Examples->Ensemble methods->Single estimator versus bagging: bias-variance decomposition",
    "sklearn->Examples->Ensemble methods->Single estimator versus bagging: bias-variance decomposition->References",
    "sklearn->Examples->Ensemble methods->Two-class AdaBoost",
    "sklearn->Examples->Examples based on real world datasets->Compressive sensing: tomography reconstruction with L1 prior (Lasso)",
    "sklearn->Examples->Examples based on real world datasets->Faces recognition example using eigenfaces and SVMs",
    "sklearn->Examples->Examples based on real world datasets->Image denoising using kernel PCA",
    "sklearn->Examples->Examples based on real world datasets->Image denoising using kernel PCA->Load the dataset via OpenML",
    "sklearn->Examples->Examples based on real world datasets->Image denoising using kernel PCA->Learn the PCA basis",
    "sklearn->Examples->Examples based on real world datasets->Image denoising using kernel PCA->Reconstruct and denoise test images",
    "sklearn->Examples->Examples based on real world datasets->Libsvm GUI",
    "sklearn->Examples->Examples based on real world datasets->Model Complexity Influence",
    "sklearn->Examples->Examples based on real world datasets->Model Complexity Influence->Load the data",
    "sklearn->Examples->Examples based on real world datasets->Model Complexity Influence->Benchmark influence",
    "sklearn->Examples->Examples based on real world datasets->Model Complexity Influence->Choose parameters",
    "sklearn->Examples->Examples based on real world datasets->Model Complexity Influence->Run the code and plot the results",
    "sklearn->Examples->Examples based on real world datasets->Model Complexity Influence->Conclusion",
    "sklearn->Examples->Examples based on real world datasets->Out-of-core classification of text documents",
    "sklearn->Examples->Examples based on real world datasets->Out-of-core classification of text documents->Reuters Dataset related routines",
    "sklearn->Examples->Examples based on real world datasets->Out-of-core classification of text documents->Main",
    "sklearn->Examples->Examples based on real world datasets->Out-of-core classification of text documents->Plot results",
    "sklearn->Examples->Examples based on real world datasets->Outlier detection on a real data set",
    "sklearn->Examples->Examples based on real world datasets->Outlier detection on a real data set->First example",
    "sklearn->Examples->Examples based on real world datasets->Outlier detection on a real data set->Second example",
    "sklearn->Examples->Examples based on real world datasets->Prediction Latency",
    "sklearn->Examples->Examples based on real world datasets->Prediction Latency->Benchmark and plot helper functions",
    "sklearn->Examples->Examples based on real world datasets->Prediction Latency->Benchmark bulk/atomic prediction speed for various regressors",
    "sklearn->Examples->Examples based on real world datasets->Prediction Latency->Benchmark n_features influence on prediction speed",
    "sklearn->Examples->Examples based on real world datasets->Prediction Latency->Benchmark throughput",
    "sklearn->Examples->Examples based on real world datasets->Species distribution modeling",
    "sklearn->Examples->Examples based on real world datasets->Species distribution modeling->References",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Data exploration on the Bike Sharing Demand dataset",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Time-based cross-validation",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Gradient Boosting",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Naive linear regression",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Time-steps as categories",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Trigonometric features",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Periodic spline features",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Qualitative analysis of the impact of features on linear model predictions",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Modeling pairwise interactions with splines and polynomial features",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Modeling non-linear feature interactions with kernels",
    "sklearn->Examples->Examples based on real world datasets->Time-related feature engineering->Concluding remarks",
    "sklearn->Examples->Examples based on real world datasets->Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation",
    "sklearn->Examples->Examples based on real world datasets->Visualizing the stock market structure",
    "sklearn->Examples->Examples based on real world datasets->Visualizing the stock market structure->Retrieve the data from Internet",
    "sklearn->Examples->Examples based on real world datasets->Visualizing the stock market structure->Learning a graph structure",
    "sklearn->Examples->Examples based on real world datasets->Visualizing the stock market structure->Clustering using affinity propagation",
    "sklearn->Examples->Examples based on real world datasets->Visualizing the stock market structure->Embedding in 2D space",
    "sklearn->Examples->Examples based on real world datasets->Visualizing the stock market structure->Visualization",
    "sklearn->Examples->Examples based on real world datasets->Wikipedia principal eigenvector",
    "sklearn->Examples->Examples based on real world datasets->Wikipedia principal eigenvector->Download data, if not already on disk",
    "sklearn->Examples->Examples based on real world datasets->Wikipedia principal eigenvector->Loading the redirect files",
    "sklearn->Examples->Examples based on real world datasets->Wikipedia principal eigenvector->Computing the Adjacency matrix",
    "sklearn->Examples->Examples based on real world datasets->Wikipedia principal eigenvector->Computing Principal Singular Vector using Randomized SVD",
    "sklearn->Examples->Examples based on real world datasets->Wikipedia principal eigenvector->Computing Centrality scores",
    "sklearn->Examples->Feature Selection->Comparison of F-test and mutual information",
    "sklearn->Examples->Feature Selection->Model-based and sequential feature selection",
    "sklearn->Examples->Feature Selection->Model-based and sequential feature selection->Loading the data",
    "sklearn->Examples->Feature Selection->Model-based and sequential feature selection->Feature importance from coefficients",
    "sklearn->Examples->Feature Selection->Model-based and sequential feature selection->Selecting features based on importance",
    "sklearn->Examples->Feature Selection->Model-based and sequential feature selection->Selecting features with Sequential Feature Selection",
    "sklearn->Examples->Feature Selection->Model-based and sequential feature selection->Discussion",
    "sklearn->Examples->Feature Selection->Pipeline ANOVA SVM",
    "sklearn->Examples->Feature Selection->Recursive feature elimination",
    "sklearn->Examples->Feature Selection->Recursive feature elimination with cross-validation",
    "sklearn->Examples->Feature Selection->Recursive feature elimination with cross-validation->Data generation",
    "sklearn->Examples->Feature Selection->Recursive feature elimination with cross-validation->Model training and selection",
    "sklearn->Examples->Feature Selection->Recursive feature elimination with cross-validation->Plot number of features VS. cross-validation scores",
    "sklearn->Examples->Feature Selection->Univariate Feature Selection",
    "sklearn->Examples->Feature Selection->Univariate Feature Selection->Generate sample data",
    "sklearn->Examples->Feature Selection->Univariate Feature Selection->Univariate feature selection",
    "sklearn->Examples->Feature Selection->Univariate Feature Selection->Compare with SVMs",
    "sklearn->Examples->Gaussian Mixture Models->Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture",
    "sklearn->Examples->Gaussian Mixture Models->Density Estimation for a Gaussian mixture",
    "sklearn->Examples->Gaussian Mixture Models->GMM Initialization Methods",
    "sklearn->Examples->Gaussian Mixture Models->GMM covariances",
    "sklearn->Examples->Gaussian Mixture Models->Gaussian Mixture Model Ellipsoids",
    "sklearn->Examples->Gaussian Mixture Models->Gaussian Mixture Model Selection",
    "sklearn->Examples->Gaussian Mixture Models->Gaussian Mixture Model Selection->Data generation",
    "sklearn->Examples->Gaussian Mixture Models->Gaussian Mixture Model Selection->Model training and selection",
    "sklearn->Examples->Gaussian Mixture Models->Gaussian Mixture Model Selection->Plot the BIC scores",
    "sklearn->Examples->Gaussian Mixture Models->Gaussian Mixture Model Selection->Plot the best model",
    "sklearn->Examples->Gaussian Mixture Models->Gaussian Mixture Model Sine Curve",
    "sklearn->Examples->Gaussian Process for Machine Learning->Comparison of kernel ridge and Gaussian process regression",
    "sklearn->Examples->Gaussian Process for Machine Learning->Comparison of kernel ridge and Gaussian process regression->Generating a dataset",
    "sklearn->Examples->Gaussian Process for Machine Learning->Comparison of kernel ridge and Gaussian process regression->Limitations of a simple linear model",
    "sklearn->Examples->Gaussian Process for Machine Learning->Comparison of kernel ridge and Gaussian process regression->Kernel methods: kernel ridge and Gaussian process->Kernel ridge",
    "sklearn->Examples->Gaussian Process for Machine Learning->Comparison of kernel ridge and Gaussian process regression->Kernel methods: kernel ridge and Gaussian process->Gaussian process regression",
    "sklearn->Examples->Gaussian Process for Machine Learning->Comparison of kernel ridge and Gaussian process regression->Final conclusion",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian Processes regression: basic introductory example",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian Processes regression: basic introductory example->Dataset generation",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian Processes regression: basic introductory example->Example with noise-free target",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian Processes regression: basic introductory example->Example with noisy targets",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process classification (GPC) on iris dataset",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) on Mauna Loa CO2 data",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) on Mauna Loa CO2 data->Build the dataset",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) on Mauna Loa CO2 data->Design the proper kernel",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) on Mauna Loa CO2 data->Model fitting and extrapolation",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) on Mauna Loa CO2 data->Interpretation of kernel hyperparameters",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) with noise-level estimation",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) with noise-level estimation->Data generation",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian process regression (GPR) with noise-level estimation->Optimisation of kernel hyperparameters in GPR",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian processes on discrete data structures",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian processes on discrete data structures->Sequence similarity matrix under the kernel",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian processes on discrete data structures->Regression",
    "sklearn->Examples->Gaussian Process for Machine Learning->Gaussian processes on discrete data structures->Classification",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of Gaussian process classification (GPC) on the XOR dataset",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Helper function",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Dataset and Gaussian process generation",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Kernel cookbook",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Kernel cookbook->Radial Basis Function kernel",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Kernel cookbook->Rational Quadradtic kernel",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Kernel cookbook->Exp-Sine-Squared kernel",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Kernel cookbook->Dot-product kernel",
    "sklearn->Examples->Gaussian Process for Machine Learning->Illustration of prior and posterior Gaussian process for different kernels->Kernel cookbook->Mat\u00e9rn kernel",
    "sklearn->Examples->Gaussian Process for Machine Learning->Iso-probability lines for Gaussian Processes classification (GPC)",
    "sklearn->Examples->Gaussian Process for Machine Learning->Probabilistic predictions with Gaussian process classification (GPC)",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors->Models robustness to recover the ground truth weights->Generate synthetic dataset",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors->Models robustness to recover the ground truth weights->Fit the regressors",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors->Models robustness to recover the ground truth weights->Plot the true and estimated coefficients",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors->Models robustness to recover the ground truth weights->Plot the marginal log-likelihood",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors->Bayesian regressions with polynomial feature expansion->Generate synthetic dataset",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors->Bayesian regressions with polynomial feature expansion->Fit the regressors",
    "sklearn->Examples->Generalized Linear Models->Comparing Linear Bayesian Regressors->Bayesian regressions with polynomial feature expansion->Plotting polynomial regressions with std errors of the scores",
    "sklearn->Examples->Generalized Linear Models->Comparing various online solvers",
    "sklearn->Examples->Generalized Linear Models->Curve Fitting with Bayesian Ridge Regression",
    "sklearn->Examples->Generalized Linear Models->Curve Fitting with Bayesian Ridge Regression->Generate sinusoidal data with noise",
    "sklearn->Examples->Generalized Linear Models->Curve Fitting with Bayesian Ridge Regression->Fit by cubic polynomial",
    "sklearn->Examples->Generalized Linear Models->Curve Fitting with Bayesian Ridge Regression->Plot the true and predicted curves with log marginal likelihood (L)",
    "sklearn->Examples->Generalized Linear Models->Early stopping of Stochastic Gradient Descent",
    "sklearn->Examples->Generalized Linear Models->Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples",
    "sklearn->Examples->Generalized Linear Models->HuberRegressor vs Ridge on dataset with strong outliers",
    "sklearn->Examples->Generalized Linear Models->Joint feature selection with multi-task Lasso",
    "sklearn->Examples->Generalized Linear Models->Joint feature selection with multi-task Lasso->Generate data",
    "sklearn->Examples->Generalized Linear Models->Joint feature selection with multi-task Lasso->Fit models",
    "sklearn->Examples->Generalized Linear Models->Joint feature selection with multi-task Lasso->Plot support and time series",
    "sklearn->Examples->Generalized Linear Models->L1 Penalty and Sparsity in Logistic Regression",
    "sklearn->Examples->Generalized Linear Models->Lasso and Elastic Net",
    "sklearn->Examples->Generalized Linear Models->Lasso and Elastic Net for Sparse Signals",
    "sklearn->Examples->Generalized Linear Models->Lasso and Elastic Net for Sparse Signals->Data Generation",
    "sklearn->Examples->Generalized Linear Models->Lasso and Elastic Net for Sparse Signals->Lasso",
    "sklearn->Examples->Generalized Linear Models->Lasso and Elastic Net for Sparse Signals->ElasticNet",
    "sklearn->Examples->Generalized Linear Models->Lasso and Elastic Net for Sparse Signals->Plot",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection via information criteria",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation->Dataset",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation->Selecting Lasso via an information criterion",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation->Selecting Lasso via cross-validation",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation->Selecting Lasso via cross-validation->Lasso via coordinate descent",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation->Selecting Lasso via cross-validation->Lasso via least angle regression",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation->Selecting Lasso via cross-validation->Summary of cross-validation approach",
    "sklearn->Examples->Generalized Linear Models->Lasso model selection: AIC-BIC / cross-validation->Conclusion",
    "sklearn->Examples->Generalized Linear Models->Lasso on dense and sparse data",
    "sklearn->Examples->Generalized Linear Models->Lasso on dense and sparse data->Comparing the two Lasso implementations on Dense data",
    "sklearn->Examples->Generalized Linear Models->Lasso on dense and sparse data->Comparing the two Lasso implementations on Sparse data",
    "sklearn->Examples->Generalized Linear Models->Lasso path using LARS",
    "sklearn->Examples->Generalized Linear Models->Linear Regression Example",
    "sklearn->Examples->Generalized Linear Models->Logistic Regression 3-class Classifier",
    "sklearn->Examples->Generalized Linear Models->Logistic function",
    "sklearn->Examples->Generalized Linear Models->MNIST classification using multinomial logistic + L1",
    "sklearn->Examples->Generalized Linear Models->Multiclass sparse logistic regression on 20newgroups",
    "sklearn->Examples->Generalized Linear Models->Non-negative least squares",
    "sklearn->Examples->Generalized Linear Models->One-Class SVM versus One-Class SVM using Stochastic Gradient Descent",
    "sklearn->Examples->Generalized Linear Models->Ordinary Least Squares and Ridge Regression Variance",
    "sklearn->Examples->Generalized Linear Models->Orthogonal Matching Pursuit",
    "sklearn->Examples->Generalized Linear Models->Plot Ridge coefficients as a function of the L2 regularization",
    "sklearn->Examples->Generalized Linear Models->Plot Ridge coefficients as a function of the regularization",
    "sklearn->Examples->Generalized Linear Models->Plot Ridge coefficients as a function of the regularization->Compute paths",
    "sklearn->Examples->Generalized Linear Models->Plot Ridge coefficients as a function of the regularization->Display results",
    "sklearn->Examples->Generalized Linear Models->Plot multi-class SGD on the iris dataset",
    "sklearn->Examples->Generalized Linear Models->Plot multinomial and One-vs-Rest Logistic Regression",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss->The French Motor Third-Party Liability Claims dataset",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss->A constant prediction baseline",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss->(Generalized) linear models",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss->Gradient Boosting Regression Trees for Poisson regression",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss->Evaluation of the calibration of predictions",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss->Evaluation of the ranking power",
    "sklearn->Examples->Generalized Linear Models->Poisson regression and non-normal loss->Main takeaways",
    "sklearn->Examples->Generalized Linear Models->Polynomial and Spline interpolation",
    "sklearn->Examples->Generalized Linear Models->Polynomial and Spline interpolation->Periodic Splines",
    "sklearn->Examples->Generalized Linear Models->Quantile regression",
    "sklearn->Examples->Generalized Linear Models->Quantile regression->Dataset generation",
    "sklearn->Examples->Generalized Linear Models->Quantile regression->Fitting a QuantileRegressor",
    "sklearn->Examples->Generalized Linear Models->Quantile regression->Comparing QuantileRegressor and LinearRegression",
    "sklearn->Examples->Generalized Linear Models->Regularization path of L1- Logistic Regression",
    "sklearn->Examples->Generalized Linear Models->Regularization path of L1- Logistic Regression->Load data",
    "sklearn->Examples->Generalized Linear Models->Regularization path of L1- Logistic Regression->Compute regularization path",
    "sklearn->Examples->Generalized Linear Models->Regularization path of L1- Logistic Regression->Plot regularization path",
    "sklearn->Examples->Generalized Linear Models->Robust linear estimator fitting",
    "sklearn->Examples->Generalized Linear Models->Robust linear model estimation using RANSAC",
    "sklearn->Examples->Generalized Linear Models->SGD: Maximum margin separating hyperplane",
    "sklearn->Examples->Generalized Linear Models->SGD: Penalties",
    "sklearn->Examples->Generalized Linear Models->SGD: Weighted samples",
    "sklearn->Examples->Generalized Linear Models->SGD: convex loss functions",
    "sklearn->Examples->Generalized Linear Models->Sparsity Example: Fitting only features 1  and 2",
    "sklearn->Examples->Generalized Linear Models->Theil-Sen Regression",
    "sklearn->Examples->Generalized Linear Models->Theil-Sen Regression->Outliers only in the y direction",
    "sklearn->Examples->Generalized Linear Models->Theil-Sen Regression->Outliers in the X direction",
    "sklearn->Examples->Generalized Linear Models->Tweedie regression on insurance claims",
    "sklearn->Examples->Generalized Linear Models->Tweedie regression on insurance claims->Loading datasets, basic feature extraction and target definitions",
    "sklearn->Examples->Generalized Linear Models->Tweedie regression on insurance claims->Frequency model \u2013 Poisson distribution",
    "sklearn->Examples->Generalized Linear Models->Tweedie regression on insurance claims->Severity Model -  Gamma distribution",
    "sklearn->Examples->Generalized Linear Models->Tweedie regression on insurance claims->Pure Premium Modeling via a Product Model vs single TweedieRegressor",
    "sklearn->Examples->Inspection->Common pitfalls in the interpretation of coefficients of linear models",
    "sklearn->Examples->Inspection->Common pitfalls in the interpretation of coefficients of linear models->",
    "sklearn->Examples->Inspection->Failure of Machine Learning to infer causal effects",
    "sklearn->Examples->Inspection->Failure of Machine Learning to infer causal effects->The dataset: simulated hourly wages",
    "sklearn->Examples->Inspection->Failure of Machine Learning to infer causal effects->Description of the simulated data",
    "sklearn->Examples->Inspection->Failure of Machine Learning to infer causal effects->Income prediction with fully observed variables",
    "sklearn->Examples->Inspection->Failure of Machine Learning to infer causal effects->Income prediction with partial observations",
    "sklearn->Examples->Inspection->Failure of Machine Learning to infer causal effects->Lessons learned",
    "sklearn->Examples->Inspection->Partial Dependence and Individual Conditional Expectation Plots",
    "sklearn->Examples->Inspection->Partial Dependence and Individual Conditional Expectation Plots->Bike sharing dataset preprocessing",
    "sklearn->Examples->Inspection->Partial Dependence and Individual Conditional Expectation Plots->Preprocessor for machine-learning models",
    "sklearn->Examples->Inspection->Partial Dependence and Individual Conditional Expectation Plots->Preprocessor for machine-learning models->Preprocessor for the neural network model",
    "sklearn->Examples->Inspection->Partial Dependence and Individual Conditional Expectation Plots->Preprocessor for machine-learning models->Preprocessor for the gradient boosting model",
    "sklearn->Examples->Inspection->Partial Dependence and Individual Conditional Expectation Plots->1-way partial dependence with different models",
    "sklearn->Examples->Inspection->Partial Dependence and Individual Conditional Expectation Plots->2D interaction plots",
    "sklearn->Examples->Inspection->Permutation Importance vs Random Forest Feature Importance (MDI)",
    "sklearn->Examples->Inspection->Permutation Importance vs Random Forest Feature Importance (MDI)->Data Loading and Feature Engineering",
    "sklearn->Examples->Inspection->Permutation Importance vs Random Forest Feature Importance (MDI)->Accuracy of the Model",
    "sklearn->Examples->Inspection->Permutation Importance vs Random Forest Feature Importance (MDI)->Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)",
    "sklearn->Examples->Inspection->Permutation Importance with Multicollinear or Correlated Features",
    "sklearn->Examples->Inspection->Permutation Importance with Multicollinear or Correlated Features->Random Forest Feature Importance on Breast Cancer Data",
    "sklearn->Examples->Inspection->Permutation Importance with Multicollinear or Correlated Features->Handling Multicollinear Features",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Preparing the data",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Partitioning the data",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Feature normalization",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Establishing a baseline model",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Establishing the kernel approximation model",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Establishing the kernelized SVM model",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Comparing the results",
    "sklearn->Examples->Kernel Approximation->Scalable learning with polynomial kernel approximation->Comparing the results->References",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods->Dataset preparation",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods->Define algorithms for the manifold learning",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods->Define algorithms for the manifold learning->Locally Linear Embeddings",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods->Define algorithms for the manifold learning->Isomap Embedding",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods->Define algorithms for the manifold learning->Multidimensional scaling",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods->Define algorithms for the manifold learning->Spectral embedding for non-linear dimensionality reduction",
    "sklearn->Examples->Manifold learning->Comparison of Manifold Learning methods->Define algorithms for the manifold learning->T-distributed Stochastic Neighbor Embedding",
    "sklearn->Examples->Manifold learning->Manifold Learning methods on a severed sphere",
    "sklearn->Examples->Manifold learning->Manifold learning on handwritten digits: Locally Linear Embedding, Isomap...",
    "sklearn->Examples->Manifold learning->Multi-dimensional scaling",
    "sklearn->Examples->Manifold learning->Swiss Roll And Swiss-Hole Reduction",
    "sklearn->Examples->Manifold learning->Swiss Roll And Swiss-Hole Reduction->Swiss Roll",
    "sklearn->Examples->Manifold learning->Swiss Roll And Swiss-Hole Reduction->Swiss-Hole",
    "sklearn->Examples->Manifold learning->Swiss Roll And Swiss-Hole Reduction->Concluding remarks",
    "sklearn->Examples->Manifold learning->t-SNE: The effect of various perplexity values on the shape",
    "sklearn->Examples->Miscellaneous->Advanced Plotting With Partial Dependence",
    "sklearn->Examples->Miscellaneous->Advanced Plotting With Partial Dependence->Train models on the diabetes dataset",
    "sklearn->Examples->Miscellaneous->Advanced Plotting With Partial Dependence->Plotting partial dependence for two features",
    "sklearn->Examples->Miscellaneous->Advanced Plotting With Partial Dependence->Plotting partial dependence of the two models together",
    "sklearn->Examples->Miscellaneous->Advanced Plotting With Partial Dependence->Plotting partial dependence for one feature",
    "sklearn->Examples->Miscellaneous->Comparing anomaly detection algorithms for outlier detection on toy datasets",
    "sklearn->Examples->Miscellaneous->Comparison of kernel ridge regression and SVR",
    "sklearn->Examples->Miscellaneous->Comparison of kernel ridge regression and SVR->Generate sample data",
    "sklearn->Examples->Miscellaneous->Comparison of kernel ridge regression and SVR->Construct the kernel-based regression models",
    "sklearn->Examples->Miscellaneous->Comparison of kernel ridge regression and SVR->Compare times of SVR and Kernel Ridge Regression",
    "sklearn->Examples->Miscellaneous->Comparison of kernel ridge regression and SVR->Look at the results",
    "sklearn->Examples->Miscellaneous->Comparison of kernel ridge regression and SVR->Visualize training and prediction times",
    "sklearn->Examples->Miscellaneous->Comparison of kernel ridge regression and SVR->Visualize the learning curves",
    "sklearn->Examples->Miscellaneous->Displaying Pipelines",
    "sklearn->Examples->Miscellaneous->Displaying Pipelines->Displaying a Pipeline with a Preprocessing Step and Classifier",
    "sklearn->Examples->Miscellaneous->Displaying Pipelines->Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier",
    "sklearn->Examples->Miscellaneous->Displaying Pipelines->Displaying a Pipeline and Dimensionality Reduction and Classifier",
    "sklearn->Examples->Miscellaneous->Displaying Pipelines->Displaying a Complex Pipeline Chaining a Column Transformer",
    "sklearn->Examples->Miscellaneous->Displaying Pipelines->Displaying a Grid Search over a Pipeline with a Classifier",
    "sklearn->Examples->Miscellaneous->Displaying estimators and complex pipelines",
    "sklearn->Examples->Miscellaneous->Displaying estimators and complex pipelines->Compact text representation",
    "sklearn->Examples->Miscellaneous->Displaying estimators and complex pipelines->Rich HTML representation",
    "sklearn->Examples->Miscellaneous->Evaluation of outlier detection estimators",
    "sklearn->Examples->Miscellaneous->Evaluation of outlier detection estimators->Define a data preprocessing function",
    "sklearn->Examples->Miscellaneous->Evaluation of outlier detection estimators->Define an outlier prediction function",
    "sklearn->Examples->Miscellaneous->Evaluation of outlier detection estimators->Plot and interpret results",
    "sklearn->Examples->Miscellaneous->Explicit feature map approximation for RBF kernels",
    "sklearn->Examples->Miscellaneous->Explicit feature map approximation for RBF kernels->Python package and dataset imports, load dataset",
    "sklearn->Examples->Miscellaneous->Explicit feature map approximation for RBF kernels->Timing and accuracy plots",
    "sklearn->Examples->Miscellaneous->Explicit feature map approximation for RBF kernels->Decision Surfaces of RBF Kernel SVM and Linear SVM",
    "sklearn->Examples->Miscellaneous->Face completion with a multi-output estimators",
    "sklearn->Examples->Miscellaneous->Introducing the `set_output` API",
    "sklearn->Examples->Miscellaneous->Isotonic Regression",
    "sklearn->Examples->Miscellaneous->Multilabel classification",
    "sklearn->Examples->Miscellaneous->ROC Curve with Visualization API",
    "sklearn->Examples->Miscellaneous->ROC Curve with Visualization API->Load Data and Train a SVC",
    "sklearn->Examples->Miscellaneous->ROC Curve with Visualization API->Plotting the ROC Curve",
    "sklearn->Examples->Miscellaneous->ROC Curve with Visualization API->Training a Random Forest and Plotting the ROC Curve",
    "sklearn->Examples->Miscellaneous->The Johnson-Lindenstrauss bound for embedding with random projections",
    "sklearn->Examples->Miscellaneous->The Johnson-Lindenstrauss bound for embedding with random projections->Theoretical bounds",
    "sklearn->Examples->Miscellaneous->The Johnson-Lindenstrauss bound for embedding with random projections->Empirical validation",
    "sklearn->Examples->Miscellaneous->The Johnson-Lindenstrauss bound for embedding with random projections->Remarks",
    "sklearn->Examples->Miscellaneous->Visualizations with Display Objects",
    "sklearn->Examples->Miscellaneous->Visualizations with Display Objects->Load Data and train model",
    "sklearn->Examples->Miscellaneous->Visualizations with Display Objects->Load Data and train model->Create",
    "sklearn->Examples->Miscellaneous->Visualizations with Display Objects->Load Data and train model->Combining the display objects into a single plot",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Download the data and make missing values sets",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Impute the missing data and score",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Impute the missing data and score->Missing information",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Impute the missing data and score->Estimate the score",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Impute the missing data and score->Replace missing values by 0",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Impute the missing data and score->kNN-imputation of the missing values",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Impute the missing data and score->Impute missing values with mean",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Impute the missing data and score->Iterative imputation of the missing values",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values before building an estimator->Plot the results",
    "sklearn->Examples->Missing Value Imputation->Imputing missing values with variants of IterativeImputer",
    "sklearn->Examples->Model Selection->Balance model complexity and cross-validated score",
    "sklearn->Examples->Model Selection->Class Likelihood Ratios to measure classification performance",
    "sklearn->Examples->Model Selection->Class Likelihood Ratios to measure classification performance->Pre-test vs. post-test analysis",
    "sklearn->Examples->Model Selection->Class Likelihood Ratios to measure classification performance->Cross-validation of likelihood ratios",
    "sklearn->Examples->Model Selection->Class Likelihood Ratios to measure classification performance->Invariance with respect to prevalence",
    "sklearn->Examples->Model Selection->Comparing randomized search and grid search for hyperparameter estimation",
    "sklearn->Examples->Model Selection->Comparison between grid search and successive halving",
    "sklearn->Examples->Model Selection->Confusion matrix",
    "sklearn->Examples->Model Selection->Custom refit strategy of a grid search with cross-validation",
    "sklearn->Examples->Model Selection->Custom refit strategy of a grid search with cross-validation->The dataset",
    "sklearn->Examples->Model Selection->Custom refit strategy of a grid search with cross-validation->Define our grid-search strategy",
    "sklearn->Examples->Model Selection->Custom refit strategy of a grid search with cross-validation->Tuning hyper-parameters",
    "sklearn->Examples->Model Selection->Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV",
    "sklearn->Examples->Model Selection->Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV->Running GridSearchCV using multiple evaluation metrics",
    "sklearn->Examples->Model Selection->Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV->Plotting the result",
    "sklearn->Examples->Model Selection->Detection error tradeoff (DET) curve",
    "sklearn->Examples->Model Selection->Detection error tradeoff (DET) curve->Generate synthetic data",
    "sklearn->Examples->Model Selection->Detection error tradeoff (DET) curve->Define the classifiers",
    "sklearn->Examples->Model Selection->Detection error tradeoff (DET) curve->Plot ROC and DET curves",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->Load and prepare data",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-Rest multiclass ROC",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-Rest multiclass ROC->ROC curve showing a specific class",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-Rest multiclass ROC->ROC curve using micro-averaged OvR",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-Rest multiclass ROC->ROC curve using the OvR macro-average",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-Rest multiclass ROC->Plot all OvR ROC curves together",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-One multiclass ROC",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-One multiclass ROC->ROC curve using the OvO macro-average",
    "sklearn->Examples->Model Selection->Multiclass Receiver Operating Characteristic (ROC)->One-vs-One multiclass ROC->Plot all OvO ROC curves together",
    "sklearn->Examples->Model Selection->Nested versus non-nested cross-validation",
    "sklearn->Examples->Model Selection->Plotting Cross-Validated Predictions",
    "sklearn->Examples->Model Selection->Plotting Learning Curves and Checking Models' Scalability",
    "sklearn->Examples->Model Selection->Plotting Validation Curves",
    "sklearn->Examples->Model Selection->Precision-Recall",
    "sklearn->Examples->Model Selection->Precision-Recall->In binary classification settings->Dataset and model",
    "sklearn->Examples->Model Selection->Precision-Recall->In binary classification settings->Plot the Precision-Recall curve",
    "sklearn->Examples->Model Selection->Precision-Recall->In multi-label settings",
    "sklearn->Examples->Model Selection->Precision-Recall->In multi-label settings->Create multi-label data, fit, and predict",
    "sklearn->Examples->Model Selection->Precision-Recall->In multi-label settings->The average precision score in multi-label settings",
    "sklearn->Examples->Model Selection->Precision-Recall->In multi-label settings->Plot the micro-averaged Precision-Recall curve",
    "sklearn->Examples->Model Selection->Precision-Recall->In multi-label settings->Plot Precision-Recall curve for each class and iso-f1 curves",
    "sklearn->Examples->Model Selection->Receiver Operating Characteristic (ROC) with cross validation",
    "sklearn->Examples->Model Selection->Receiver Operating Characteristic (ROC) with cross validation->Load and prepare data",
    "sklearn->Examples->Model Selection->Receiver Operating Characteristic (ROC) with cross validation->Load and prepare data->Classification and ROC analysis",
    "sklearn->Examples->Model Selection->Sample pipeline for text feature extraction and evaluation",
    "sklearn->Examples->Model Selection->Sample pipeline for text feature extraction and evaluation->Data loading",
    "sklearn->Examples->Model Selection->Sample pipeline for text feature extraction and evaluation->Pipeline with hyperparameter tuning",
    "sklearn->Examples->Model Selection->Statistical comparison of models using grid search",
    "sklearn->Examples->Model Selection->Statistical comparison of models using grid search->Comparing two models: frequentist approach",
    "sklearn->Examples->Model Selection->Statistical comparison of models using grid search->Comparing two models: Bayesian approach",
    "sklearn->Examples->Model Selection->Statistical comparison of models using grid search->Comparing two models: Bayesian approach->Region of Practical Equivalence",
    "sklearn->Examples->Model Selection->Statistical comparison of models using grid search->Pairwise comparison of all models: frequentist approach",
    "sklearn->Examples->Model Selection->Statistical comparison of models using grid search->Pairwise comparison of all models: Bayesian approach",
    "sklearn->Examples->Model Selection->Statistical comparison of models using grid search->Take-home messages",
    "sklearn->Examples->Model Selection->Successive Halving Iterations",
    "sklearn->Examples->Model Selection->Successive Halving Iterations->Number of candidates and amount of resource at each iteration",
    "sklearn->Examples->Model Selection->Test with permutations the significance of a classification score",
    "sklearn->Examples->Model Selection->Test with permutations the significance of a classification score->Dataset",
    "sklearn->Examples->Model Selection->Test with permutations the significance of a classification score->Permutation test score",
    "sklearn->Examples->Model Selection->Test with permutations the significance of a classification score->Permutation test score->Original data",
    "sklearn->Examples->Model Selection->Test with permutations the significance of a classification score->Permutation test score->Random data",
    "sklearn->Examples->Model Selection->Train error vs Test error",
    "sklearn->Examples->Model Selection->Train error vs Test error->Generate sample data",
    "sklearn->Examples->Model Selection->Train error vs Test error->Compute train and test errors",
    "sklearn->Examples->Model Selection->Train error vs Test error->Plot results functions",
    "sklearn->Examples->Model Selection->Underfitting vs. Overfitting",
    "sklearn->Examples->Model Selection->Visualizing cross-validation behavior in scikit-learn",
    "sklearn->Examples->Model Selection->Visualizing cross-validation behavior in scikit-learn->Visualize our data",
    "sklearn->Examples->Model Selection->Visualizing cross-validation behavior in scikit-learn->Define a function to visualize cross-validation behavior",
    "sklearn->Examples->Model Selection->Visualizing cross-validation behavior in scikit-learn->Visualize cross-validation indices for many CV objects",
    "sklearn->Examples->Multioutput methods->Classifier Chain",
    "sklearn->Examples->Nearest Neighbors->Approximate nearest neighbors in TSNE",
    "sklearn->Examples->Nearest Neighbors->Caching nearest neighbors",
    "sklearn->Examples->Nearest Neighbors->Comparing Nearest Neighbors with and without Neighborhood Components Analysis",
    "sklearn->Examples->Nearest Neighbors->Dimensionality Reduction with Neighborhood Components Analysis",
    "sklearn->Examples->Nearest Neighbors->Kernel Density Estimate of Species Distributions",
    "sklearn->Examples->Nearest Neighbors->Kernel Density Estimate of Species Distributions->References",
    "sklearn->Examples->Nearest Neighbors->Kernel Density Estimation",
    "sklearn->Examples->Nearest Neighbors->Nearest Centroid Classification",
    "sklearn->Examples->Nearest Neighbors->Nearest Neighbors Classification",
    "sklearn->Examples->Nearest Neighbors->Nearest Neighbors regression",
    "sklearn->Examples->Nearest Neighbors->Nearest Neighbors regression->Generate sample data",
    "sklearn->Examples->Nearest Neighbors->Nearest Neighbors regression->Fit regression model",
    "sklearn->Examples->Nearest Neighbors->Neighborhood Components Analysis Illustration",
    "sklearn->Examples->Nearest Neighbors->Neighborhood Components Analysis Illustration->Original points",
    "sklearn->Examples->Nearest Neighbors->Neighborhood Components Analysis Illustration->Learning an embedding",
    "sklearn->Examples->Nearest Neighbors->Novelty detection with Local Outlier Factor (LOF)",
    "sklearn->Examples->Nearest Neighbors->Outlier detection with Local Outlier Factor (LOF)",
    "sklearn->Examples->Nearest Neighbors->Simple 1D Kernel Density Estimation",
    "sklearn->Examples->Neural Networks->Compare Stochastic learning strategies for MLPClassifier",
    "sklearn->Examples->Neural Networks->Restricted Boltzmann Machine features for digit classification",
    "sklearn->Examples->Neural Networks->Restricted Boltzmann Machine features for digit classification->Generate data",
    "sklearn->Examples->Neural Networks->Restricted Boltzmann Machine features for digit classification->Models definition",
    "sklearn->Examples->Neural Networks->Restricted Boltzmann Machine features for digit classification->Training",
    "sklearn->Examples->Neural Networks->Restricted Boltzmann Machine features for digit classification->Evaluation",
    "sklearn->Examples->Neural Networks->Restricted Boltzmann Machine features for digit classification->Plotting",
    "sklearn->Examples->Neural Networks->Varying regularization in Multi-layer Perceptron",
    "sklearn->Examples->Neural Networks->Visualization of MLP weights on MNIST",
    "sklearn->Examples->Pipelines and composite estimators->Column Transformer with Heterogeneous Data Sources",
    "sklearn->Examples->Pipelines and composite estimators->Column Transformer with Heterogeneous Data Sources->20 newsgroups dataset",
    "sklearn->Examples->Pipelines and composite estimators->Column Transformer with Heterogeneous Data Sources->Creating transformers",
    "sklearn->Examples->Pipelines and composite estimators->Column Transformer with Heterogeneous Data Sources->Classification pipeline",
    "sklearn->Examples->Pipelines and composite estimators->Column Transformer with Mixed Types",
    "sklearn->Examples->Pipelines and composite estimators->Concatenating multiple feature extraction methods",
    "sklearn->Examples->Pipelines and composite estimators->Effect of transforming the targets in regression model",
    "sklearn->Examples->Pipelines and composite estimators->Effect of transforming the targets in regression model->Synthetic example",
    "sklearn->Examples->Pipelines and composite estimators->Effect of transforming the targets in regression model->Real-world data set",
    "sklearn->Examples->Pipelines and composite estimators->Pipelining: chaining a PCA and a logistic regression",
    "sklearn->Examples->Pipelines and composite estimators->Selecting dimensionality reduction with Pipeline and GridSearchCV",
    "sklearn->Examples->Pipelines and composite estimators->Selecting dimensionality reduction with Pipeline and GridSearchCV->Illustration of Pipeline and GridSearchCV",
    "sklearn->Examples->Pipelines and composite estimators->Selecting dimensionality reduction with Pipeline and GridSearchCV->Caching transformers within a Pipeline",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->Original data",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->StandardScaler",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->MinMaxScaler",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->MaxAbsScaler",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->RobustScaler",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->PowerTransformer",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->QuantileTransformer (uniform output)",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->QuantileTransformer (Gaussian output)",
    "sklearn->Examples->Preprocessing->Compare the effect of different scalers on data with outliers->Normalizer",
    "sklearn->Examples->Preprocessing->Demonstrating the different strategies of KBinsDiscretizer",
    "sklearn->Examples->Preprocessing->Feature discretization",
    "sklearn->Examples->Preprocessing->Importance of Feature Scaling",
    "sklearn->Examples->Preprocessing->Importance of Feature Scaling->Load and prepare data",
    "sklearn->Examples->Preprocessing->Importance of Feature Scaling->Effect of rescaling on a k-neighbors models",
    "sklearn->Examples->Preprocessing->Importance of Feature Scaling->Effect of rescaling on a PCA dimensional reduction",
    "sklearn->Examples->Preprocessing->Importance of Feature Scaling->Effect of rescaling on model\u2019s performance",
    "sklearn->Examples->Preprocessing->Map data to a normal distribution",
    "sklearn->Examples->Preprocessing->Using KBinsDiscretizer to discretize continuous features",
    "sklearn->Examples->Semi Supervised Classification->Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset",
    "sklearn->Examples->Semi Supervised Classification->Effect of varying threshold for self-training",
    "sklearn->Examples->Semi Supervised Classification->Label Propagation digits active learning",
    "sklearn->Examples->Semi Supervised Classification->Label Propagation digits: Demonstrating performance",
    "sklearn->Examples->Semi Supervised Classification->Label Propagation digits: Demonstrating performance->Data generation",
    "sklearn->Examples->Semi Supervised Classification->Label Propagation digits: Demonstrating performance->Semi-supervised learning",
    "sklearn->Examples->Semi Supervised Classification->Label Propagation digits: Demonstrating performance->Plot the most uncertain predictions",
    "sklearn->Examples->Semi Supervised Classification->Label Propagation learning a complex structure",
    "sklearn->Examples->Semi Supervised Classification->Semi-supervised Classification on a Text Dataset",
    "sklearn->Examples->Support Vector Machines->Non-linear SVM",
    "sklearn->Examples->Support Vector Machines->One-class SVM with non-linear kernel (RBF)",
    "sklearn->Examples->Support Vector Machines->Plot different SVM classifiers in the iris dataset",
    "sklearn->Examples->Support Vector Machines->Plot the support vectors in LinearSVC",
    "sklearn->Examples->Support Vector Machines->RBF SVM parameters",
    "sklearn->Examples->Support Vector Machines->RBF SVM parameters->Load and prepare data set",
    "sklearn->Examples->Support Vector Machines->RBF SVM parameters->Train classifiers",
    "sklearn->Examples->Support Vector Machines->RBF SVM parameters->Visualization",
    "sklearn->Examples->Support Vector Machines->SVM Margins Example",
    "sklearn->Examples->Support Vector Machines->SVM Tie Breaking Example",
    "sklearn->Examples->Support Vector Machines->SVM with custom kernel",
    "sklearn->Examples->Support Vector Machines->SVM-Anova: SVM with univariate feature selection",
    "sklearn->Examples->Support Vector Machines->SVM-Anova: SVM with univariate feature selection->Load some data to play with",
    "sklearn->Examples->Support Vector Machines->SVM-Anova: SVM with univariate feature selection->Create the pipeline",
    "sklearn->Examples->Support Vector Machines->SVM-Anova: SVM with univariate feature selection->Plot the cross-validation score as a function of percentile of features",
    "sklearn->Examples->Support Vector Machines->SVM-Kernels",
    "sklearn->Examples->Support Vector Machines->SVM: Maximum margin separating hyperplane",
    "sklearn->Examples->Support Vector Machines->SVM: Separating hyperplane for unbalanced classes",
    "sklearn->Examples->Support Vector Machines->SVM: Weighted samples",
    "sklearn->Examples->Support Vector Machines->Scaling the regularization parameter for SVCs",
    "sklearn->Examples->Support Vector Machines->Scaling the regularization parameter for SVCs->L1-penalty case",
    "sklearn->Examples->Support Vector Machines->Scaling the regularization parameter for SVCs->L2-penalty case",
    "sklearn->Examples->Support Vector Machines->Support Vector Regression (SVR) using linear and non-linear kernels",
    "sklearn->Examples->Support Vector Machines->Support Vector Regression (SVR) using linear and non-linear kernels->Generate sample data",
    "sklearn->Examples->Support Vector Machines->Support Vector Regression (SVR) using linear and non-linear kernels->Fit regression model",
    "sklearn->Examples->Support Vector Machines->Support Vector Regression (SVR) using linear and non-linear kernels->Look at the results",
    "sklearn->Examples->Tutorial exercises->Cross-validation on Digits Dataset Exercise",
    "sklearn->Examples->Tutorial exercises->Cross-validation on diabetes Dataset Exercise",
    "sklearn->Examples->Tutorial exercises->Cross-validation on diabetes Dataset Exercise->Load dataset and apply GridSearchCV",
    "sklearn->Examples->Tutorial exercises->Cross-validation on diabetes Dataset Exercise->Plot error lines showing +/- std. errors of the scores",
    "sklearn->Examples->Tutorial exercises->Cross-validation on diabetes Dataset Exercise->Bonus: how much can you trust the selection of alpha?",
    "sklearn->Examples->Tutorial exercises->Digits Classification Exercise",
    "sklearn->Examples->Tutorial exercises->SVM Exercise",
    "sklearn->Examples->Working with text documents->Classification of text documents using sparse features",
    "sklearn->Examples->Working with text documents->Classification of text documents using sparse features->Loading and vectorizing the 20 newsgroups text dataset",
    "sklearn->Examples->Working with text documents->Classification of text documents using sparse features->Analysis of a bag-of-words document classifier",
    "sklearn->Examples->Working with text documents->Classification of text documents using sparse features->Analysis of a bag-of-words document classifier->Model without metadata stripping",
    "sklearn->Examples->Working with text documents->Classification of text documents using sparse features->Analysis of a bag-of-words document classifier->Model with metadata stripping",
    "sklearn->Examples->Working with text documents->Classification of text documents using sparse features->Benchmarking classifiers",
    "sklearn->Examples->Working with text documents->Classification of text documents using sparse features->Plot accuracy, training and test time of each classifier",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->Loading text data",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->Quantifying the quality of clustering results",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->K-means clustering on text features",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->K-means clustering on text features->Feature Extraction using TfidfVectorizer",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->K-means clustering on text features->Clustering sparse data with k-means",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->K-means clustering on text features->Performing dimensionality reduction using LSA",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->K-means clustering on text features->Top terms per cluster",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->K-means clustering on text features->HashingVectorizer",
    "sklearn->Examples->Working with text documents->Clustering text documents using k-means->Clustering evaluation summary",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison->Load Data",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison->Define preprocessing functions",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison->DictVectorizer",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison->FeatureHasher",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison->Comparison with special purpose text vectorizers",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison->TfidfVectorizer",
    "sklearn->Examples->Working with text documents->FeatureHasher and DictVectorizer Comparison->Summary",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn->Machine learning: the problem setting",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn->Loading an example dataset",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn->Learning and predicting",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn->Conventions",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn->Conventions->Type casting",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn->Conventions->Refitting and updating parameters",
    "sklearn->Tutorials->An introduction to machine learning with scikit-learn->Conventions->Multiclass vs. multilabel fitting",
    "sklearn->Tutorials->A tutorial on statistical-learning for scientific data processing",
    "sklearn->Tutorials->Working With Text Data",
    "sklearn->Tutorials->Working With Text Data->Tutorial setup",
    "sklearn->Tutorials->Working With Text Data->Loading the 20 newsgroups dataset",
    "sklearn->Tutorials->Working With Text Data->Extracting features from text files",
    "sklearn->Tutorials->Working With Text Data->Extracting features from text files->Bags of words",
    "sklearn->Tutorials->Working With Text Data->Extracting features from text files->Tokenizing text with scikit-learn",
    "sklearn->Tutorials->Working With Text Data->Extracting features from text files->From occurrences to frequencies",
    "sklearn->Tutorials->Working With Text Data->Training a classifier",
    "sklearn->Tutorials->Working With Text Data->Building a pipeline",
    "sklearn->Tutorials->Working With Text Data->Evaluation of the performance on the test set",
    "sklearn->Tutorials->Working With Text Data->Parameter tuning using grid search",
    "sklearn->Tutorials->Working With Text Data->Parameter tuning using grid search->Exercises",
    "sklearn->Tutorials->Working With Text Data->Exercise 1: Language identification",
    "sklearn->Tutorials->Working With Text Data->Exercise 2: Sentiment Analysis on movie reviews",
    "sklearn->Tutorials->Working With Text Data->Exercise 3: CLI text classification utility",
    "sklearn->Tutorials->Working With Text Data->Where to from here",
    "sklearn->Tutorials->Choosing the right estimator",
    "sklearn->Tutorials->External Resources, Videos and Talks",
    "sklearn->Tutorials->External Resources, Videos and Talks->New to Scientific Python?",
    "sklearn->Tutorials->External Resources, Videos and Talks->External Tutorials",
    "sklearn->Tutorials->External Resources, Videos and Talks->Videos",
    "pandas_toms_blog->Modern Pandas",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->Introduction",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->Prior Art",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->Get the Data",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->Indexing",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->Slicing",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->SettingWithCopy",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->Multidimensional Indexing",
    "pandas_toms_blog->Modern Pandas->Effective Pandas->WrapUp",
    "pandas_toms_blog->Method Chaining",
    "pandas_toms_blog->Method Chaining->Method Chaining",
    "pandas_toms_blog->Method Chaining->Method Chaining->Costs",
    "pandas_toms_blog->Method Chaining->Method Chaining->Inplace?",
    "pandas_toms_blog->Method Chaining->Method Chaining->Application",
    "pandas_toms_blog->Indexes",
    "pandas_toms_blog->Indexes->Set Operations",
    "pandas_toms_blog->Indexes->Flavors",
    "pandas_toms_blog->Indexes->Flavors->Row Slicing",
    "pandas_toms_blog->Indexes->Flavors->Indexes for Easier Arithmetic, Analysis",
    "pandas_toms_blog->Indexes->Flavors->Indexes for Alignment",
    "pandas_toms_blog->Indexes->Merging",
    "pandas_toms_blog->Indexes->Merging->Concat Version",
    "pandas_toms_blog->Indexes->Merging->Merge Version",
    "pandas_toms_blog->Indexes->Merging->The merge version",
    "pandas_toms_blog->Fast Pandas",
    "pandas_toms_blog->Fast Pandas->Constructors",
    "pandas_toms_blog->Fast Pandas->Datatypes",
    "pandas_toms_blog->Fast Pandas->Iteration, Apply, And Vectorization",
    "pandas_toms_blog->Fast Pandas->Categoricals",
    "pandas_toms_blog->Fast Pandas->Going Further",
    "pandas_toms_blog->Fast Pandas->Summary",
    "pandas_toms_blog->Tidy Data",
    "pandas_toms_blog->Tidy Data->Reshaping & Tidy Data",
    "pandas_toms_blog->Tidy Data->Reshaping & Tidy Data->NBA Data",
    "pandas_toms_blog->Tidy Data->Reshaping & Tidy Data->Stack / Unstack",
    "pandas_toms_blog->Tidy Data->Reshaping & Tidy Data->Mini Project: Home Court Advantage?",
    "pandas_toms_blog->Tidy Data->Reshaping & Tidy Data->Mini Project: Home Court Advantage?->Step 1: Create an outcome variable",
    "pandas_toms_blog->Tidy Data->Reshaping & Tidy Data->Mini Project: Home Court Advantage?->Step 2: Find the win percent for each team",
    "pandas_toms_blog->Visualization",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis->Overview",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis->",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis->Other Libraries",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis->Examples",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis->Matplotlib",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis->Pandas Built-in Plotting",
    "pandas_toms_blog->Visualization->Visualization and Exploratory Analysis->Seaborn",
    "pandas_toms_blog->Time Series",
    "pandas_toms_blog->Time Series->Timeseries",
    "pandas_toms_blog->Time Series->Timeseries->Special Slicing",
    "pandas_toms_blog->Time Series->Timeseries->Special Methods->Resampling",
    "pandas_toms_blog->Time Series->Timeseries->Special Methods->Rolling / Expanding / EW",
    "pandas_toms_blog->Time Series->Timeseries->Grab Bag->Offsets",
    "pandas_toms_blog->Time Series->Timeseries->Grab Bag->Holiday Calendars",
    "pandas_toms_blog->Time Series->Timeseries->Grab Bag->Timezones",
    "pandas_toms_blog->Time Series->Timeseries->Modeling Time Series",
    "pandas_toms_blog->Time Series->Timeseries->Modeling Time Series->Autocorrelation",
    "pandas_toms_blog->Time Series->Timeseries->Seasonality",
    "pandas_toms_blog->Time Series->Timeseries->ARIMA",
    "pandas_toms_blog->Time Series->Timeseries->ARIMA->",
    "pandas_toms_blog->Time Series->Timeseries->ARIMA->Integrated",
    "pandas_toms_blog->Time Series->Timeseries->ARIMA->Combining",
    "pandas_toms_blog->Time Series->Timeseries->Forecasting",
    "pandas_toms_blog->Time Series->Timeseries->Resources",
    "pandas_toms_blog->Time Series->Timeseries->Conclusion",
    "pandas_toms_blog->Scaling",
    "pandas_toms_blog->Scaling->Using Iteration",
    "pandas_toms_blog->Scaling->Using Dask",
    "pandas_toms_blog->Scaling->Dask",
    "pandas_toms_blog->Scaling->Joining",
    "pandas_toms_blog->Scaling->Try It Out!",
    "seaborn->User guide and tutorial->An introduction to seaborn",
    "seaborn->User guide and tutorial->An introduction to seaborn->A high-level API for statistical graphics",
    "seaborn->User guide and tutorial->An introduction to seaborn->A high-level API for statistical graphics->Statistical estimation",
    "seaborn->User guide and tutorial->An introduction to seaborn->A high-level API for statistical graphics->Distributional representations",
    "seaborn->User guide and tutorial->An introduction to seaborn->A high-level API for statistical graphics->Plots for categorical data",
    "seaborn->User guide and tutorial->An introduction to seaborn->Multivariate views on complex datasets",
    "seaborn->User guide and tutorial->An introduction to seaborn->Multivariate views on complex datasets->Lower-level tools for building figures",
    "seaborn->User guide and tutorial->An introduction to seaborn->Opinionated defaults and flexible customization",
    "seaborn->User guide and tutorial->An introduction to seaborn->Opinionated defaults and flexible customization->Relationship to matplotlib",
    "seaborn->User guide and tutorial->An introduction to seaborn->Opinionated defaults and flexible customization->Next steps",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Similar functions for similar tasks",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Figure-level vs. axes-level functions",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Axes-level functions make self-contained plots",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Figure-level functions own their figure",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Customizing plots from a figure-level function",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Specifying figure sizes",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Relative merits of figure-level functions",
    "seaborn->User guide and tutorial->Overview of seaborn plotting functions->Combining multiple views on the data",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn->Long-form vs. wide-form data",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn->Long-form vs. wide-form data->Long-form data",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn->Long-form vs. wide-form data->Wide-form data",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn->Long-form vs. wide-form data->Messy data",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn->Long-form vs. wide-form data->Further reading and take-home points",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn->Options for visualizing long-form data",
    "seaborn->User guide and tutorial->Data structures accepted by seaborn->Options for visualizing wide-form data",
    "seaborn->User guide and tutorial->The seaborn.objects interface",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Specifying a plot and mapping data",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Specifying a plot and mapping data->Setting properties",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Specifying a plot and mapping data->Mapping properties",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Specifying a plot and mapping data->Defining groups",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Transforming data before plotting->Statistical transformation",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Transforming data before plotting->Resolving overplotting",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Transforming data before plotting->Creating variables through transformation",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Transforming data before plotting->Orienting marks and transforms",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Building and displaying the plot",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Building and displaying the plot->Adding multiple layers",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Building and displaying the plot->Layer-specific mappings",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Building and displaying the plot->Faceting and pairing subplots",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Building and displaying the plot->Integrating with matplotlib",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Building and displaying the plot->Building and displaying the plot",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Customizing the appearance",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Customizing the appearance->Parameterizing scales",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Customizing the appearance->Customizing legends and ticks",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Customizing the appearance->Customizing limits, labels, and titles",
    "seaborn->User guide and tutorial->The seaborn.objects interface->Customizing the appearance->Theme customization",
    "seaborn->User guide and tutorial->Properties of Mark objects->Coordinate properties->x, y, xmin, xmax, ymin, ymax",
    "seaborn->User guide and tutorial->Properties of Mark objects->Color properties->color, fillcolor, edgecolor",
    "seaborn->User guide and tutorial->Properties of Mark objects->Color properties->alpha, fillalpha, edgealpha",
    "seaborn->User guide and tutorial->Properties of Mark objects->Style properties->fill",
    "seaborn->User guide and tutorial->Properties of Mark objects->Style properties->marker",
    "seaborn->User guide and tutorial->Properties of Mark objects->Style properties->linestyle, edgestyle",
    "seaborn->User guide and tutorial->Properties of Mark objects->Size properties->pointsize",
    "seaborn->User guide and tutorial->Properties of Mark objects->Size properties->linewidth",
    "seaborn->User guide and tutorial->Properties of Mark objects->Size properties->edgewidth",
    "seaborn->User guide and tutorial->Properties of Mark objects->Size properties->stroke",
    "seaborn->User guide and tutorial->Properties of Mark objects->Text properties->halign, valign",
    "seaborn->User guide and tutorial->Properties of Mark objects->Text properties->fontsize",
    "seaborn->User guide and tutorial->Properties of Mark objects->Text properties->offset",
    "seaborn->User guide and tutorial->Properties of Mark objects->Other properties->text",
    "seaborn->User guide and tutorial->Properties of Mark objects->Other properties->group",
    "seaborn->User guide and tutorial->Visualizing statistical relationships",
    "seaborn->User guide and tutorial->Visualizing statistical relationships->Relating variables with scatter plots",
    "seaborn->User guide and tutorial->Visualizing statistical relationships->Emphasizing continuity with line plots",
    "seaborn->User guide and tutorial->Visualizing statistical relationships->Emphasizing continuity with line plots->Aggregation and representing uncertainty",
    "seaborn->User guide and tutorial->Visualizing statistical relationships->Emphasizing continuity with line plots->Plotting subsets of data with semantic mappings",
    "seaborn->User guide and tutorial->Visualizing statistical relationships->Emphasizing continuity with line plots->Controlling sorting and orientation",
    "seaborn->User guide and tutorial->Visualizing statistical relationships->Showing multiple relationships with facets",
    "seaborn->User guide and tutorial->Visualizing distributions of data",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Plotting univariate histograms",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Plotting univariate histograms->Choosing the bin size",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Plotting univariate histograms->Conditioning on other variables",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Plotting univariate histograms->Normalized histogram statistics",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Kernel density estimation",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Kernel density estimation->Choosing the smoothing bandwidth",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Kernel density estimation->Conditioning on other variables",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Kernel density estimation->Kernel density estimation pitfalls",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Empirical cumulative distributions",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Visualizing bivariate distributions",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Distribution visualization in other settings",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Distribution visualization in other settings->Plotting joint and marginal distributions",
    "seaborn->User guide and tutorial->Visualizing distributions of data->Distribution visualization in other settings->Plotting many distributions",
    "seaborn->User guide and tutorial->Visualizing categorical data",
    "seaborn->User guide and tutorial->Visualizing categorical data->Categorical scatterplots",
    "seaborn->User guide and tutorial->Visualizing categorical data->Comparing distributions",
    "seaborn->User guide and tutorial->Visualizing categorical data->Comparing distributions->Boxplots",
    "seaborn->User guide and tutorial->Visualizing categorical data->Comparing distributions->Violinplots",
    "seaborn->User guide and tutorial->Visualizing categorical data->Estimating central tendency",
    "seaborn->User guide and tutorial->Visualizing categorical data->Estimating central tendency->Bar plots",
    "seaborn->User guide and tutorial->Visualizing categorical data->Estimating central tendency->Point plots",
    "seaborn->User guide and tutorial->Visualizing categorical data->Showing additional dimensions",
    "seaborn->User guide and tutorial->Statistical estimation and error bars",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Measures of data spread",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Measures of data spread->Standard deviation error bars",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Measures of data spread->Percentile interval error bars",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Measures of estimate uncertainty",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Measures of estimate uncertainty->Standard error bars",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Measures of estimate uncertainty->Confidence interval error bars",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Measures of estimate uncertainty->Custom error bars",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Error bars on regression fits",
    "seaborn->User guide and tutorial->Statistical estimation and error bars->Are error bars enough?",
    "seaborn->User guide and tutorial->Estimating regression fits",
    "seaborn->User guide and tutorial->Estimating regression fits->Functions for drawing linear regression models",
    "seaborn->User guide and tutorial->Estimating regression fits->Fitting different kinds of models",
    "seaborn->User guide and tutorial->Estimating regression fits->Conditioning on other variables",
    "seaborn->User guide and tutorial->Estimating regression fits->Plotting a regression in other contexts",
    "seaborn->User guide and tutorial->Building structured multi-plot grids",
    "seaborn->User guide and tutorial->Building structured multi-plot grids->Conditional small multiples",
    "seaborn->User guide and tutorial->Building structured multi-plot grids->Using custom functions",
    "seaborn->User guide and tutorial->Building structured multi-plot grids->Plotting pairwise data relationships",
    "seaborn->User guide and tutorial->Controlling figure aesthetics",
    "seaborn->User guide and tutorial->Controlling figure aesthetics->Seaborn figure styles",
    "seaborn->User guide and tutorial->Controlling figure aesthetics->Removing axes spines",
    "seaborn->User guide and tutorial->Controlling figure aesthetics->Temporarily setting figure style",
    "seaborn->User guide and tutorial->Controlling figure aesthetics->Overriding elements of the seaborn styles",
    "seaborn->User guide and tutorial->Controlling figure aesthetics->Scaling plot elements",
    "seaborn->User guide and tutorial->Choosing color palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->General principles for using color in plots->Components of color",
    "seaborn->User guide and tutorial->Choosing color palettes->General principles for using color in plots->Vary hue to distinguish categories",
    "seaborn->User guide and tutorial->Choosing color palettes->General principles for using color in plots->Vary luminance to represent numbers",
    "seaborn->User guide and tutorial->Choosing color palettes->Tools for choosing color palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Qualitative color palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Qualitative color palettes->Using circular color systems",
    "seaborn->User guide and tutorial->Choosing color palettes->Qualitative color palettes->Using categorical Color Brewer palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Sequential color palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Sequential color palettes->Perceptually uniform palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Sequential color palettes->Discrete vs. continuous mapping",
    "seaborn->User guide and tutorial->Choosing color palettes->Sequential color palettes->Sequential \u201ccubehelix\u201d palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Sequential color palettes->Custom sequential palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Sequential color palettes->Sequential Color Brewer palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Diverging color palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Diverging color palettes->Perceptually uniform diverging palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Diverging color palettes->Custom diverging palettes",
    "seaborn->User guide and tutorial->Choosing color palettes->Diverging color palettes->Other diverging palettes",
    "seaborn->API Overview->Overview of seaborn plotting functions",
    "seaborn->API Overview->Overview of seaborn plotting functions->Similar functions for similar tasks",
    "seaborn->API Overview->Overview of seaborn plotting functions->Figure-level vs. axes-level functions",
    "seaborn->API Overview->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Axes-level functions make self-contained plots",
    "seaborn->API Overview->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Figure-level functions own their figure",
    "seaborn->API Overview->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Customizing plots from a figure-level function",
    "seaborn->API Overview->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Specifying figure sizes",
    "seaborn->API Overview->Overview of seaborn plotting functions->Figure-level vs. axes-level functions->Relative merits of figure-level functions",
    "seaborn->API Overview->Overview of seaborn plotting functions->Combining multiple views on the data",
    "seaborn->API Overview->Data structures accepted by seaborn",
    "seaborn->API Overview->Data structures accepted by seaborn->Long-form vs. wide-form data",
    "seaborn->API Overview->Data structures accepted by seaborn->Long-form vs. wide-form data->Long-form data",
    "seaborn->API Overview->Data structures accepted by seaborn->Long-form vs. wide-form data->Wide-form data",
    "seaborn->API Overview->Data structures accepted by seaborn->Long-form vs. wide-form data->Messy data",
    "seaborn->API Overview->Data structures accepted by seaborn->Long-form vs. wide-form data->Further reading and take-home points",
    "seaborn->API Overview->Data structures accepted by seaborn->Options for visualizing long-form data",
    "seaborn->API Overview->Data structures accepted by seaborn->Options for visualizing wide-form data",
    "seaborn->Objects interface->The seaborn.objects interface",
    "seaborn->Objects interface->The seaborn.objects interface->Specifying a plot and mapping data",
    "seaborn->Objects interface->The seaborn.objects interface->Specifying a plot and mapping data->Setting properties",
    "seaborn->Objects interface->The seaborn.objects interface->Specifying a plot and mapping data->Mapping properties",
    "seaborn->Objects interface->The seaborn.objects interface->Specifying a plot and mapping data->Defining groups",
    "seaborn->Objects interface->The seaborn.objects interface->Transforming data before plotting->Statistical transformation",
    "seaborn->Objects interface->The seaborn.objects interface->Transforming data before plotting->Resolving overplotting",
    "seaborn->Objects interface->The seaborn.objects interface->Transforming data before plotting->Creating variables through transformation",
    "seaborn->Objects interface->The seaborn.objects interface->Transforming data before plotting->Orienting marks and transforms",
    "seaborn->Objects interface->The seaborn.objects interface->Building and displaying the plot",
    "seaborn->Objects interface->The seaborn.objects interface->Building and displaying the plot->Adding multiple layers",
    "seaborn->Objects interface->The seaborn.objects interface->Building and displaying the plot->Layer-specific mappings",
    "seaborn->Objects interface->The seaborn.objects interface->Building and displaying the plot->Faceting and pairing subplots",
    "seaborn->Objects interface->The seaborn.objects interface->Building and displaying the plot->Integrating with matplotlib",
    "seaborn->Objects interface->The seaborn.objects interface->Building and displaying the plot->Building and displaying the plot",
    "seaborn->Objects interface->The seaborn.objects interface->Customizing the appearance",
    "seaborn->Objects interface->The seaborn.objects interface->Customizing the appearance->Parameterizing scales",
    "seaborn->Objects interface->The seaborn.objects interface->Customizing the appearance->Customizing legends and ticks",
    "seaborn->Objects interface->The seaborn.objects interface->Customizing the appearance->Customizing limits, labels, and titles",
    "seaborn->Objects interface->The seaborn.objects interface->Customizing the appearance->Theme customization",
    "seaborn->Objects interface->Properties of Mark objects->Coordinate properties->x, y, xmin, xmax, ymin, ymax",
    "seaborn->Objects interface->Properties of Mark objects->Color properties->color, fillcolor, edgecolor",
    "seaborn->Objects interface->Properties of Mark objects->Color properties->alpha, fillalpha, edgealpha",
    "seaborn->Objects interface->Properties of Mark objects->Style properties->fill",
    "seaborn->Objects interface->Properties of Mark objects->Style properties->marker",
    "seaborn->Objects interface->Properties of Mark objects->Style properties->linestyle, edgestyle",
    "seaborn->Objects interface->Properties of Mark objects->Size properties->pointsize",
    "seaborn->Objects interface->Properties of Mark objects->Size properties->linewidth",
    "seaborn->Objects interface->Properties of Mark objects->Size properties->edgewidth",
    "seaborn->Objects interface->Properties of Mark objects->Size properties->stroke",
    "seaborn->Objects interface->Properties of Mark objects->Text properties->halign, valign",
    "seaborn->Objects interface->Properties of Mark objects->Text properties->fontsize",
    "seaborn->Objects interface->Properties of Mark objects->Text properties->offset",
    "seaborn->Objects interface->Properties of Mark objects->Other properties->text",
    "seaborn->Objects interface->Properties of Mark objects->Other properties->group",
    "seaborn->Plotting functions->Visualizing statistical relationships",
    "seaborn->Plotting functions->Visualizing statistical relationships->Relating variables with scatter plots",
    "seaborn->Plotting functions->Visualizing statistical relationships->Emphasizing continuity with line plots",
    "seaborn->Plotting functions->Visualizing statistical relationships->Emphasizing continuity with line plots->Aggregation and representing uncertainty",
    "seaborn->Plotting functions->Visualizing statistical relationships->Emphasizing continuity with line plots->Plotting subsets of data with semantic mappings",
    "seaborn->Plotting functions->Visualizing statistical relationships->Emphasizing continuity with line plots->Controlling sorting and orientation",
    "seaborn->Plotting functions->Visualizing statistical relationships->Showing multiple relationships with facets",
    "seaborn->Plotting functions->Visualizing distributions of data",
    "seaborn->Plotting functions->Visualizing distributions of data->Plotting univariate histograms",
    "seaborn->Plotting functions->Visualizing distributions of data->Plotting univariate histograms->Choosing the bin size",
    "seaborn->Plotting functions->Visualizing distributions of data->Plotting univariate histograms->Conditioning on other variables",
    "seaborn->Plotting functions->Visualizing distributions of data->Plotting univariate histograms->Normalized histogram statistics",
    "seaborn->Plotting functions->Visualizing distributions of data->Kernel density estimation",
    "seaborn->Plotting functions->Visualizing distributions of data->Kernel density estimation->Choosing the smoothing bandwidth",
    "seaborn->Plotting functions->Visualizing distributions of data->Kernel density estimation->Conditioning on other variables",
    "seaborn->Plotting functions->Visualizing distributions of data->Kernel density estimation->Kernel density estimation pitfalls",
    "seaborn->Plotting functions->Visualizing distributions of data->Empirical cumulative distributions",
    "seaborn->Plotting functions->Visualizing distributions of data->Visualizing bivariate distributions",
    "seaborn->Plotting functions->Visualizing distributions of data->Distribution visualization in other settings",
    "seaborn->Plotting functions->Visualizing distributions of data->Distribution visualization in other settings->Plotting joint and marginal distributions",
    "seaborn->Plotting functions->Visualizing distributions of data->Distribution visualization in other settings->Plotting many distributions",
    "seaborn->Plotting functions->Visualizing categorical data",
    "seaborn->Plotting functions->Visualizing categorical data->Categorical scatterplots",
    "seaborn->Plotting functions->Visualizing categorical data->Comparing distributions",
    "seaborn->Plotting functions->Visualizing categorical data->Comparing distributions->Boxplots",
    "seaborn->Plotting functions->Visualizing categorical data->Comparing distributions->Violinplots",
    "seaborn->Plotting functions->Visualizing categorical data->Estimating central tendency",
    "seaborn->Plotting functions->Visualizing categorical data->Estimating central tendency->Bar plots",
    "seaborn->Plotting functions->Visualizing categorical data->Estimating central tendency->Point plots",
    "seaborn->Plotting functions->Visualizing categorical data->Showing additional dimensions",
    "seaborn->Statistical operations->Statistical estimation and error bars",
    "seaborn->Statistical operations->Statistical estimation and error bars->Measures of data spread",
    "seaborn->Statistical operations->Statistical estimation and error bars->Measures of data spread->Standard deviation error bars",
    "seaborn->Statistical operations->Statistical estimation and error bars->Measures of data spread->Percentile interval error bars",
    "seaborn->Statistical operations->Statistical estimation and error bars->Measures of estimate uncertainty",
    "seaborn->Statistical operations->Statistical estimation and error bars->Measures of estimate uncertainty->Standard error bars",
    "seaborn->Statistical operations->Statistical estimation and error bars->Measures of estimate uncertainty->Confidence interval error bars",
    "seaborn->Statistical operations->Statistical estimation and error bars->Measures of estimate uncertainty->Custom error bars",
    "seaborn->Statistical operations->Statistical estimation and error bars->Error bars on regression fits",
    "seaborn->Statistical operations->Statistical estimation and error bars->Are error bars enough?",
    "seaborn->Statistical operations->Estimating regression fits",
    "seaborn->Statistical operations->Estimating regression fits->Functions for drawing linear regression models",
    "seaborn->Statistical operations->Estimating regression fits->Fitting different kinds of models",
    "seaborn->Statistical operations->Estimating regression fits->Conditioning on other variables",
    "seaborn->Statistical operations->Estimating regression fits->Plotting a regression in other contexts",
    "seaborn->Multi-plot grids->Building structured multi-plot grids",
    "seaborn->Multi-plot grids->Building structured multi-plot grids->Conditional small multiples",
    "seaborn->Multi-plot grids->Building structured multi-plot grids->Using custom functions",
    "seaborn->Multi-plot grids->Building structured multi-plot grids->Plotting pairwise data relationships",
    "seaborn->Figure aesthetics->Controlling figure aesthetics",
    "seaborn->Figure aesthetics->Controlling figure aesthetics->Seaborn figure styles",
    "seaborn->Figure aesthetics->Controlling figure aesthetics->Removing axes spines",
    "seaborn->Figure aesthetics->Controlling figure aesthetics->Temporarily setting figure style",
    "seaborn->Figure aesthetics->Controlling figure aesthetics->Overriding elements of the seaborn styles",
    "seaborn->Figure aesthetics->Controlling figure aesthetics->Scaling plot elements",
    "seaborn->Figure aesthetics->Choosing color palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->General principles for using color in plots->Components of color",
    "seaborn->Figure aesthetics->Choosing color palettes->General principles for using color in plots->Vary hue to distinguish categories",
    "seaborn->Figure aesthetics->Choosing color palettes->General principles for using color in plots->Vary luminance to represent numbers",
    "seaborn->Figure aesthetics->Choosing color palettes->Tools for choosing color palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Qualitative color palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Qualitative color palettes->Using circular color systems",
    "seaborn->Figure aesthetics->Choosing color palettes->Qualitative color palettes->Using categorical Color Brewer palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Sequential color palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Sequential color palettes->Perceptually uniform palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Sequential color palettes->Discrete vs. continuous mapping",
    "seaborn->Figure aesthetics->Choosing color palettes->Sequential color palettes->Sequential \u201ccubehelix\u201d palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Sequential color palettes->Custom sequential palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Sequential color palettes->Sequential Color Brewer palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Diverging color palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Diverging color palettes->Perceptually uniform diverging palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Diverging color palettes->Custom diverging palettes",
    "seaborn->Figure aesthetics->Choosing color palettes->Diverging color palettes->Other diverging palettes",
    "scipy->Introduction",
    "scipy->Introduction->SciPy Organization",
    "scipy->Introduction->Finding Documentation",
    "scipy->Special functions (scipy.special)",
    "scipy->Special functions (scipy.special)->Bessel functions of real order(jv, jn_zeros)",
    "scipy->Special functions (scipy.special)->Cython Bindings for Special Functions (scipy.special.cython_special)",
    "scipy->Special functions (scipy.special)->Cython Bindings for Special Functions (scipy.special.cython_special)->Avoiding Python Function Overhead",
    "scipy->Special functions (scipy.special)->Cython Bindings for Special Functions (scipy.special.cython_special)->Releasing the GIL",
    "scipy->Special functions (scipy.special)->Functions not in scipy.special",
    "scipy->Integration (scipy.integrate)",
    "scipy->Integration (scipy.integrate)->General integration (quad)",
    "scipy->Integration (scipy.integrate)->General multiple integration (dblquad, tplquad, nquad)",
    "scipy->Integration (scipy.integrate)->Gaussian quadrature",
    "scipy->Integration (scipy.integrate)->Romberg Integration",
    "scipy->Integration (scipy.integrate)->Integrating using Samples",
    "scipy->Integration (scipy.integrate)->Faster integration using low-level callback functions",
    "scipy->Integration (scipy.integrate)->Ordinary differential equations (solve_ivp)",
    "scipy->Integration (scipy.integrate)->Ordinary differential equations (solve_ivp)->Solving a system with a banded Jacobian matrix",
    "scipy->Integration (scipy.integrate)->Ordinary differential equations (solve_ivp)->References",
    "scipy->Optimization (scipy.optimize)",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Nelder-Mead Simplex algorithm (method='Nelder-Mead')",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Broyden-Fletcher-Goldfarb-Shanno algorithm (method='BFGS')",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Newton-Conjugate-Gradient algorithm (method='Newton-CG')",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Newton-Conjugate-Gradient algorithm (method='Newton-CG')->Full Hessian example:",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Newton-Conjugate-Gradient algorithm (method='Newton-CG')->Hessian product example:",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Trust-Region Newton-Conjugate-Gradient Algorithm (method='trust-ncg')",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Trust-Region Newton-Conjugate-Gradient Algorithm (method='trust-ncg')->Full Hessian example:",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Trust-Region Newton-Conjugate-Gradient Algorithm (method='trust-ncg')->Hessian product example:",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Trust-Region Truncated Generalized Lanczos / Conjugate Gradient Algorithm (method='trust-krylov')",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Trust-Region Truncated Generalized Lanczos / Conjugate Gradient Algorithm (method='trust-krylov')->Full Hessian example:",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Trust-Region Truncated Generalized Lanczos / Conjugate Gradient Algorithm (method='trust-krylov')->Hessian product example:",
    "scipy->Optimization (scipy.optimize)->Unconstrained minimization of multivariate scalar functions (minimize)->Trust-Region Nearly Exact Algorithm (method='trust-exact')",
    "scipy->Optimization (scipy.optimize)->Constrained minimization of multivariate scalar functions (minimize)",
    "scipy->Optimization (scipy.optimize)->Constrained minimization of multivariate scalar functions (minimize)->Trust-Region Constrained Algorithm (method='trust-constr')",
    "scipy->Optimization (scipy.optimize)->Constrained minimization of multivariate scalar functions (minimize)->Trust-Region Constrained Algorithm (method='trust-constr')->Defining Bounds Constraints:",
    "scipy->Optimization (scipy.optimize)->Constrained minimization of multivariate scalar functions (minimize)->Trust-Region Constrained Algorithm (method='trust-constr')->Defining Linear Constraints:",
    "scipy->Optimization (scipy.optimize)->Constrained minimization of multivariate scalar functions (minimize)->Trust-Region Constrained Algorithm (method='trust-constr')->Defining Nonlinear Constraints:",
    "scipy->Optimization (scipy.optimize)->Constrained minimization of multivariate scalar functions (minimize)->Trust-Region Constrained Algorithm (method='trust-constr')->Solving the Optimization Problem:",
    "scipy->Optimization (scipy.optimize)->Constrained minimization of multivariate scalar functions (minimize)->Sequential Least SQuares Programming (SLSQP) Algorithm (method='SLSQP')",
    "scipy->Optimization (scipy.optimize)->Global optimization",
    "scipy->Optimization (scipy.optimize)->Least-squares minimization (least_squares)",
    "scipy->Optimization (scipy.optimize)->Least-squares minimization (least_squares)->Example of solving a fitting problem",
    "scipy->Optimization (scipy.optimize)->Least-squares minimization (least_squares)->Further examples",
    "scipy->Optimization (scipy.optimize)->Univariate function minimizers (minimize_scalar)",
    "scipy->Optimization (scipy.optimize)->Univariate function minimizers (minimize_scalar)->Unconstrained minimization (method='brent')",
    "scipy->Optimization (scipy.optimize)->Univariate function minimizers (minimize_scalar)->Bounded minimization (method='bounded')",
    "scipy->Optimization (scipy.optimize)->Custom minimizers",
    "scipy->Optimization (scipy.optimize)->Root finding->Scalar functions",
    "scipy->Optimization (scipy.optimize)->Root finding->Fixed-point solving",
    "scipy->Optimization (scipy.optimize)->Root finding->Sets of equations",
    "scipy->Optimization (scipy.optimize)->Root finding->Root finding for large problems",
    "scipy->Optimization (scipy.optimize)->Root finding->Still too slow? Preconditioning.",
    "scipy->Optimization (scipy.optimize)->Linear programming (linprog)",
    "scipy->Optimization (scipy.optimize)->Linear programming (linprog)->Linear programming example",
    "scipy->Optimization (scipy.optimize)->Assignment problems->Linear sum assignment problem example",
    "scipy->Optimization (scipy.optimize)->Mixed integer linear programming->Knapsack problem example",
    "scipy->Interpolation (scipy.interpolate)",
    "scipy->Fourier Transforms (scipy.fft)",
    "scipy->Fourier Transforms (scipy.fft)->Fast Fourier transforms->1-D discrete Fourier transforms",
    "scipy->Fourier Transforms (scipy.fft)->Fast Fourier transforms->2- and N-D discrete Fourier transforms",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Cosine Transforms",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Cosine Transforms->Type I DCT",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Cosine Transforms->Type II DCT",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Cosine Transforms->Type III DCT",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Cosine Transforms->Type IV DCT",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Cosine Transforms->DCT and IDCT",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Cosine Transforms->Example",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Sine Transforms",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Sine Transforms->Type I DST",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Sine Transforms->Type II DST",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Sine Transforms->Type III DST",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Sine Transforms->Type IV DST",
    "scipy->Fourier Transforms (scipy.fft)->Discrete Sine Transforms->DST and IDST",
    "scipy->Fourier Transforms (scipy.fft)->Fast Hankel Transform",
    "scipy->Fourier Transforms (scipy.fft)->References",
    "scipy->Signal Processing (scipy.signal)",
    "scipy->Signal Processing (scipy.signal)->B-splines",
    "scipy->Signal Processing (scipy.signal)->Filtering",
    "scipy->Signal Processing (scipy.signal)->Filtering->Convolution/Correlation",
    "scipy->Signal Processing (scipy.signal)->Filtering->Difference-equation filtering",
    "scipy->Signal Processing (scipy.signal)->Filtering->Difference-equation filtering->Analysis of Linear Systems",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->FIR Filter",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->IIR Filter",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->Filter Coefficients",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->Filter Coefficients->Transfer function representation",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->Filter Coefficients->Zeros and poles representation",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->Filter Coefficients->State-space system representation",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->Filter Coefficients->Second-order sections representation",
    "scipy->Signal Processing (scipy.signal)->Filtering->Filter Design->Filter transformations",
    "scipy->Signal Processing (scipy.signal)->Filtering->Other filters",
    "scipy->Signal Processing (scipy.signal)->Filtering->Other filters->Median Filter",
    "scipy->Signal Processing (scipy.signal)->Filtering->Other filters->Order Filter",
    "scipy->Signal Processing (scipy.signal)->Filtering->Other filters->Wiener filter",
    "scipy->Signal Processing (scipy.signal)->Filtering->Other filters->Hilbert filter",
    "scipy->Signal Processing (scipy.signal)->Filtering->Analog Filter Design",
    "scipy->Signal Processing (scipy.signal)->Spectral Analysis->Periodogram Measurements",
    "scipy->Signal Processing (scipy.signal)->Spectral Analysis->Spectral Analysis using Welch\u00e2\u0080\u0099s Method",
    "scipy->Signal Processing (scipy.signal)->Spectral Analysis->Lomb-Scargle Periodograms (lombscargle)",
    "scipy->Signal Processing (scipy.signal)->Detrend",
    "scipy->Linear Algebra (scipy.linalg)",
    "scipy->Linear Algebra (scipy.linalg)->scipy.linalg vs numpy.linalg",
    "scipy->Linear Algebra (scipy.linalg)->numpy.matrix vs 2-D numpy.ndarray",
    "scipy->Linear Algebra (scipy.linalg)->Basic routines->Finding the inverse",
    "scipy->Linear Algebra (scipy.linalg)->Basic routines->Solving a linear system",
    "scipy->Linear Algebra (scipy.linalg)->Basic routines->Finding the determinant",
    "scipy->Linear Algebra (scipy.linalg)->Basic routines->Computing norms",
    "scipy->Linear Algebra (scipy.linalg)->Basic routines->Solving linear least-squares problems and pseudo-inverses",
    "scipy->Linear Algebra (scipy.linalg)->Basic routines->Generalized inverse",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions->Eigenvalues and eigenvectors",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions->Singular value decomposition",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions->LU decomposition",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions->Cholesky decomposition",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions->QR decomposition",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions->Schur decomposition",
    "scipy->Linear Algebra (scipy.linalg)->Decompositions->Interpolative decomposition",
    "scipy->Linear Algebra (scipy.linalg)->Matrix functions",
    "scipy->Linear Algebra (scipy.linalg)->Matrix functions->Exponential and logarithm functions",
    "scipy->Linear Algebra (scipy.linalg)->Matrix functions->Trigonometric functions",
    "scipy->Linear Algebra (scipy.linalg)->Matrix functions->Hyperbolic trigonometric functions",
    "scipy->Linear Algebra (scipy.linalg)->Matrix functions->Arbitrary function",
    "scipy->Linear Algebra (scipy.linalg)->Special matrices",
    "scipy->Sparse eigenvalue problems with ARPACK->Introduction",
    "scipy->Sparse eigenvalue problems with ARPACK->Basic functionality",
    "scipy->Sparse eigenvalue problems with ARPACK->Shift-invert mode",
    "scipy->Sparse eigenvalue problems with ARPACK->Examples",
    "scipy->Sparse eigenvalue problems with ARPACK->Use of LinearOperator",
    "scipy->Sparse eigenvalue problems with ARPACK->References",
    "scipy->Compressed Sparse Graph Routines (scipy.sparse.csgraph)->Example: Word Ladders",
    "scipy->Spatial data structures and algorithms (scipy.spatial)",
    "scipy->Spatial data structures and algorithms (scipy.spatial)->Delaunay triangulations",
    "scipy->Spatial data structures and algorithms (scipy.spatial)->Delaunay triangulations->Coplanar points",
    "scipy->Spatial data structures and algorithms (scipy.spatial)->Convex hulls",
    "scipy->Spatial data structures and algorithms (scipy.spatial)->Voronoi diagrams",
    "scipy->Statistics (scipy.stats)->Introduction",
    "scipy->Statistics (scipy.stats)->Random variables",
    "scipy->Statistics (scipy.stats)->Random variables->Getting help",
    "scipy->Statistics (scipy.stats)->Random variables->Common methods",
    "scipy->Statistics (scipy.stats)->Random variables->Random number generation",
    "scipy->Statistics (scipy.stats)->Random variables->Shifting and scaling",
    "scipy->Statistics (scipy.stats)->Random variables->Shape parameters",
    "scipy->Statistics (scipy.stats)->Random variables->Freezing a distribution",
    "scipy->Statistics (scipy.stats)->Random variables->Broadcasting",
    "scipy->Statistics (scipy.stats)->Random variables->Specific points for discrete distributions",
    "scipy->Statistics (scipy.stats)->Random variables->Fitting distributions",
    "scipy->Statistics (scipy.stats)->Random variables->Performance issues and cautionary remarks",
    "scipy->Statistics (scipy.stats)->Random variables->Remaining issues",
    "scipy->Statistics (scipy.stats)->Building specific distributions",
    "scipy->Statistics (scipy.stats)->Building specific distributions->Making a continuous distribution, i.e., subclassing rv_continuous",
    "scipy->Statistics (scipy.stats)->Building specific distributions->Subclassing rv_discrete",
    "scipy->Statistics (scipy.stats)->Analysing one sample",
    "scipy->Statistics (scipy.stats)->Analysing one sample->Descriptive statistics",
    "scipy->Statistics (scipy.stats)->Analysing one sample->T-test and KS-test",
    "scipy->Statistics (scipy.stats)->Analysing one sample->Tails of the distribution",
    "scipy->Statistics (scipy.stats)->Analysing one sample->Special tests for normal distributions",
    "scipy->Statistics (scipy.stats)->Comparing two samples",
    "scipy->Statistics (scipy.stats)->Comparing two samples->Comparing means",
    "scipy->Statistics (scipy.stats)->Comparing two samples->Kolmogorov-Smirnov test for two samples ks_2samp",
    "scipy->Statistics (scipy.stats)->Kernel density estimation",
    "scipy->Statistics (scipy.stats)->Kernel density estimation->Univariate estimation",
    "scipy->Statistics (scipy.stats)->Kernel density estimation->Multivariate estimation",
    "scipy->Statistics (scipy.stats)->Kernel density estimation->Multiscale Graph Correlation (MGC)",
    "scipy->Statistics (scipy.stats)->Quasi-Monte Carlo",
    "scipy->Statistics (scipy.stats)->Quasi-Monte Carlo->Calculate the discrepancy",
    "scipy->Statistics (scipy.stats)->Quasi-Monte Carlo->Using a QMC engine",
    "scipy->Statistics (scipy.stats)->Quasi-Monte Carlo->Making a QMC engine, i.e., subclassing QMCEngine",
    "scipy->Statistics (scipy.stats)->Quasi-Monte Carlo->Guidelines on using QMC",
    "scipy->Multidimensional image processing (scipy.ndimage)->Introduction",
    "scipy->Multidimensional image processing (scipy.ndimage)->Properties shared by all functions",
    "scipy->Multidimensional image processing (scipy.ndimage)->Filter functions",
    "scipy->Multidimensional image processing (scipy.ndimage)->Filter functions->Correlation and convolution",
    "scipy->Multidimensional image processing (scipy.ndimage)->Filter functions->Smoothing filters",
    "scipy->Multidimensional image processing (scipy.ndimage)->Filter functions->Filters based on order statistics",
    "scipy->Multidimensional image processing (scipy.ndimage)->Filter functions->Derivatives",
    "scipy->Multidimensional image processing (scipy.ndimage)->Filter functions->Generic filter functions",
    "scipy->Multidimensional image processing (scipy.ndimage)->Filter functions->Fourier domain filters",
    "scipy->Multidimensional image processing (scipy.ndimage)->Interpolation functions",
    "scipy->Multidimensional image processing (scipy.ndimage)->Interpolation functions->Spline pre-filters",
    "scipy->Multidimensional image processing (scipy.ndimage)->Interpolation functions->Interpolation boundary handling",
    "scipy->Multidimensional image processing (scipy.ndimage)->Interpolation functions->Interpolation functions",
    "scipy->Multidimensional image processing (scipy.ndimage)->Morphology->Binary morphology",
    "scipy->Multidimensional image processing (scipy.ndimage)->Morphology->Grey-scale morphology",
    "scipy->Multidimensional image processing (scipy.ndimage)->Distance transforms",
    "scipy->Multidimensional image processing (scipy.ndimage)->Segmentation and labeling",
    "scipy->Multidimensional image processing (scipy.ndimage)->Object measurements",
    "scipy->Multidimensional image processing (scipy.ndimage)->Extending scipy.ndimage in C",
    "scipy->Multidimensional image processing (scipy.ndimage)->References",
    "scipy->File IO (scipy.io)",
    "scipy->File IO (scipy.io)->MATLAB files->The basic functions",
    "scipy->File IO (scipy.io)->MATLAB files->How do I start?",
    "scipy->File IO (scipy.io)->MATLAB files->MATLAB structs",
    "scipy->File IO (scipy.io)->MATLAB files->MATLAB cell arrays",
    "scipy->File IO (scipy.io)->Netcdf",
    "matplotlib->Tutorials",
    "matplotlib->Tutorials->Introductory",
    "matplotlib->Tutorials->Introductory->Quick start guide",
    "matplotlib->Tutorials->Introductory->Quick start guide->A simple example",
    "matplotlib->Tutorials->Introductory->Quick start guide->Parts of a Figure",
    "matplotlib->Tutorials->Introductory->Quick start guide->Parts of a Figure->Figure",
    "matplotlib->Tutorials->Introductory->Quick start guide->Parts of a Figure->Axes",
    "matplotlib->Tutorials->Introductory->Quick start guide->Parts of a Figure->Axis",
    "matplotlib->Tutorials->Introductory->Quick start guide->Parts of a Figure->Artist",
    "matplotlib->Tutorials->Introductory->Quick start guide->Types of inputs to plotting functions",
    "matplotlib->Tutorials->Introductory->Quick start guide->Coding styles->The explicit and the implicit interfaces",
    "matplotlib->Tutorials->Introductory->Quick start guide->Coding styles->Making a helper functions",
    "matplotlib->Tutorials->Introductory->Quick start guide->Styling Artists",
    "matplotlib->Tutorials->Introductory->Quick start guide->Styling Artists->Colors",
    "matplotlib->Tutorials->Introductory->Quick start guide->Styling Artists->Linewidths, linestyles, and markersizes",
    "matplotlib->Tutorials->Introductory->Quick start guide->Labelling plots->Axes labels and text",
    "matplotlib->Tutorials->Introductory->Quick start guide->Labelling plots->Using mathematical expressions in text",
    "matplotlib->Tutorials->Introductory->Quick start guide->Labelling plots->Annotations",
    "matplotlib->Tutorials->Introductory->Quick start guide->Labelling plots->Legends",
    "matplotlib->Tutorials->Introductory->Quick start guide->Axis scales and ticks",
    "matplotlib->Tutorials->Introductory->Quick start guide->Axis scales and ticks->Scales",
    "matplotlib->Tutorials->Introductory->Quick start guide->Axis scales and ticks->Tick locators and formatters",
    "matplotlib->Tutorials->Introductory->Quick start guide->Axis scales and ticks->Plotting dates and strings",
    "matplotlib->Tutorials->Introductory->Quick start guide->Axis scales and ticks->Additional Axis objects",
    "matplotlib->Tutorials->Introductory->Quick start guide->Color mapped data",
    "matplotlib->Tutorials->Introductory->Quick start guide->Color mapped data->Colormaps",
    "matplotlib->Tutorials->Introductory->Quick start guide->Color mapped data->Normalizations",
    "matplotlib->Tutorials->Introductory->Quick start guide->Color mapped data->Colorbars",
    "matplotlib->Tutorials->Introductory->Quick start guide->Working with multiple Figures and Axes",
    "matplotlib->Tutorials->Introductory->Quick start guide->More reading",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Introduction to pyplot",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Introduction to pyplot->Formatting the style of your plot",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Plotting with keyword strings",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Plotting with categorical variables",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Controlling line properties",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Working with multiple figures and axes",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Working with text",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Working with text->Using mathematical expressions in text",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Working with text->Annotating text",
    "matplotlib->Tutorials->Introductory->Pyplot tutorial->Logarithmic and other nonlinear axes",
    "matplotlib->Tutorials->Introductory->Image tutorial",
    "matplotlib->Tutorials->Introductory->Image tutorial->Startup commands",
    "matplotlib->Tutorials->Introductory->Image tutorial->Importing image data into Numpy arrays",
    "matplotlib->Tutorials->Introductory->Image tutorial->Plotting numpy arrays as images",
    "matplotlib->Tutorials->Introductory->Image tutorial->Plotting numpy arrays as images->Applying pseudocolor schemes to image plots",
    "matplotlib->Tutorials->Introductory->Image tutorial->Plotting numpy arrays as images->Color scale reference",
    "matplotlib->Tutorials->Introductory->Image tutorial->Plotting numpy arrays as images->Examining a specific data range",
    "matplotlib->Tutorials->Introductory->Image tutorial->Plotting numpy arrays as images->Array Interpolation schemes",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot->A note on the explicit vs. implicit interfaces",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot->Our data",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot->Getting started",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot->Controlling the style",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot->Customizing the plot",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot->Combining multiple visualizations",
    "matplotlib->Tutorials->Introductory->The Lifecycle of a Plot->Saving our plot",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->Runtime rc settings",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->Runtime rc settings->Temporary rc settings",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->Using style sheets",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->Using style sheets->Defining your own style",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->Using style sheets->Distributing styles",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->Using style sheets->Composing styles",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->Using style sheets->Temporary styling",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->The matplotlibrc file",
    "matplotlib->Tutorials->Introductory->Customizing Matplotlib with style sheets and rcParams->The matplotlibrc file->The default matplotlibrc file",
    "matplotlib->Tutorials->Introductory->Animations using Matplotlib",
    "matplotlib->Tutorials->Introductory->Animations using Matplotlib->Animation Classes",
    "matplotlib->Tutorials->Introductory->Animations using Matplotlib->Animation Classes->FuncAnimation",
    "matplotlib->Tutorials->Introductory->Animations using Matplotlib->Animation Classes->ArtistAnimation",
    "matplotlib->Tutorials->Introductory->Animations using Matplotlib->Animation Writers",
    "matplotlib->Tutorials->Introductory->Animations using Matplotlib->Animation Writers->Saving Animations",
    "matplotlib->Tutorials->Intermediate",
    "matplotlib->Tutorials->Intermediate->Artist tutorial",
    "matplotlib->Tutorials->Intermediate->Artist tutorial->Customizing your objects",
    "matplotlib->Tutorials->Intermediate->Artist tutorial->Object containers",
    "matplotlib->Tutorials->Intermediate->Artist tutorial->Object containers->Figure container",
    "matplotlib->Tutorials->Intermediate->Artist tutorial->Object containers->Axes container",
    "matplotlib->Tutorials->Intermediate->Artist tutorial->Object containers->Axis containers",
    "matplotlib->Tutorials->Intermediate->Artist tutorial->Object containers->Tick containers",
    "matplotlib->Tutorials->Intermediate->Legend guide",
    "matplotlib->Tutorials->Intermediate->Legend guide->Controlling the legend entries",
    "matplotlib->Tutorials->Intermediate->Legend guide->Creating artists specifically for adding to the legend (aka. Proxy artists)",
    "matplotlib->Tutorials->Intermediate->Legend guide->Legend location",
    "matplotlib->Tutorials->Intermediate->Legend guide->Legend location->Figure legends",
    "matplotlib->Tutorials->Intermediate->Legend guide->Multiple legends on the same Axes",
    "matplotlib->Tutorials->Intermediate->Legend guide->Legend Handlers",
    "matplotlib->Tutorials->Intermediate->Legend guide->Legend Handlers->Implementing a custom legend handler",
    "matplotlib->Tutorials->Intermediate->Styling with cycler",
    "matplotlib->Tutorials->Intermediate->Styling with cycler->Setting prop_cycle in the matplotlibrc file or style files",
    "matplotlib->Tutorials->Intermediate->Styling with cycler->Cycling through multiple properties",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Simple Example",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Colorbars",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Suptitle",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Legends",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Padding and Spacing",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Padding and Spacing->Spacing with colorbars",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->rcParams",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Use with GridSpec",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Manually setting axes positions",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Grids of fixed aspect-ratio Axes: \"compressed\" layout",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Manually turning off constrained_layout",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Limitations->Incompatible functions",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Limitations->Other Caveats",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Debugging",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Notes on the algorithm",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Notes on the algorithm->Simple case: one Axes",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Notes on the algorithm->Simple case: two Axes",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Notes on the algorithm->Two Axes and colorbar",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Notes on the algorithm->Colorbar associated with a Gridspec",
    "matplotlib->Tutorials->Intermediate->Constrained Layout Guide->Notes on the algorithm->Uneven sized Axes",
    "matplotlib->Tutorials->Intermediate->Tight Layout guide",
    "matplotlib->Tutorials->Intermediate->Tight Layout guide->Simple Example",
    "matplotlib->Tutorials->Intermediate->Tight Layout guide->Caveats",
    "matplotlib->Tutorials->Intermediate->Tight Layout guide->Use with GridSpec",
    "matplotlib->Tutorials->Intermediate->Tight Layout guide->Legends and Annotations",
    "matplotlib->Tutorials->Intermediate->Tight Layout guide->Use with AxesGrid1",
    "matplotlib->Tutorials->Intermediate->Tight Layout guide->Colorbar",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Overview->Create grid-shaped combinations of Axes",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Overview->Underlying tools",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Overview->Adding single Axes at a time",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->High-level methods for making grids->Basic 2x2 grid",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->High-level methods for making grids->Grids of fixed-aspect ratio Axes",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->High-level methods for making grids->Axes spanning rows or columns in a grid",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->High-level methods for making grids->Variable widths or heights in a grid",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->High-level methods for making grids->Nested Axes layouts",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Low-level and advanced grid methods",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Low-level and advanced grid methods->Basic 2x2 grid",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Low-level and advanced grid methods->Axes spanning rows or grids in a grid",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Low-level and advanced grid methods->Manual adjustments to a GridSpec layout",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->Low-level and advanced grid methods->Nested layouts with SubplotSpec",
    "matplotlib->Tutorials->Intermediate->Arranging multiple Axes in a Figure->More reading",
    "matplotlib->Tutorials->Intermediate->Autoscaling",
    "matplotlib->Tutorials->Intermediate->Autoscaling->Margins",
    "matplotlib->Tutorials->Intermediate->Autoscaling->Sticky edges",
    "matplotlib->Tutorials->Intermediate->Autoscaling->Controlling autoscale",
    "matplotlib->Tutorials->Intermediate->Autoscaling->Working with collections",
    "matplotlib->Tutorials->Intermediate->*origin* and *extent* in `~.Axes.imshow`",
    "matplotlib->Tutorials->Intermediate->*origin* and *extent* in `~.Axes.imshow`->Default extent",
    "matplotlib->Tutorials->Intermediate->*origin* and *extent* in `~.Axes.imshow`->Explicit extent",
    "matplotlib->Tutorials->Intermediate->*origin* and *extent* in `~.Axes.imshow`->Explicit extent and axes limits",
    "matplotlib->Tutorials->Advanced",
    "matplotlib->Tutorials->Advanced->Faster rendering by using blitting",
    "matplotlib->Tutorials->Advanced->Faster rendering by using blitting->Minimal example",
    "matplotlib->Tutorials->Advanced->Faster rendering by using blitting->Class-based example",
    "matplotlib->Tutorials->Advanced->Path Tutorial",
    "matplotlib->Tutorials->Advanced->Path Tutorial->B\u00e9zier example",
    "matplotlib->Tutorials->Advanced->Path Tutorial->Compound paths",
    "matplotlib->Tutorials->Advanced->Path effects guide",
    "matplotlib->Tutorials->Advanced->Path effects guide->Adding a shadow",
    "matplotlib->Tutorials->Advanced->Path effects guide->Making an artist stand out",
    "matplotlib->Tutorials->Advanced->Path effects guide->Greater control of the path effect artist",
    "matplotlib->Tutorials->Advanced->Transformations Tutorial",
    "matplotlib->Tutorials->Advanced->Transformations Tutorial->Data coordinates",
    "matplotlib->Tutorials->Advanced->Transformations Tutorial->Axes coordinates",
    "matplotlib->Tutorials->Advanced->Transformations Tutorial->Blended transformations",
    "matplotlib->Tutorials->Advanced->Transformations Tutorial->Plotting in physical coordinates",
    "matplotlib->Tutorials->Advanced->Transformations Tutorial->Using offset transforms to create a shadow effect",
    "matplotlib->Tutorials->Advanced->Transformations Tutorial->The transformation pipeline",
    "matplotlib->Tutorials->Colors",
    "matplotlib->Tutorials->Colors->Specifying colors->Color formats",
    "matplotlib->Tutorials->Colors->Specifying colors->Transparency",
    "matplotlib->Tutorials->Colors->Specifying colors->\"CN\" color selection",
    "matplotlib->Tutorials->Colors->Specifying colors->Comparison between X11/CSS4 and xkcd colors",
    "matplotlib->Tutorials->Colors->Customized Colorbars Tutorial",
    "matplotlib->Tutorials->Colors->Customized Colorbars Tutorial->Customized Colorbars",
    "matplotlib->Tutorials->Colors->Customized Colorbars Tutorial->Customized Colorbars->Basic continuous colorbar",
    "matplotlib->Tutorials->Colors->Customized Colorbars Tutorial->Customized Colorbars->Extended colorbar with continuous colorscale",
    "matplotlib->Tutorials->Colors->Customized Colorbars Tutorial->Customized Colorbars->Discrete intervals colorbar",
    "matplotlib->Tutorials->Colors->Customized Colorbars Tutorial->Customized Colorbars->Colorbar with custom extension lengths",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Getting colormaps and accessing their values",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Getting colormaps and accessing their values->ListedColormap",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Getting colormaps and accessing their values->LinearSegmentedColormap",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Creating listed colormaps",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Creating linear segmented colormaps",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Creating linear segmented colormaps->Directly creating a segmented colormap from a list",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Reversing a colormap",
    "matplotlib->Tutorials->Colors->Creating Colormaps in Matplotlib->Registering a colormap",
    "matplotlib->Tutorials->Colors->Colormap Normalization",
    "matplotlib->Tutorials->Colors->Colormap Normalization->Logarithmic",
    "matplotlib->Tutorials->Colors->Colormap Normalization->Centered",
    "matplotlib->Tutorials->Colors->Colormap Normalization->Symmetric logarithmic",
    "matplotlib->Tutorials->Colors->Colormap Normalization->Power-law",
    "matplotlib->Tutorials->Colors->Colormap Normalization->Discrete bounds",
    "matplotlib->Tutorials->Colors->Colormap Normalization->TwoSlopeNorm: Different mapping on either side of a center",
    "matplotlib->Tutorials->Colors->Colormap Normalization->FuncNorm: Arbitrary function normalization",
    "matplotlib->Tutorials->Colors->Colormap Normalization->Custom normalization: Manually implement two linear ranges",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Overview",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Classes of colormaps",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Classes of colormaps->Sequential",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Classes of colormaps->Sequential2",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Classes of colormaps->Diverging",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Classes of colormaps->Cyclic",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Classes of colormaps->Qualitative",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Classes of colormaps->Miscellaneous",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Lightness of Matplotlib colormaps",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Grayscale conversion",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->Color vision deficiencies",
    "matplotlib->Tutorials->Colors->Choosing Colormaps in Matplotlib->References",
    "matplotlib->Tutorials->Text",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Basic text commands",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Labels for x- and y-axis",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Titles",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Ticks and ticklabels",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Ticks and ticklabels->Terminology",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Ticks and ticklabels->Simple ticks",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Ticks and ticklabels->Tick Locators and Formatters",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Ticks and ticklabels->Dateticks",
    "matplotlib->Tutorials->Text->Text in Matplotlib Plots->Legends and Annotations",
    "matplotlib->Tutorials->Text->Text properties and layout",
    "matplotlib->Tutorials->Text->Annotations",
    "matplotlib->Tutorials->Text->Annotations->Basic annotation",
    "matplotlib->Tutorials->Text->Annotations->Basic annotation->Annotating data",
    "matplotlib->Tutorials->Text->Annotations->Basic annotation->Annotating with arrows",
    "matplotlib->Tutorials->Text->Annotations->Basic annotation->Placing text annotations relative to data",
    "matplotlib->Tutorials->Text->Annotations->Advanced annotation",
    "matplotlib->Tutorials->Text->Annotations->Advanced annotation->Annotating with boxed text",
    "matplotlib->Tutorials->Text->Annotations->Advanced annotation->Defining custom box styles",
    "matplotlib->Tutorials->Text->Annotations->Advanced annotation->Customizing annotation arrows",
    "matplotlib->Tutorials->Text->Annotations->Advanced annotation->Placing Artist at anchored Axes locations",
    "matplotlib->Tutorials->Text->Annotations->Coordinate systems for annotations",
    "matplotlib->Tutorials->Text->Annotations->Coordinate systems for annotations->Using ConnectionPatch",
    "matplotlib->Tutorials->Text->Annotations->Coordinate systems for annotations->Zoom effect between Axes",
    "matplotlib->Tutorials->Text->Writing mathematical expressions",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Subscripts and superscripts",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Fractions, binomials, and stacked numbers",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Radicals",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Fonts",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Fonts->Custom fonts",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Accents",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Symbols",
    "matplotlib->Tutorials->Text->Writing mathematical expressions->Example",
    "matplotlib->Tutorials->Text->Text rendering with XeLaTeX/LuaLaTeX via the ``pgf`` backend",
    "matplotlib->Tutorials->Text->Text rendering with XeLaTeX/LuaLaTeX via the ``pgf`` backend->Multi-Page PDF Files",
    "matplotlib->Tutorials->Text->Text rendering with XeLaTeX/LuaLaTeX via the ``pgf`` backend->Font specification",
    "matplotlib->Tutorials->Text->Text rendering with XeLaTeX/LuaLaTeX via the ``pgf`` backend->Custom preamble",
    "matplotlib->Tutorials->Text->Text rendering with XeLaTeX/LuaLaTeX via the ``pgf`` backend->Choosing the TeX system",
    "matplotlib->Tutorials->Text->Text rendering with XeLaTeX/LuaLaTeX via the ``pgf`` backend->Troubleshooting",
    "matplotlib->Tutorials->Text->Text rendering with LaTeX",
    "matplotlib->Tutorials->Text->Text rendering with LaTeX->PostScript options",
    "matplotlib->Tutorials->Text->Text rendering with LaTeX->Possible hangups",
    "matplotlib->Tutorials->Text->Text rendering with LaTeX->Troubleshooting",
    "matplotlib->Tutorials->Toolkits",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->ImageGrid",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->AxesDivider Class",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->colorbar whose height (or width) is in sync with the main axes->scatter_hist.py with AxesDivider",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->ParasiteAxes",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->ParasiteAxes->Example 2: twin",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->AnchoredArtists",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->InsetLocator",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->axes_grid1->RGBAxes",
    "matplotlib->Tutorials->Toolkits->The axes_grid1 toolkit->AxesDivider",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->axisartist",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->axisartist->axisartist with ParasiteAxes",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->axisartist->Curvilinear Grid",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->axisartist->Floating Axes",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->axisartist namespace",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->AxisArtist",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->AxisArtist->line",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->AxisArtist->major_ticks, minor_ticks",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->AxisArtist->major_ticklabels, minor_ticklabels",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->AxisArtist->axislabel",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->Default AxisArtists",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->HowTo",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->Rotation and Alignment of TickLabels",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->Rotation and Alignment of TickLabels->Adjusting ticklabels alignment",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->Rotation and Alignment of TickLabels->Adjusting pad",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->GridHelper",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->FloatingAxis",
    "matplotlib->Tutorials->Toolkits->The axisartist toolkit->Current Limitations and TODO's",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Line plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Scatter plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Wireframe plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Surface plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Tri-Surface plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Contour plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Filled contour plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Polygon plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Bar plots",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Quiver",
    "matplotlib->Tutorials->Toolkits->The mplot3d toolkit->Text",
    "matplotlib->Tutorials->Provisional"
]