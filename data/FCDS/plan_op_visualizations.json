{
    "23228": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    return {genre: joined_df['rating'].mul(joined_df[genre]).sum() / joined_df[genre].sum() for genre in genres}": {
                "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": {},
                "joined_df['rating'].mul(joined_df[genre])": {}
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "data joining": {},
                "elementwise multiplication": {}
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    return {genre: joined_df['rating'].mul(joined_df[genre]).sum() / joined_df[genre].sum() for genre in genres}": "function to compute grouped mean",
            "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": "data joining",
            "joined_df['rating'].mul(joined_df[genre])": "elementwise multiplication"
        }
    },
    "2053": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    rating_dic = {}\n    for genre in genres:\n        cur_genre = movies.loc[movies[genre] == 1]\n        id_ls = cur_genre.index.tolist()\n        cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n        rating_dic[genre] = cur_genre_rating['rating'].mean()\n    return rating_dic": {
                "rating_dic = {}": {},
                "for genre in genres:\n    cur_genre = movies.loc[movies[genre] == 1]\n    id_ls = cur_genre.index.tolist()\n    cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n    rating_dic[genre] = cur_genre_rating['rating'].mean()": {
                    "cur_genre = movies.loc[movies[genre] == 1]": {},
                    "cur_genre.index.tolist()": {},
                    "ratings['item_id'].isin(id_ls)": {},
                    "cur_genre_rating['rating'].mean()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "convert index to list": {},
                    "data filtering condition": {},
                    "data aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    rating_dic = {}\n    for genre in genres:\n        cur_genre = movies.loc[movies[genre] == 1]\n        id_ls = cur_genre.index.tolist()\n        cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n        rating_dic[genre] = cur_genre_rating['rating'].mean()\n    return rating_dic": "function to compute grouped mean",
            "for genre in genres:\n    cur_genre = movies.loc[movies[genre] == 1]\n    id_ls = cur_genre.index.tolist()\n    cur_genre_rating = ratings[ratings['item_id'].isin(id_ls)]\n    rating_dic[genre] = cur_genre_rating['rating'].mean()": "compute grouped mean",
            "ratings['item_id'].isin(id_ls)": "data filtering condition",
            "cur_genre_rating['rating'].mean()": "data aggregation",
            "rating_dic = {}": "create dictionary",
            "cur_genre.index.tolist()": "convert index to list",
            "cur_genre = movies.loc[movies[genre] == 1]": "data filtering"
        }
    },
    "460": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    result = {}\n    for genre in genres:\n        rslt_df = movies[movies[genre] == 1]\n        rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n        result[genre] = rate\n    return result": {
                "result = {}": {},
                "for genre in genres:\n    rslt_df = movies[movies[genre] == 1]\n    rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n    result[genre] = rate": {
                    "rslt_df = movies[movies[genre] == 1]": {},
                    "rslt_df.set_index('movie_id')": {},
                    "result[genre] = rate": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "set column as index": {},
                    "populate dictionary": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    result = {}\n    for genre in genres:\n        rslt_df = movies[movies[genre] == 1]\n        rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n        result[genre] = rate\n    return result": "function to compute grouped mean",
            "for genre in genres:\n    rslt_df = movies[movies[genre] == 1]\n    rate = rslt_df.set_index('movie_id').join(ratings.set_index('item_id'))['rating'].mean()\n    result[genre] = rate": "compute grouped mean",
            "rslt_df.set_index('movie_id')": "set column as index",
            "rslt_df = movies[movies[genre] == 1]": "data filtering",
            "result[genre] = rate": "populate dictionary",
            "result = {}": "create dictionary"
        }
    },
    "16512": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    mp = {}\n    for genre in genres:\n        genre_df = joined_df.loc[joined_df[genre] == 1]\n        mp[genre] = genre_df['rating'].mean()\n    return mp": {
                "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": {},
                "mp = {}": {},
                "for genre in genres:\n    genre_df = joined_df.loc[joined_df[genre] == 1]\n    mp[genre] = genre_df['rating'].mean()": {
                    "genre_df = joined_df.loc[joined_df[genre] == 1]": {},
                    "genre_df['rating'].mean()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "data joining": {},
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "data aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    joined_df = ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')\n    mp = {}\n    for genre in genres:\n        genre_df = joined_df.loc[joined_df[genre] == 1]\n        mp[genre] = genre_df['rating'].mean()\n    return mp": "function to compute grouped mean",
            "ratings.merge(movies, left_on='item_id', right_on='movie_id', how='left')": "data joining",
            "for genre in genres:\n    genre_df = joined_df.loc[joined_df[genre] == 1]\n    mp[genre] = genre_df['rating'].mean()": "compute grouped mean",
            "genre_df['rating'].mean()": "data aggregation",
            "mp = {}": "create dictionary",
            "genre_df = joined_df.loc[joined_df[genre] == 1]": "data filtering"
        }
    },
    "15954": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    Dict = {}\n    for key in genres:\n        movie_ids = movies[movies[key] == 1].index\n        Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()\n    return Dict\n    pass": {
                "Dict = {}": {},
                "for key in genres:\n    movie_ids = movies[movies[key] == 1].index\n    Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()": {
                    "movie_ids = movies[movies[key] == 1].index": {},
                    "ratings['item_id'].isin(movie_ids)": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "data filtering condition": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    Dict = {}\n    for key in genres:\n        movie_ids = movies[movies[key] == 1].index\n        Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()\n    return Dict\n    pass": "function to compute grouped mean",
            "for key in genres:\n    movie_ids = movies[movies[key] == 1].index\n    Dict[key] = ratings[ratings['item_id'].isin(movie_ids)]['rating'].mean()": "compute grouped mean",
            "ratings['item_id'].isin(movie_ids)": "data filtering condition",
            "movie_ids = movies[movies[key] == 1].index": "data filtering",
            "Dict = {}": "create dictionary"
        }
    },
    "15557": {
        "chunk_tree": {
            "def find_rating_scores(group, ratings, genre):\n    avg_rating = 0\n    if group[genre].iloc[0] == 1:\n        avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])\n    return avg_rating": {
                "avg_rating = 0": {},
                "if group[genre].iloc[0] == 1:\n    avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])": {
                    "ratings.loc[group[genre].index].sum()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute mean of a group": {
                "create numeric variable": {},
                "compute mean of a group": {
                    "data filtering; data aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def find_rating_scores(group, ratings, genre):\n    avg_rating = 0\n    if group[genre].iloc[0] == 1:\n        avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])\n    return avg_rating": "function to compute mean of a group",
            "if group[genre].iloc[0] == 1:\n    avg_rating = ratings.loc[group[genre].index].sum()['rating'] / len(ratings.loc[group[genre].index])": "compute mean of a group",
            "ratings.loc[group[genre].index].sum()": "data filtering; data aggregation",
            "avg_rating = 0": "create numeric variable"
        }
    },
    "2566": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    new_ratings = ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')\n    new_ratings.head()\n    d = {}\n    for i in genres:\n        d[i] = new_ratings[new_ratings[i] == 1].rating.mean()\n    return d": {
                "ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')": {},
                "new_ratings.head()": {},
                "d = {}": {},
                "for i in genres:\n    d[i] = new_ratings[new_ratings[i] == 1].rating.mean()": {
                    "new_ratings[new_ratings[i] == 1].rating.mean()": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "data joining": {},
                "get first n rows": {},
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering; data aggregation": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    new_ratings = ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')\n    new_ratings.head()\n    d = {}\n    for i in genres:\n        d[i] = new_ratings[new_ratings[i] == 1].rating.mean()\n    return d": "function to compute grouped mean",
            "ratings.merge(movies[genres], how='outer', left_on='item_id', right_on='movie_id')": "data joining",
            "for i in genres:\n    d[i] = new_ratings[new_ratings[i] == 1].rating.mean()": "compute grouped mean",
            "new_ratings[new_ratings[i] == 1].rating.mean()": "data filtering; data aggregation",
            "new_ratings.head()": "get first n rows",
            "d = {}": "create dictionary"
        }
    },
    "1882": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    d = {}\n    for i in genres:\n        m = movies[movies[i] == 1].index.values\n        d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()\n    return d": {
                "d = {}": {},
                "for i in genres:\n    m = movies[movies[i] == 1].index.values\n    d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()": {
                    "m = movies[movies[i] == 1].index.values": {},
                    "ratings['item_id'].isin(m)": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "data filtering condition": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    d = {}\n    for i in genres:\n        m = movies[movies[i] == 1].index.values\n        d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()\n    return d": "function to compute grouped mean",
            "for i in genres:\n    m = movies[movies[i] == 1].index.values\n    d[i] = ratings[ratings['item_id'].isin(m)]['rating'].mean()": "compute grouped mean",
            "ratings['item_id'].isin(m)": "data filtering condition",
            "m = movies[movies[i] == 1].index.values": "data filtering",
            "d = {}": "create dictionary"
        }
    },
    "23914": {
        "chunk_tree": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    movie_rating_by_genre_dict = dict()\n    for genre in genres:\n        movie_by_genre = movies[movies[genre] == 1]\n        avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n        movie_rating_by_genre_dict[genre] = avg\n    return movie_rating_by_genre_dict": {
                "movie_rating_by_genre_dict = dict()": {},
                "for genre in genres:\n    movie_by_genre = movies[movies[genre] == 1]\n    avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n    movie_rating_by_genre_dict[genre] = avg": {
                    "movie_by_genre = movies[movies[genre] == 1]": {},
                    "ratings['item_id'].isin(movie_by_genre.index)": {},
                    "movie_rating_by_genre_dict[genre] = avg": {}
                }
            }
        },
        "plan_tree": {
            "function to compute grouped mean": {
                "create dictionary": {},
                "compute grouped mean": {
                    "data filtering": {},
                    "data filtering condition": {},
                    "populate dictionary": {}
                }
            }
        },
        "chunk_to_plan_op": {
            "def movie_rating_by_genre(ratings, movies, genres):\n    movie_rating_by_genre_dict = dict()\n    for genre in genres:\n        movie_by_genre = movies[movies[genre] == 1]\n        avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n        movie_rating_by_genre_dict[genre] = avg\n    return movie_rating_by_genre_dict": "function to compute grouped mean",
            "for genre in genres:\n    movie_by_genre = movies[movies[genre] == 1]\n    avg = ratings[ratings['item_id'].isin(movie_by_genre.index)]['rating'].mean()\n    movie_rating_by_genre_dict[genre] = avg": "compute grouped mean",
            "ratings['item_id'].isin(movie_by_genre.index)": "data filtering condition",
            "movie_rating_by_genre_dict[genre] = avg": "populate dictionary",
            "movie_rating_by_genre_dict = dict()": "create dictionary",
            "movie_by_genre = movies[movies[genre] == 1]": "data filtering"
        }
    }
}